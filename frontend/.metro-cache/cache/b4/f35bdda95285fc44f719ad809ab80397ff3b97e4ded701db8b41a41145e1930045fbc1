{"dependencies":[{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"3suYSPX9nHbHZ1xNTsKXtKj0atE=","exportNames":["*"]}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"]}},{"name":"@react-navigation/native-stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":23,"index":228},"end":{"line":6,"column":64,"index":269}}],"key":"Tw1dyZPdNt5nhNu5CoB7YZxWQjI=","exportNames":["*"]}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":292},"end":{"line":7,"column":49,"index":320}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"]}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":350},"end":{"line":8,"column":58,"index":380}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"]}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":21,"index":403},"end":{"line":9,"column":45,"index":427}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"]}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":20,"index":449},"end":{"line":10,"column":49,"index":478}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxRuntime = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = undefined;\n  var native_1 = require(_dependencyMap[1]);\n  var native_stack_1 = require(_dependencyMap[2]);\n  var non_secure_1 = require(_dependencyMap[3]);\n  var withLayoutContext_1 = require(_dependencyMap[4]);\n  var useScreens_1 = require(_dependencyMap[5]);\n  var Protected_1 = require(_dependencyMap[6]);\n  var NativeStackNavigator = (0, native_stack_1.createNativeStackNavigator)().Navigator;\n  var RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE';\n  }\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  var stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        var actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          var actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        var routeParamList = options.routeParamList;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              var getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              var id = getId?.({\n                params: action.payload.params\n              });\n              var route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                var currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              var params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params;\n              }\n              var routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (var r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push({\n                        ...route,\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      });\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    var lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  var key = routes.length === state.routes.length ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push({\n                    ...route,\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  });\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              var result = {\n                ...state,\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              };\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    var currentIndex = state.index || state.routes.length - 1;\n    var current = state.routes[currentIndex];\n    var name = current.name;\n    var id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    var routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  }\n  var Stack = Object.assign(props => {\n    return /*#__PURE__*/_reactJsxRuntime.jsx(RNStack, {\n      ...props,\n      UNSTABLE_router: exports.stackRouterOverride\n    });\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  exports.default = Stack;\n  var StackRouter = options => {\n    var router = (0, native_1.StackRouter)(options);\n    return {\n      ...router,\n      ...(0, exports.stackRouterOverride)(router)\n    };\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":262,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxRuntime"],[5,22,2,13],[5,25,2,13,"require"],[5,32,2,13],[5,33,2,13,"_dependencyMap"],[5,47,2,13],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,21],[6,24,3,22,"exports"],[6,31,3,29],[6,33,3,31],[6,45,3,43],[6,47,3,45],[7,4,3,47,"value"],[7,9,3,52],[7,11,3,54],[8,2,3,59],[8,3,3,60],[8,4,3,61],[9,2,4,0,"exports"],[9,9,4,7],[9,10,4,8,"StackRouter"],[9,21,4,19],[9,24,4,22,"exports"],[9,31,4,29],[9,32,4,30,"stackRouterOverride"],[9,51,4,49],[9,54,4,49,"undefined"],[9,63,4,58],[10,2,5,0],[10,6,5,6,"native_1"],[10,14,5,14],[10,17,5,17,"require"],[10,24,5,24],[10,25,5,24,"_dependencyMap"],[10,39,5,24],[10,42,5,51],[10,43,5,52],[11,2,6,0],[11,6,6,6,"native_stack_1"],[11,20,6,20],[11,23,6,23,"require"],[11,30,6,30],[11,31,6,30,"_dependencyMap"],[11,45,6,30],[11,48,6,63],[11,49,6,64],[12,2,7,0],[12,6,7,6,"non_secure_1"],[12,18,7,18],[12,21,7,21,"require"],[12,28,7,28],[12,29,7,28,"_dependencyMap"],[12,43,7,28],[12,46,7,48],[12,47,7,49],[13,2,8,0],[13,6,8,6,"withLayoutContext_1"],[13,25,8,25],[13,28,8,28,"require"],[13,35,8,35],[13,36,8,35,"_dependencyMap"],[13,50,8,35],[13,53,8,57],[13,54,8,58],[14,2,9,0],[14,6,9,6,"useScreens_1"],[14,18,9,18],[14,21,9,21,"require"],[14,28,9,28],[14,29,9,28,"_dependencyMap"],[14,43,9,28],[14,46,9,44],[14,47,9,45],[15,2,10,0],[15,6,10,6,"Protected_1"],[15,17,10,17],[15,20,10,20,"require"],[15,27,10,27],[15,28,10,27,"_dependencyMap"],[15,42,10,27],[15,45,10,48],[15,46,10,49],[16,2,11,0],[16,6,11,6,"NativeStackNavigator"],[16,26,11,26],[16,29,11,29],[16,30,11,30],[16,31,11,31],[16,33,11,33,"native_stack_1"],[16,47,11,47],[16,48,11,48,"createNativeStackNavigator"],[16,74,11,74],[16,76,11,76],[16,77,11,77],[16,78,11,78,"Navigator"],[16,87,11,87],[17,2,12,0],[17,6,12,6,"RNStack"],[17,13,12,13],[17,16,12,16],[17,17,12,17],[17,18,12,18],[17,20,12,20,"withLayoutContext_1"],[17,39,12,39],[17,40,12,40,"withLayoutContext"],[17,57,12,57],[17,59,12,59,"NativeStackNavigator"],[17,79,12,79],[17,80,12,80],[18,2,13,0],[18,11,13,9,"isStackAction"],[18,24,13,22,"isStackAction"],[18,25,13,23,"action"],[18,31,13,29],[18,33,13,31],[19,4,14,4],[19,11,14,12,"action"],[19,17,14,18],[19,18,14,19,"type"],[19,22,14,23],[19,27,14,28],[19,33,14,34],[19,37,15,8,"action"],[19,43,15,14],[19,44,15,15,"type"],[19,48,15,19],[19,53,15,24],[19,63,15,34],[19,67,16,8,"action"],[19,73,16,14],[19,74,16,15,"type"],[19,78,16,19],[19,83,16,24],[19,88,16,29],[19,92,17,8,"action"],[19,98,17,14],[19,99,17,15,"type"],[19,103,17,19],[19,108,17,24],[19,120,17,36],[19,124,18,8,"action"],[19,130,18,14],[19,131,18,15,"type"],[19,135,18,19],[19,140,18,24],[19,149,18,33],[20,2,19,0],[21,2,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,2,29,0],[30,6,29,6,"stackRouterOverride"],[30,25,29,25],[30,28,29,29,"original"],[30,36,29,37],[30,40,29,42],[31,4,30,4],[31,11,30,11],[32,6,31,8,"getStateForAction"],[32,23,31,25],[32,25,31,27,"getStateForAction"],[32,26,31,28,"state"],[32,31,31,33],[32,33,31,35,"action"],[32,39,31,41],[32,41,31,43,"options"],[32,48,31,50],[32,53,31,55],[33,8,32,12],[33,12,32,16,"action"],[33,18,32,22],[33,19,32,23,"target"],[33,25,32,29],[33,29,32,33,"action"],[33,35,32,39],[33,36,32,40,"target"],[33,42,32,46],[33,47,32,51,"state"],[33,52,32,56],[33,53,32,57,"key"],[33,56,32,60],[33,58,32,62],[34,10,33,16],[34,17,33,23],[34,21,33,27],[35,8,34,12],[36,8,35,12],[36,12,35,16],[36,13,35,17,"isStackAction"],[36,26,35,30],[36,27,35,31,"action"],[36,33,35,37],[36,34,35,38],[36,36,35,40],[37,10,36,16],[37,17,36,23,"original"],[37,25,36,31],[37,26,36,32,"getStateForAction"],[37,43,36,49],[37,44,36,50,"state"],[37,49,36,55],[37,51,36,57,"action"],[37,57,36,63],[37,59,36,65,"options"],[37,66,36,72],[37,67,36,73],[38,8,37,12],[39,8,38,12],[40,8,39,12],[40,12,39,18,"actionSingularOptions"],[40,33,39,39],[40,36,39,42,"action"],[40,42,39,48],[40,43,39,49,"payload"],[40,50,39,56],[40,54,39,60],[40,64,39,70],[40,68,39,74,"action"],[40,74,39,80],[40,75,39,81,"payload"],[40,82,39,88],[40,85,40,18,"action"],[40,91,40,24],[40,92,40,25,"payload"],[40,99,40,32],[40,100,40,33,"singular"],[40,108,40,41],[40,111,41,18,"undefined"],[40,120,41,27],[41,8,42,12],[42,8,43,12],[42,17,43,21,"getIdFunction"],[42,30,43,34,"getIdFunction"],[42,31,43,34],[42,33,43,37],[43,10,44,16],[44,10,45,16],[44,14,45,20],[44,16,45,22],[44,25,45,31],[44,29,45,35,"action"],[44,35,45,41],[44,36,45,42],[44,40,46,20],[44,41,46,21,"action"],[44,47,46,27],[44,48,46,28,"payload"],[44,55,46,35],[44,59,47,20],[44,61,47,22],[44,67,47,28],[44,71,47,32,"action"],[44,77,47,38],[44,78,47,39,"payload"],[44,85,47,46],[44,86,47,47],[44,90,48,20],[44,97,48,27,"action"],[44,103,48,33],[44,104,48,34,"payload"],[44,111,48,41],[44,112,48,42,"name"],[44,116,48,46],[44,121,48,51],[44,129,48,59],[44,131,48,61],[45,12,49,20],[46,10,50,16],[47,10,51,16],[47,14,51,22,"actionName"],[47,24,51,32],[47,27,51,35,"action"],[47,33,51,41],[47,34,51,42,"payload"],[47,41,51,49],[47,42,51,50,"name"],[47,46,51,54],[48,10,52,16],[49,12,53,16],[50,12,54,16,"getActionSingularIdFn"],[50,33,54,37],[50,34,54,38,"actionSingularOptions"],[50,55,54,59],[50,57,54,61,"actionName"],[50,67,54,71],[50,68,54,72],[51,12,55,20],[52,12,56,20,"options"],[52,19,56,27],[52,20,56,28,"routeGetIdList"],[52,34,56,42],[52,35,56,43,"actionName"],[52,45,56,53],[53,10,56,54],[54,8,57,12],[55,8,58,12],[55,12,58,20,"routeParamList"],[55,26,58,34],[55,29,58,39,"options"],[55,36,58,46],[55,37,58,20,"routeParamList"],[55,51,58,34],[56,8,59,12],[56,16,59,20,"action"],[56,22,59,26],[56,23,59,27,"type"],[56,27,59,31],[57,10,60,16],[57,15,60,21],[57,21,60,27],[58,10,61,16],[58,15,61,21],[58,25,61,31],[59,12,61,33],[60,14,62,20],[60,18,62,24],[60,19,62,25,"state"],[60,24,62,30],[60,25,62,31,"routeNames"],[60,35,62,41],[60,36,62,42,"includes"],[60,44,62,50],[60,45,62,51,"action"],[60,51,62,57],[60,52,62,58,"payload"],[60,59,62,65],[60,60,62,66,"name"],[60,64,62,70],[60,65,62,71],[60,67,62,73],[61,16,63,24],[61,23,63,31],[61,27,63,35],[62,14,64,20],[63,14,65,20],[64,14,66,20],[64,18,66,26,"getId"],[64,23,66,31],[64,26,66,34,"getIdFunction"],[64,39,66,47],[64,40,66,48],[64,41,66,49],[65,14,67,20],[66,14,68,20],[67,14,69,20],[67,18,69,26,"id"],[67,20,69,28],[67,23,69,31,"getId"],[67,28,69,36],[67,31,69,39],[68,16,69,41,"params"],[68,22,69,47],[68,24,69,49,"action"],[68,30,69,55],[68,31,69,56,"payload"],[68,38,69,63],[68,39,69,64,"params"],[69,14,69,71],[69,15,69,72],[69,16,69,73],[70,14,70,20],[70,18,70,24,"route"],[70,23,70,29],[71,14,71,20],[71,18,71,24,"id"],[71,20,71,26],[71,25,71,31,"undefined"],[71,34,71,40],[71,36,71,42],[72,16,72,24,"route"],[72,21,72,29],[72,24,72,32,"state"],[72,29,72,37],[72,30,72,38,"routes"],[72,36,72,44],[72,37,72,45,"findLast"],[72,45,72,53],[72,46,72,55,"route"],[72,51,72,60],[72,55,72,65,"route"],[72,60,72,70],[72,61,72,71,"name"],[72,65,72,75],[72,70,72,80,"action"],[72,76,72,86],[72,77,72,87,"payload"],[72,84,72,94],[72,85,72,95,"name"],[72,89,72,99],[72,93,72,103,"id"],[72,95,72,105],[72,100,72,110,"getId"],[72,105,72,115],[72,108,72,118],[73,18,72,120,"params"],[73,24,72,126],[73,26,72,128,"route"],[73,31,72,133],[73,32,72,134,"params"],[74,16,72,141],[74,17,72,142],[74,18,72,143],[74,19,72,144],[75,14,73,20],[75,15,73,21],[75,21,74,25],[75,25,74,29,"action"],[75,31,74,35],[75,32,74,36,"type"],[75,36,74,40],[75,41,74,45],[75,51,74,55],[75,53,74,57],[76,16,75,24],[76,20,75,30,"currentRoute"],[76,32,75,42],[76,35,75,45,"state"],[76,40,75,50],[76,41,75,51,"routes"],[76,47,75,57],[76,48,75,58,"state"],[76,53,75,63],[76,54,75,64,"index"],[76,59,75,69],[76,60,75,70],[77,16,76,24],[78,16,77,24],[78,20,77,28,"action"],[78,26,77,34],[78,27,77,35,"payload"],[78,34,77,42],[78,35,77,43,"name"],[78,39,77,47],[78,44,77,52,"currentRoute"],[78,56,77,64],[78,57,77,65,"name"],[78,61,77,69],[78,63,77,71],[79,18,78,28,"route"],[79,23,78,33],[79,26,78,36,"currentRoute"],[79,38,78,48],[80,16,79,24],[80,17,79,25],[80,23,80,29],[80,27,80,33,"action"],[80,33,80,39],[80,34,80,40,"payload"],[80,41,80,47],[80,42,80,48,"pop"],[80,45,80,51],[80,47,80,53],[81,18,81,28,"route"],[81,23,81,33],[81,26,81,36,"state"],[81,31,81,41],[81,32,81,42,"routes"],[81,38,81,48],[81,39,81,49,"findLast"],[81,47,81,57],[81,48,81,59,"route"],[81,53,81,64],[81,57,81,69,"route"],[81,62,81,74],[81,63,81,75,"name"],[81,67,81,79],[81,72,81,84,"action"],[81,78,81,90],[81,79,81,91,"payload"],[81,86,81,98],[81,87,81,99,"name"],[81,91,81,103],[81,92,81,104],[82,16,82,24],[83,14,83,20],[84,14,84,20],[84,18,84,24],[84,19,84,25,"route"],[84,24,84,30],[84,26,84,32],[85,16,85,24,"route"],[85,21,85,29],[85,24,85,32,"state"],[85,29,85,37],[85,30,85,38,"preloadedRoutes"],[85,45,85,53],[85,46,85,54,"find"],[85,50,85,58],[85,51,85,60,"route"],[85,56,85,65],[85,60,85,70,"route"],[85,65,85,75],[85,66,85,76,"name"],[85,70,85,80],[85,75,85,85,"action"],[85,81,85,91],[85,82,85,92,"payload"],[85,89,85,99],[85,90,85,100,"name"],[85,94,85,104],[85,98,85,108,"id"],[85,100,85,110],[85,105,85,115,"getId"],[85,110,85,120],[85,113,85,123],[86,18,85,125,"params"],[86,24,85,131],[86,26,85,133,"route"],[86,31,85,138],[86,32,85,139,"params"],[87,16,85,146],[87,17,85,147],[87,18,85,148],[87,19,85,149],[88,14,86,20],[89,14,87,20],[89,18,87,24,"params"],[89,24,87,30],[90,14,88,20],[90,18,88,24,"action"],[90,24,88,30],[90,25,88,31,"type"],[90,29,88,35],[90,34,88,40],[90,44,88,50],[90,48,88,54,"action"],[90,54,88,60],[90,55,88,61,"payload"],[90,62,88,68],[90,63,88,69,"merge"],[90,68,88,74],[90,72,88,78,"route"],[90,77,88,83],[90,79,88,85],[91,16,89,24,"params"],[91,22,89,30],[91,25,90,28,"action"],[91,31,90,34],[91,32,90,35,"payload"],[91,39,90,42],[91,40,90,43,"params"],[91,46,90,49],[91,51,90,54,"undefined"],[91,60,90,63],[91,64,91,32,"routeParamList"],[91,78,91,46],[91,79,91,47,"action"],[91,85,91,53],[91,86,91,54,"payload"],[91,93,91,61],[91,94,91,62,"name"],[91,98,91,66],[91,99,91,67],[91,104,91,72,"undefined"],[91,113,91,81],[91,116,92,34],[92,18,93,36],[92,21,93,39,"routeParamList"],[92,35,93,53],[92,36,93,54,"action"],[92,42,93,60],[92,43,93,61,"payload"],[92,50,93,68],[92,51,93,69,"name"],[92,55,93,73],[92,56,93,74],[93,18,94,36],[93,21,94,39,"route"],[93,26,94,44],[93,27,94,45,"params"],[93,33,94,51],[94,18,95,36],[94,21,95,39,"action"],[94,27,95,45],[94,28,95,46,"payload"],[94,35,95,53],[94,36,95,54,"params"],[95,16,96,32],[95,17,96,33],[95,20,97,34,"route"],[95,25,97,39],[95,26,97,40,"params"],[95,32,97,46],[96,14,98,20],[96,15,98,21],[96,21,99,25],[97,16,100,24,"params"],[97,22,100,30],[97,25,101,28,"routeParamList"],[97,39,101,42],[97,40,101,43,"action"],[97,46,101,49],[97,47,101,50,"payload"],[97,54,101,57],[97,55,101,58,"name"],[97,59,101,62],[97,60,101,63],[97,65,101,68,"undefined"],[97,74,101,77],[97,77,102,34],[98,18,103,36],[98,21,103,39,"routeParamList"],[98,35,103,53],[98,36,103,54,"action"],[98,42,103,60],[98,43,103,61,"payload"],[98,50,103,68],[98,51,103,69,"name"],[98,55,103,73],[98,56,103,74],[99,18,104,36],[99,21,104,39,"action"],[99,27,104,45],[99,28,104,46,"payload"],[99,35,104,53],[99,36,104,54,"params"],[100,16,105,32],[100,17,105,33],[100,20,106,34,"action"],[100,26,106,40],[100,27,106,41,"payload"],[100,34,106,48],[100,35,106,49,"params"],[100,41,106,55],[101,14,107,20],[102,14,108,20],[102,18,108,24,"routes"],[102,24,108,30],[103,14,109,20],[103,18,109,24,"route"],[103,23,109,29],[103,25,109,31],[104,16,110,24],[104,20,110,28,"action"],[104,26,110,34],[104,27,110,35,"type"],[104,31,110,39],[104,36,110,44],[104,46,110,54],[104,50,110,58,"action"],[104,56,110,64],[104,57,110,65,"payload"],[104,64,110,72],[104,65,110,73,"pop"],[104,68,110,76],[104,70,110,78],[105,18,111,28,"routes"],[105,24,111,34],[105,27,111,37],[105,29,111,39],[106,18,112,28],[107,18,113,28],[107,23,113,33],[107,27,113,39,"r"],[107,28,113,40],[107,32,113,44,"state"],[107,37,113,49],[107,38,113,50,"routes"],[107,44,113,56],[107,46,113,58],[108,20,114,32],[108,24,114,36,"r"],[108,25,114,37],[108,26,114,38,"key"],[108,29,114,41],[108,34,114,46,"route"],[108,39,114,51],[108,40,114,52,"key"],[108,43,114,55],[108,45,114,57],[109,22,115,36,"routes"],[109,28,115,42],[109,29,115,43,"push"],[109,33,115,47],[109,34,115,48],[110,24,116,40],[110,27,116,43,"route"],[110,32,116,48],[111,24,117,40,"path"],[111,28,117,44],[111,30,117,46,"action"],[111,36,117,52],[111,37,117,53,"payload"],[111,44,117,60],[111,45,117,61,"path"],[111,49,117,65],[111,54,117,70,"undefined"],[111,63,117,79],[111,66,117,82,"action"],[111,72,117,88],[111,73,117,89,"payload"],[111,80,117,96],[111,81,117,97,"path"],[111,85,117,101],[111,88,117,104,"route"],[111,93,117,109],[111,94,117,110,"path"],[111,98,117,114],[112,24,118,40,"params"],[113,22,119,36],[113,23,119,37],[113,24,119,38],[114,22,120,36],[115,20,121,32],[116,20,122,32,"routes"],[116,26,122,38],[116,27,122,39,"push"],[116,31,122,43],[116,32,122,44,"r"],[116,33,122,45],[116,34,122,46],[117,18,123,28],[118,16,124,24],[118,17,124,25],[118,23,125,29],[119,18,126,28],[120,18,127,28],[121,18,128,28],[122,18,129,28],[122,22,129,32,"id"],[122,24,129,34],[122,29,129,39,"undefined"],[122,38,129,48],[122,40,129,50],[123,20,130,32,"routes"],[123,26,130,38],[123,29,130,41,"state"],[123,34,130,46],[123,35,130,47,"routes"],[123,41,130,53],[123,42,130,54,"filter"],[123,48,130,60],[123,49,130,62,"r"],[123,50,130,63],[123,54,130,68,"r"],[123,55,130,69],[123,56,130,70,"key"],[123,59,130,73],[123,64,130,78,"route"],[123,69,130,83],[123,70,130,84,"key"],[123,73,130,87],[123,74,130,88],[124,18,131,28],[124,19,131,29],[124,25,132,33],[124,29,132,37,"action"],[124,35,132,43],[124,36,132,44,"type"],[124,40,132,48],[124,45,132,53],[124,55,132,63],[124,59,132,67,"state"],[124,64,132,72],[124,65,132,73,"routes"],[124,71,132,79],[124,72,132,80,"length"],[124,78,132,86],[124,81,132,89],[124,82,132,90],[124,84,132,92],[125,20,133,32],[126,20,134,32],[126,24,134,38,"lastRoute"],[126,33,134,47],[126,36,134,50,"state"],[126,41,134,55],[126,42,134,56,"routes"],[126,48,134,62],[126,49,134,63,"state"],[126,54,134,68],[126,55,134,69,"routes"],[126,61,134,75],[126,62,134,76,"length"],[126,68,134,82],[126,71,134,85],[126,72,134,86],[126,73,134,87],[127,20,135,32],[127,24,135,36],[127,25,135,37],[127,26,135,38],[127,28,135,40,"useScreens_1"],[127,40,135,52],[127,41,135,53,"getSingularId"],[127,54,135,66],[127,56,135,68,"lastRoute"],[127,65,135,77],[127,66,135,78,"name"],[127,70,135,82],[127,72,135,84],[128,22,135,86,"params"],[128,28,135,92],[128,30,135,94,"lastRoute"],[128,39,135,103],[128,40,135,104,"params"],[129,20,135,111],[129,21,135,112],[129,22,135,113],[129,27,136,36],[129,28,136,37],[129,29,136,38],[129,31,136,40,"useScreens_1"],[129,43,136,52],[129,44,136,53,"getSingularId"],[129,57,136,66],[129,59,136,68,"route"],[129,64,136,73],[129,65,136,74,"name"],[129,69,136,78],[129,71,136,80],[130,22,136,82,"params"],[131,20,136,89],[131,21,136,90],[131,22,136,91],[131,24,136,93],[132,22,137,36,"routes"],[132,28,137,42],[132,31,137,45,"state"],[132,36,137,50],[132,37,137,51,"routes"],[132,43,137,57],[132,44,137,58,"slice"],[132,49,137,63],[132,50,137,64],[132,51,137,65],[132,55,137,69],[132,56,137,70],[133,20,138,32],[133,21,138,33],[133,27,139,37],[134,22,140,36,"routes"],[134,28,140,42],[134,31,140,45],[134,32,140,46],[134,35,140,49,"state"],[134,40,140,54],[134,41,140,55,"routes"],[134,47,140,61],[134,48,140,62],[135,20,141,32],[136,18,142,28],[136,19,142,29],[136,25,143,33],[137,20,144,32,"routes"],[137,26,144,38],[137,29,144,41],[137,30,144,42],[137,33,144,45,"state"],[137,38,144,50],[137,39,144,51,"routes"],[137,45,144,57],[137,46,144,58],[138,18,145,28],[139,18,146,28],[140,18,147,28],[141,18,148,28],[141,22,148,34,"key"],[141,25,148,37],[141,28,148,40,"routes"],[141,34,148,46],[141,35,148,47,"length"],[141,41,148,53],[141,46,148,58,"state"],[141,51,148,63],[141,52,148,64,"routes"],[141,58,148,70],[141,59,148,71,"length"],[141,65,148,77],[141,68,149,34],[141,71,149,37,"action"],[141,77,149,43],[141,78,149,44,"payload"],[141,85,149,51],[141,86,149,52,"name"],[141,90,149,56],[141,94,149,60],[141,95,149,61],[141,96,149,62],[141,98,149,64,"non_secure_1"],[141,110,149,76],[141,111,149,77,"nanoid"],[141,117,149,83],[141,119,149,85],[141,120,149,86],[141,122,149,88],[141,125,150,34,"route"],[141,130,150,39],[141,131,150,40,"key"],[141,134,150,43],[142,18,151,28,"routes"],[142,24,151,34],[142,25,151,35,"push"],[142,29,151,39],[142,30,151,40],[143,20,152,32],[143,23,152,35,"route"],[143,28,152,40],[144,20,153,32,"key"],[144,23,153,35],[145,20,154,32,"path"],[145,24,154,36],[145,26,154,38,"action"],[145,32,154,44],[145,33,154,45,"type"],[145,37,154,49],[145,42,154,54],[145,52,154,64],[145,56,154,68,"action"],[145,62,154,74],[145,63,154,75,"payload"],[145,70,154,82],[145,71,154,83,"path"],[145,75,154,87],[145,80,154,92,"undefined"],[145,89,154,101],[145,92,155,38,"action"],[145,98,155,44],[145,99,155,45,"payload"],[145,106,155,52],[145,107,155,53,"path"],[145,111,155,57],[145,114,156,38,"route"],[145,119,156,43],[145,120,156,44,"path"],[145,124,156,48],[146,20,157,32,"params"],[147,18,158,28],[147,19,158,29],[147,20,158,30],[148,18,159,28],[149,18,160,28],[150,18,161,28],[151,18,162,28],[152,18,163,28],[153,18,164,28],[154,18,165,28],[155,18,166,28],[156,18,167,28],[157,18,168,28],[158,16,169,24],[159,14,170,20],[159,15,170,21],[159,21,171,25],[160,16,172,24,"routes"],[160,22,172,30],[160,25,172,33],[160,26,173,28],[160,29,173,31,"state"],[160,34,173,36],[160,35,173,37,"routes"],[160,41,173,43],[160,43,174,28],[161,18,175,32,"key"],[161,21,175,35],[161,23,175,37],[161,26,175,40,"action"],[161,32,175,46],[161,33,175,47,"payload"],[161,40,175,54],[161,41,175,55,"name"],[161,45,175,59],[161,49,175,63],[161,50,175,64],[161,51,175,65],[161,53,175,67,"non_secure_1"],[161,65,175,79],[161,66,175,80,"nanoid"],[161,72,175,86],[161,74,175,88],[161,75,175,89],[161,77,175,91],[162,18,176,32,"name"],[162,22,176,36],[162,24,176,38,"action"],[162,30,176,44],[162,31,176,45,"payload"],[162,38,176,52],[162,39,176,53,"name"],[162,43,176,57],[163,18,177,32,"path"],[163,22,177,36],[163,24,177,38,"action"],[163,30,177,44],[163,31,177,45,"type"],[163,35,177,49],[163,40,177,54],[163,50,177,64],[163,53,177,67,"action"],[163,59,177,73],[163,60,177,74,"payload"],[163,67,177,81],[163,68,177,82,"path"],[163,72,177,86],[163,75,177,89,"undefined"],[163,84,177,98],[164,18,178,32,"params"],[165,16,179,28],[165,17,179,29],[165,18,180,25],[166,14,181,20],[167,14,182,20],[168,14,183,20],[169,14,184,20],[169,18,184,26,"result"],[169,24,184,32],[169,27,184,35],[170,16,185,24],[170,19,185,27,"state"],[170,24,185,32],[171,16,186,24,"index"],[171,21,186,29],[171,23,186,31,"routes"],[171,29,186,37],[171,30,186,38,"length"],[171,36,186,44],[171,39,186,47],[171,40,186,48],[172,16,187,24,"preloadedRoutes"],[172,31,187,39],[172,33,187,41,"state"],[172,38,187,46],[172,39,187,47,"preloadedRoutes"],[172,54,187,62],[172,55,187,63,"filter"],[172,61,187,69],[172,62,187,71,"route"],[172,67,187,76],[172,71,187,81,"routes"],[172,77,187,87],[172,78,187,88,"routes"],[172,84,187,94],[172,85,187,95,"length"],[172,91,187,101],[172,94,187,104],[172,95,187,105],[172,96,187,106],[172,97,187,107,"key"],[172,100,187,110],[172,105,187,115,"route"],[172,110,187,120],[172,111,187,121,"key"],[172,114,187,124],[172,115,187,125],[173,16,188,24,"routes"],[174,14,189,20],[174,15,189,21],[175,14,190,20],[175,18,190,24,"actionSingularOptions"],[175,39,190,45],[175,41,190,47],[176,16,191,24],[176,23,191,31,"filterSingular"],[176,37,191,45],[176,38,191,46,"result"],[176,44,191,52],[176,46,191,54,"getId"],[176,51,191,59],[176,52,191,60],[177,14,192,20],[178,14,193,20],[178,21,193,27,"result"],[178,27,193,33],[179,14,194,20],[180,14,195,20],[181,14,196,20],[182,14,197,20],[183,14,198,20],[184,14,199,20],[185,14,200,20],[186,14,201,20],[187,14,202,20],[188,12,203,16],[189,10,204,16],[190,12,204,25],[191,14,205,20],[191,21,205,27,"original"],[191,29,205,35],[191,30,205,36,"getStateForAction"],[191,47,205,53],[191,48,205,54,"state"],[191,53,205,59],[191,55,205,61,"action"],[191,61,205,67],[191,63,205,69,"options"],[191,70,205,76],[191,71,205,77],[192,12,206,16],[193,8,207,12],[194,6,208,8],[195,4,209,4],[195,5,209,5],[196,2,210,0],[196,3,210,1],[197,2,211,0,"exports"],[197,9,211,7],[197,10,211,8,"stackRouterOverride"],[197,29,211,27],[197,32,211,30,"stackRouterOverride"],[197,51,211,49],[198,2,212,0],[198,11,212,9,"getActionSingularIdFn"],[198,32,212,30,"getActionSingularIdFn"],[198,33,212,31,"actionGetId"],[198,44,212,42],[198,46,212,44,"name"],[198,50,212,48],[198,52,212,50],[199,4,213,4],[199,8,213,8],[199,15,213,15,"actionGetId"],[199,26,213,26],[199,31,213,31],[199,41,213,41],[199,43,213,43],[200,6,214,8],[200,13,214,16,"options"],[200,20,214,23],[200,24,214,28,"actionGetId"],[200,35,214,39],[200,36,214,40,"name"],[200,40,214,44],[200,42,214,46,"options"],[200,49,214,53],[200,50,214,54,"params"],[200,56,214,60],[200,60,214,64],[200,61,214,65],[200,62,214,66],[200,63,214,67],[201,4,215,4],[201,5,215,5],[201,11,216,9],[201,15,216,13,"actionGetId"],[201,26,216,24],[201,31,216,29],[201,35,216,33],[201,37,216,35],[202,6,217,8],[202,13,217,16,"options"],[202,20,217,23],[202,24,217,28],[202,25,217,29],[202,26,217,30],[202,28,217,32,"useScreens_1"],[202,40,217,44],[202,41,217,45,"getSingularId"],[202,54,217,58],[202,56,217,60,"name"],[202,60,217,64],[202,62,217,66,"options"],[202,69,217,73],[202,70,217,74],[203,4,218,4],[204,4,219,4],[204,11,219,11,"undefined"],[204,20,219,20],[205,2,220,0],[206,2,221,0],[207,0,222,0],[208,0,223,0],[209,0,224,0],[210,2,225,0],[210,11,225,9,"filterSingular"],[210,25,225,23,"filterSingular"],[210,26,225,24,"state"],[210,31,225,29],[210,33,225,31,"getId"],[210,38,225,36],[210,40,225,38],[211,4,226,4],[211,8,226,8],[211,9,226,9,"state"],[211,14,226,14],[211,16,226,16],[212,6,227,8],[212,13,227,15,"state"],[212,18,227,20],[213,4,228,4],[214,4,229,4],[214,8,229,8],[214,9,229,9,"state"],[214,14,229,14],[214,15,229,15,"routes"],[214,21,229,21],[214,23,229,23],[215,6,230,8],[215,13,230,15,"state"],[215,18,230,20],[216,4,231,4],[217,4,232,4],[217,8,232,10,"currentIndex"],[217,20,232,22],[217,23,232,25,"state"],[217,28,232,30],[217,29,232,31,"index"],[217,34,232,36],[217,38,232,40,"state"],[217,43,232,45],[217,44,232,46,"routes"],[217,50,232,52],[217,51,232,53,"length"],[217,57,232,59],[217,60,232,62],[217,61,232,63],[218,4,233,4],[218,8,233,10,"current"],[218,15,233,17],[218,18,233,20,"state"],[218,23,233,25],[218,24,233,26,"routes"],[218,30,233,32],[218,31,233,33,"currentIndex"],[218,43,233,45],[218,44,233,46],[219,4,234,4],[219,8,234,10,"name"],[219,12,234,14],[219,15,234,17,"current"],[219,22,234,24],[219,23,234,25,"name"],[219,27,234,29],[220,4,235,4],[220,8,235,10,"id"],[220,10,235,12],[220,13,235,15,"getId"],[220,18,235,20],[220,21,235,23],[221,6,235,25,"params"],[221,12,235,31],[221,14,235,33,"current"],[221,21,235,40],[221,22,235,41,"params"],[222,4,235,48],[222,5,235,49],[222,6,235,50],[223,4,236,4],[223,8,236,8],[223,9,236,9,"id"],[223,11,236,11],[223,13,236,13],[224,6,237,8],[224,13,237,15,"state"],[224,18,237,20],[225,4,238,4],[226,4,239,4],[227,4,240,4],[227,8,240,8,"routes"],[227,14,240,14],[227,17,240,17,"state"],[227,22,240,22],[227,23,240,23,"routes"],[227,29,240,29],[228,4,241,4,"routes"],[228,10,241,10],[228,13,241,13,"routes"],[228,19,241,19],[228,20,241,20,"filter"],[228,26,241,26],[228,27,241,27],[228,28,241,28,"route"],[228,33,241,33],[228,35,241,35,"index"],[228,40,241,40],[228,45,241,45],[229,6,242,8],[230,6,243,8],[230,10,243,12,"index"],[230,15,243,17],[230,20,243,22,"currentIndex"],[230,32,243,34],[230,34,243,36],[231,8,244,12],[231,15,244,19],[231,19,244,23],[232,6,245,8],[233,6,246,8],[234,6,247,8],[234,13,247,15,"name"],[234,17,247,19],[234,22,247,24,"route"],[234,27,247,29],[234,28,247,30,"name"],[234,32,247,34],[234,36,247,38,"id"],[234,38,247,40],[234,43,247,45,"getId"],[234,48,247,50],[234,51,247,53],[235,8,247,55,"params"],[235,14,247,61],[235,16,247,63,"route"],[235,21,247,68],[235,22,247,69,"params"],[236,6,247,76],[236,7,247,77],[236,8,247,78],[237,4,248,4],[237,5,248,5],[237,6,248,6],[238,4,249,4],[238,11,249,11],[239,6,250,8],[239,9,250,11,"state"],[239,14,250,16],[240,6,251,8,"index"],[240,11,251,13],[240,13,251,15,"routes"],[240,19,251,21],[240,20,251,22,"length"],[240,26,251,28],[240,29,251,31],[240,30,251,32],[241,6,252,8,"routes"],[242,4,253,4],[242,5,253,5],[243,2,254,0],[244,2,255,0],[244,6,255,6,"Stack"],[244,11,255,11],[244,14,255,14,"Object"],[244,20,255,20],[244,21,255,21,"assign"],[244,27,255,27],[244,28,255,29,"props"],[244,33,255,34],[244,37,255,39],[245,4,256,4],[245,24,256,11,"_reactJsxRuntime"],[245,40,256,11],[245,41,256,11,"jsx"],[245,44,256,11],[245,45,256,12,"RNStack"],[245,52,256,19],[246,6,256,19],[246,9,256,24,"props"],[246,14,256,29],[247,6,256,31,"UNSTABLE_router"],[247,21,256,46],[247,23,256,48,"exports"],[247,30,256,55],[247,31,256,56,"stackRouterOverride"],[248,4,256,76],[248,5,256,77],[248,6,256,78],[249,2,257,0],[249,3,257,1],[249,5,257,3],[250,4,258,4,"Screen"],[250,10,258,10],[250,12,258,12,"RNStack"],[250,19,258,19],[250,20,258,20,"Screen"],[250,26,258,26],[251,4,259,4,"Protected"],[251,13,259,13],[251,15,259,15,"Protected_1"],[251,26,259,26],[251,27,259,27,"Protected"],[252,2,260,0],[252,3,260,1],[252,4,260,2],[253,2,261,0,"exports"],[253,9,261,7],[253,10,261,8,"default"],[253,17,261,15],[253,20,261,18,"Stack"],[253,25,261,23],[254,2,262,0],[254,6,262,6,"StackRouter"],[254,17,262,17],[254,20,262,21,"options"],[254,27,262,28],[254,31,262,33],[255,4,263,4],[255,8,263,10,"router"],[255,14,263,16],[255,17,263,19],[255,18,263,20],[255,19,263,21],[255,21,263,23,"native_1"],[255,29,263,31],[255,30,263,32,"StackRouter"],[255,41,263,43],[255,43,263,45,"options"],[255,50,263,52],[255,51,263,53],[256,4,264,4],[256,11,264,11],[257,6,265,8],[257,9,265,11,"router"],[257,15,265,17],[258,6,266,8],[258,9,266,11],[258,10,266,12],[258,11,266,13],[258,13,266,15,"exports"],[258,20,266,22],[258,21,266,23,"stackRouterOverride"],[258,40,266,42],[258,42,266,44,"router"],[258,48,266,50],[259,4,267,4],[259,5,267,5],[260,2,268,0],[260,3,268,1],[261,2,269,0,"exports"],[261,9,269,7],[261,10,269,8,"StackRouter"],[261,21,269,19],[261,24,269,22,"StackRouter"],[261,35,269,33],[262,0,269,34],[262,3]],"functionMap":{"names":["<global>","isStackAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","StackRouter"],"mappings":"AAA;ACY;CDM;4BEU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;SDqB;CFE;ASE;eCE,oDD;eCG,2DD;CTG;AWK;2BCgB;KDO;CXM;4BaC;CbE;oBcK;CdM"}},"type":"js/module"}]}