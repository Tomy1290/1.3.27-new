{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"]}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":174},"end":{"line":5,"column":43,"index":217}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":218},"end":{"line":6,"column":53,"index":271}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[1]);\n  var _getShadowNodeFromRef = require(_dependencyMap[2]);\n  var _react = require(_dependencyMap[3]);\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[4]));\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    var refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":34,"map":[[7,2,1,0],[7,6,1,0,"_utils"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_getShadowNodeFromRef"],[8,27,2,0],[8,30,2,0,"require"],[8,37,2,0],[8,38,2,0,"_dependencyMap"],[8,52,2,0],[9,2,5,0],[9,6,5,0,"_react"],[9,12,5,0],[9,15,5,0,"require"],[9,22,5,0],[9,23,5,0,"_dependencyMap"],[9,37,5,0],[10,2,6,0],[10,6,6,0,"_findNodeHandle"],[10,21,6,0],[10,24,6,0,"_interopRequireDefault"],[10,46,6,0],[10,47,6,0,"require"],[10,54,6,0],[10,55,6,0,"_dependencyMap"],[10,69,6,0],[11,2,12,0],[12,2,13,0],[13,2,14,0],[14,2,15,7],[14,11,15,16,"useViewRefHandler"],[14,28,15,33,"useViewRefHandler"],[14,29,16,2,"state"],[14,34,16,29],[14,36,17,2,"updateAttachedGestures"],[14,58,17,62],[14,60,18,2],[15,4,19,2],[15,8,19,8,"refHandler"],[15,18,19,18],[15,21,19,21],[15,25,19,21,"useCallback"],[15,43,19,32],[15,45,20,5,"ref"],[15,48,20,32],[15,52,20,37],[16,6,21,6],[16,10,21,10,"ref"],[16,13,21,13],[16,18,21,18],[16,22,21,22],[16,24,21,24],[17,8,22,8],[18,6,23,6],[19,6,25,6,"state"],[19,11,25,11],[19,12,25,12,"viewRef"],[19,19,25,19],[19,22,25,22,"ref"],[19,25,25,25],[21,6,27,6],[22,6,28,6],[22,10,28,10,"state"],[22,15,28,15],[22,16,28,16,"previousViewTag"],[22,31,28,31],[22,38,28,38],[22,40,28,40],[23,8,29,8,"state"],[23,13,29,13],[23,14,29,14,"previousViewTag"],[23,29,29,29],[23,32,29,32],[23,36,29,32,"findNodeHandle"],[23,59,29,46],[23,61,29,47,"state"],[23,66,29,52],[23,67,29,53,"viewRef"],[23,74,29,60],[23,75,29,71],[24,6,30,6],[26,6,32,6],[27,6,33,6],[28,6,34,6],[28,10,34,10],[28,11,34,11,"state"],[28,16,34,16],[28,17,34,17,"firstRender"],[28,28,34,28],[28,30,34,30],[29,8,35,8,"updateAttachedGestures"],[29,30,35,30],[29,31,35,31],[29,35,35,35],[29,36,35,36],[30,6,36,6],[31,4,49,4],[31,5,49,5],[31,7,50,4],[31,8,50,5,"state"],[31,13,50,10],[31,15,50,12,"updateAttachedGestures"],[31,37,50,34],[31,38,51,2],[31,39,51,3],[32,4,53,2],[32,11,53,9,"refHandler"],[32,21,53,19],[33,2,54,0],[34,0,54,1],[34,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCc;ICK;KD6B;CDK"}},"type":"js/module"}]}