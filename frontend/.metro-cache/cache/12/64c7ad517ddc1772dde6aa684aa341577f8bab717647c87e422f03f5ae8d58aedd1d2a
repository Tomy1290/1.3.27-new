{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"../../errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":47,"index":62}}],"key":"eT202ujluoOcHDbauyWnF/muvbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.unflatten = exports.subtractMatrices = exports.scaleMatrix = exports.multiplyMatrices = exports.isAffineMatrixFlat = exports.isAffineMatrix = exports.getRotationMatrix = exports.flatten = exports.decomposeMatrixIntoMatricesAndAngles = exports.decomposeMatrix = exports.addMatrices = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _errors = require(_dependencyMap[2]);\n  var _worklet_15554583600949_init_data = {\n    code: \"function isAffineMatrixFlat_reactNativeReanimated_matrixUtilsTsx1(x){return Array.isArray(x)&&x.length===16&&x.every(function(element){return typeof element==='number'&&!isNaN(element);});}\"\n  };\n  var isAffineMatrixFlat = exports.isAffineMatrixFlat = function () {\n    var isAffineMatrixFlat = function (x) {\n      return Array.isArray(x) && x.length === 16 && x.every(element => typeof element === 'number' && !isNaN(element));\n    };\n    isAffineMatrixFlat.__closure = {};\n    isAffineMatrixFlat.__workletHash = 15554583600949;\n    isAffineMatrixFlat.__initData = _worklet_15554583600949_init_data;\n    return isAffineMatrixFlat;\n  }(); // ts-prune-ignore-next This function is exported to be tested\n  var _worklet_3255481902002_init_data = {\n    code: \"function isAffineMatrix_reactNativeReanimated_matrixUtilsTsx2(x){return Array.isArray(x)&&x.length===4&&x.every(function(row){return Array.isArray(row)&&row.length===4&&row.every(function(element){return typeof element==='number'&&!isNaN(element);});});}\"\n  };\n  var isAffineMatrix = exports.isAffineMatrix = function () {\n    var isAffineMatrix = function (x) {\n      return Array.isArray(x) && x.length === 4 && x.every(row => Array.isArray(row) && row.length === 4 && row.every(element => typeof element === 'number' && !isNaN(element)));\n    };\n    isAffineMatrix.__closure = {};\n    isAffineMatrix.__workletHash = 3255481902002;\n    isAffineMatrix.__initData = _worklet_3255481902002_init_data;\n    return isAffineMatrix;\n  }();\n  var _worklet_9419609223755_init_data = {\n    code: \"function flatten_reactNativeReanimated_matrixUtilsTsx3(matrix){return matrix.flat();}\"\n  };\n  var flatten = exports.flatten = function () {\n    var flatten = function (matrix) {\n      return matrix.flat();\n    };\n    flatten.__closure = {};\n    flatten.__workletHash = 9419609223755;\n    flatten.__initData = _worklet_9419609223755_init_data;\n    return flatten;\n  }(); // ts-prune-ignore-next This function is exported to be tested\n  var _worklet_14156284422336_init_data = {\n    code: \"function unflatten_reactNativeReanimated_matrixUtilsTsx4(m){return[[m[0],m[1],m[2],m[3]],[m[4],m[5],m[6],m[7]],[m[8],m[9],m[10],m[11]],[m[12],m[13],m[14],m[15]]];}\"\n  };\n  var unflatten = exports.unflatten = function () {\n    var unflatten = function (m) {\n      return [[m[0], m[1], m[2], m[3]], [m[4], m[5], m[6], m[7]], [m[8], m[9], m[10], m[11]], [m[12], m[13], m[14], m[15]]];\n    };\n    unflatten.__closure = {};\n    unflatten.__workletHash = 14156284422336;\n    unflatten.__initData = _worklet_14156284422336_init_data;\n    return unflatten;\n  }();\n  var _worklet_31377339073_init_data = {\n    code: \"function maybeFlattenMatrix_reactNativeReanimated_matrixUtilsTsx5(matrix){const{isAffineMatrix,flatten}=this.__closure;return isAffineMatrix(matrix)?flatten(matrix):matrix;}\"\n  };\n  var maybeFlattenMatrix = function () {\n    var maybeFlattenMatrix = function (matrix) {\n      return isAffineMatrix(matrix) ? flatten(matrix) : matrix;\n    };\n    maybeFlattenMatrix.__closure = {\n      isAffineMatrix,\n      flatten\n    };\n    maybeFlattenMatrix.__workletHash = 31377339073;\n    maybeFlattenMatrix.__initData = _worklet_31377339073_init_data;\n    return maybeFlattenMatrix;\n  }();\n  var _worklet_15992296871009_init_data = {\n    code: \"function multiplyMatrices_reactNativeReanimated_matrixUtilsTsx6(a,b){return[[a[0][0]*b[0][0]+a[0][1]*b[1][0]+a[0][2]*b[2][0]+a[0][3]*b[3][0],a[0][0]*b[0][1]+a[0][1]*b[1][1]+a[0][2]*b[2][1]+a[0][3]*b[3][1],a[0][0]*b[0][2]+a[0][1]*b[1][2]+a[0][2]*b[2][2]+a[0][3]*b[3][2],a[0][0]*b[0][3]+a[0][1]*b[1][3]+a[0][2]*b[2][3]+a[0][3]*b[3][3]],[a[1][0]*b[0][0]+a[1][1]*b[1][0]+a[1][2]*b[2][0]+a[1][3]*b[3][0],a[1][0]*b[0][1]+a[1][1]*b[1][1]+a[1][2]*b[2][1]+a[1][3]*b[3][1],a[1][0]*b[0][2]+a[1][1]*b[1][2]+a[1][2]*b[2][2]+a[1][3]*b[3][2],a[1][0]*b[0][3]+a[1][1]*b[1][3]+a[1][2]*b[2][3]+a[1][3]*b[3][3]],[a[2][0]*b[0][0]+a[2][1]*b[1][0]+a[2][2]*b[2][0]+a[2][3]*b[3][0],a[2][0]*b[0][1]+a[2][1]*b[1][1]+a[2][2]*b[2][1]+a[2][3]*b[3][1],a[2][0]*b[0][2]+a[2][1]*b[1][2]+a[2][2]*b[2][2]+a[2][3]*b[3][2],a[2][0]*b[0][3]+a[2][1]*b[1][3]+a[2][2]*b[2][3]+a[2][3]*b[3][3]],[a[3][0]*b[0][0]+a[3][1]*b[1][0]+a[3][2]*b[2][0]+a[3][3]*b[3][0],a[3][0]*b[0][1]+a[3][1]*b[1][1]+a[3][2]*b[2][1]+a[3][3]*b[3][1],a[3][0]*b[0][2]+a[3][1]*b[1][2]+a[3][2]*b[2][2]+a[3][3]*b[3][2],a[3][0]*b[0][3]+a[3][1]*b[1][3]+a[3][2]*b[2][3]+a[3][3]*b[3][3]]];}\"\n  };\n  var multiplyMatrices = exports.multiplyMatrices = function () {\n    var multiplyMatrices = function (a, b) {\n      return [[a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0] + a[0][3] * b[3][0], a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1] + a[0][3] * b[3][1], a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2] + a[0][3] * b[3][2], a[0][0] * b[0][3] + a[0][1] * b[1][3] + a[0][2] * b[2][3] + a[0][3] * b[3][3]], [a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0] + a[1][3] * b[3][0], a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1] + a[1][3] * b[3][1], a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2] + a[1][3] * b[3][2], a[1][0] * b[0][3] + a[1][1] * b[1][3] + a[1][2] * b[2][3] + a[1][3] * b[3][3]], [a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0] + a[2][3] * b[3][0], a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1] + a[2][3] * b[3][1], a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2] + a[2][3] * b[3][2], a[2][0] * b[0][3] + a[2][1] * b[1][3] + a[2][2] * b[2][3] + a[2][3] * b[3][3]], [a[3][0] * b[0][0] + a[3][1] * b[1][0] + a[3][2] * b[2][0] + a[3][3] * b[3][0], a[3][0] * b[0][1] + a[3][1] * b[1][1] + a[3][2] * b[2][1] + a[3][3] * b[3][1], a[3][0] * b[0][2] + a[3][1] * b[1][2] + a[3][2] * b[2][2] + a[3][3] * b[3][2], a[3][0] * b[0][3] + a[3][1] * b[1][3] + a[3][2] * b[2][3] + a[3][3] * b[3][3]]];\n    };\n    multiplyMatrices.__closure = {};\n    multiplyMatrices.__workletHash = 15992296871009;\n    multiplyMatrices.__initData = _worklet_15992296871009_init_data;\n    return multiplyMatrices;\n  }();\n  var _worklet_6627182100671_init_data = {\n    code: \"function subtractMatrices_reactNativeReanimated_matrixUtilsTsx7(maybeFlatA,maybeFlatB){const{isAffineMatrixFlat,maybeFlattenMatrix,unflatten}=this.__closure;const isFlatOnStart=isAffineMatrixFlat(maybeFlatA);const a=maybeFlattenMatrix(maybeFlatA);const b=maybeFlattenMatrix(maybeFlatB);const c=a.map(function(_,i){return a[i]-b[i];});return isFlatOnStart?c:unflatten(c);}\"\n  };\n  var subtractMatrices = exports.subtractMatrices = function () {\n    var subtractMatrices = function (maybeFlatA, maybeFlatB) {\n      var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n      var a = maybeFlattenMatrix(maybeFlatA);\n      var b = maybeFlattenMatrix(maybeFlatB);\n      var c = a.map((_, i) => a[i] - b[i]);\n      return isFlatOnStart ? c : unflatten(c);\n    };\n    subtractMatrices.__closure = {\n      isAffineMatrixFlat,\n      maybeFlattenMatrix,\n      unflatten\n    };\n    subtractMatrices.__workletHash = 6627182100671;\n    subtractMatrices.__initData = _worklet_6627182100671_init_data;\n    return subtractMatrices;\n  }();\n  var _worklet_14155680970531_init_data = {\n    code: \"function addMatrices_reactNativeReanimated_matrixUtilsTsx8(maybeFlatA,maybeFlatB){const{isAffineMatrixFlat,maybeFlattenMatrix,unflatten}=this.__closure;const isFlatOnStart=isAffineMatrixFlat(maybeFlatA);const a=maybeFlattenMatrix(maybeFlatA);const b=maybeFlattenMatrix(maybeFlatB);const c=a.map(function(_,i){return a[i]+b[i];});return isFlatOnStart?c:unflatten(c);}\"\n  };\n  var addMatrices = exports.addMatrices = function () {\n    var addMatrices = function (maybeFlatA, maybeFlatB) {\n      var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n      var a = maybeFlattenMatrix(maybeFlatA);\n      var b = maybeFlattenMatrix(maybeFlatB);\n      var c = a.map((_, i) => a[i] + b[i]);\n      return isFlatOnStart ? c : unflatten(c);\n    };\n    addMatrices.__closure = {\n      isAffineMatrixFlat,\n      maybeFlattenMatrix,\n      unflatten\n    };\n    addMatrices.__workletHash = 14155680970531;\n    addMatrices.__initData = _worklet_14155680970531_init_data;\n    return addMatrices;\n  }();\n  var _worklet_2686901073094_init_data = {\n    code: \"function scaleMatrix_reactNativeReanimated_matrixUtilsTsx9(maybeFlatA,scalar){const{isAffineMatrixFlat,maybeFlattenMatrix,unflatten}=this.__closure;const isFlatOnStart=isAffineMatrixFlat(maybeFlatA);const a=maybeFlattenMatrix(maybeFlatA);const b=a.map(function(x){return x*scalar;});return isFlatOnStart?b:unflatten(b);}\"\n  };\n  var scaleMatrix = exports.scaleMatrix = function () {\n    var scaleMatrix = function (maybeFlatA, scalar) {\n      var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n      var a = maybeFlattenMatrix(maybeFlatA);\n      var b = a.map(x => x * scalar);\n      return isFlatOnStart ? b : unflatten(b);\n    };\n    scaleMatrix.__closure = {\n      isAffineMatrixFlat,\n      maybeFlattenMatrix,\n      unflatten\n    };\n    scaleMatrix.__workletHash = 2686901073094;\n    scaleMatrix.__initData = _worklet_2686901073094_init_data;\n    return scaleMatrix;\n  }();\n  var _worklet_5407153467837_init_data = {\n    code: \"function getRotationMatrix_reactNativeReanimated_matrixUtilsTsx10(angle,axis='z'){const cos=Math.cos(angle);const sin=Math.sin(angle);switch(axis){case'z':return[[cos,sin,0,0],[-sin,cos,0,0],[0,0,1,0],[0,0,0,1]];case'y':return[[cos,0,-sin,0],[0,1,0,0],[sin,0,cos,0],[0,0,0,1]];case'x':return[[1,0,0,0],[0,cos,sin,0],[0,-sin,cos,0],[0,0,0,1]];}}\"\n  };\n  var getRotationMatrix = exports.getRotationMatrix = function () {\n    var getRotationMatrix = function (angle) {\n      var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'z';\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      switch (axis) {\n        case 'z':\n          return [[cos, sin, 0, 0], [-sin, cos, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n        case 'y':\n          return [[cos, 0, -sin, 0], [0, 1, 0, 0], [sin, 0, cos, 0], [0, 0, 0, 1]];\n        case 'x':\n          return [[1, 0, 0, 0], [0, cos, sin, 0], [0, -sin, cos, 0], [0, 0, 0, 1]];\n      }\n    };\n    getRotationMatrix.__closure = {};\n    getRotationMatrix.__workletHash = 5407153467837;\n    getRotationMatrix.__initData = _worklet_5407153467837_init_data;\n    return getRotationMatrix;\n  }();\n  var _worklet_1030244477291_init_data = {\n    code: \"function norm3d_reactNativeReanimated_matrixUtilsTsx11(x,y,z){return Math.sqrt(x*x+y*y+z*z);}\"\n  };\n  var norm3d = function () {\n    var norm3d = function (x, y, z) {\n      return Math.sqrt(x * x + y * y + z * z);\n    };\n    norm3d.__closure = {};\n    norm3d.__workletHash = 1030244477291;\n    norm3d.__initData = _worklet_1030244477291_init_data;\n    return norm3d;\n  }();\n  var _worklet_7878923469978_init_data = {\n    code: \"function transposeMatrix_reactNativeReanimated_matrixUtilsTsx12(matrix){const{flatten}=this.__closure;const m=flatten(matrix);return[[m[0],m[4],m[8],m[12]],[m[1],m[5],m[9],m[13]],[m[2],m[6],m[10],m[14]],[m[3],m[7],m[11],m[15]]];}\"\n  };\n  var transposeMatrix = function () {\n    var transposeMatrix = function (matrix) {\n      var m = flatten(matrix);\n      return [[m[0], m[4], m[8], m[12]], [m[1], m[5], m[9], m[13]], [m[2], m[6], m[10], m[14]], [m[3], m[7], m[11], m[15]]];\n    };\n    transposeMatrix.__closure = {\n      flatten\n    };\n    transposeMatrix.__workletHash = 7878923469978;\n    transposeMatrix.__initData = _worklet_7878923469978_init_data;\n    return transposeMatrix;\n  }();\n  var _worklet_3891131781244_init_data = {\n    code: \"function assertVectorsHaveEqualLengths_reactNativeReanimated_matrixUtilsTsx13(a,b){const{__DEV__}=this.__closure;if(__DEV__&&a.length!==b.length){throw new ReanimatedError(\\\"Cannot calculate inner product of two vectors of different lengths. Length of \\\"+a.toString()+\\\" is \\\"+a.length+\\\" and length of \\\"+b.toString()+\\\" is \\\"+b.length+\\\".\\\");}}\"\n  };\n  var assertVectorsHaveEqualLengths = function () {\n    var assertVectorsHaveEqualLengths = function (a, b) {};\n    assertVectorsHaveEqualLengths.__closure = {\n      __DEV__: false\n    };\n    assertVectorsHaveEqualLengths.__workletHash = 3891131781244;\n    assertVectorsHaveEqualLengths.__initData = _worklet_3891131781244_init_data;\n    return assertVectorsHaveEqualLengths;\n  }();\n  var _worklet_2500695369804_init_data = {\n    code: \"function innerProduct_reactNativeReanimated_matrixUtilsTsx14(a,b){const{assertVectorsHaveEqualLengths}=this.__closure;assertVectorsHaveEqualLengths(a,b);return a.reduce(function(acc,_,i){return acc+a[i]*b[i];},0);}\"\n  };\n  var innerProduct = function () {\n    var innerProduct = function (a, b) {\n      assertVectorsHaveEqualLengths(a, b);\n      return a.reduce((acc, _, i) => acc + a[i] * b[i], 0);\n    };\n    innerProduct.__closure = {\n      assertVectorsHaveEqualLengths\n    };\n    innerProduct.__workletHash = 2500695369804;\n    innerProduct.__initData = _worklet_2500695369804_init_data;\n    return innerProduct;\n  }();\n  var _worklet_16002079233038_init_data = {\n    code: \"function projection_reactNativeReanimated_matrixUtilsTsx15(u,a){const{assertVectorsHaveEqualLengths,innerProduct}=this.__closure;assertVectorsHaveEqualLengths(u,a);const s=innerProduct(u,a)/innerProduct(u,u);return u.map(function(e){return e*s;});}\"\n  };\n  var projection = function () {\n    var projection = function (u, a) {\n      assertVectorsHaveEqualLengths(u, a);\n      var s = innerProduct(u, a) / innerProduct(u, u);\n      return u.map(e => e * s);\n    };\n    projection.__closure = {\n      assertVectorsHaveEqualLengths,\n      innerProduct\n    };\n    projection.__workletHash = 16002079233038;\n    projection.__initData = _worklet_16002079233038_init_data;\n    return projection;\n  }();\n  var _worklet_5264626187493_init_data = {\n    code: \"function subtractVectors_reactNativeReanimated_matrixUtilsTsx16(a,b){const{assertVectorsHaveEqualLengths}=this.__closure;assertVectorsHaveEqualLengths(a,b);return a.map(function(_,i){return a[i]-b[i];});}\"\n  };\n  var subtractVectors = function () {\n    var subtractVectors = function (a, b) {\n      assertVectorsHaveEqualLengths(a, b);\n      return a.map((_, i) => a[i] - b[i]);\n    };\n    subtractVectors.__closure = {\n      assertVectorsHaveEqualLengths\n    };\n    subtractVectors.__workletHash = 5264626187493;\n    subtractVectors.__initData = _worklet_5264626187493_init_data;\n    return subtractVectors;\n  }();\n  var _worklet_2059959224558_init_data = {\n    code: \"function scaleVector_reactNativeReanimated_matrixUtilsTsx17(u,a){return u.map(function(e){return e*a;});}\"\n  };\n  var scaleVector = function () {\n    var scaleVector = function (u, a) {\n      return u.map(e => e * a);\n    };\n    scaleVector.__closure = {};\n    scaleVector.__workletHash = 2059959224558;\n    scaleVector.__initData = _worklet_2059959224558_init_data;\n    return scaleVector;\n  }();\n  var _worklet_827372645680_init_data = {\n    code: \"function gramSchmidtAlgorithm_reactNativeReanimated_matrixUtilsTsx18(matrix){const{subtractVectors,projection,scaleVector,innerProduct,transposeMatrix}=this.__closure;const[a0,a1,a2,a3]=matrix;const u0=a0;const u1=subtractVectors(a1,projection(u0,a1));const u2=subtractVectors(subtractVectors(a2,projection(u0,a2)),projection(u1,a2));const u3=subtractVectors(subtractVectors(subtractVectors(a3,projection(u0,a3)),projection(u1,a3)),projection(u2,a3));const[e0,e1,e2,e3]=[u0,u1,u2,u3].map(function(u){return scaleVector(u,1/Math.sqrt(innerProduct(u,u)));});const rotationMatrix=[[e0[0],e1[0],e2[0],e3[0]],[e0[1],e1[1],e2[1],e3[1]],[e0[2],e1[2],e2[2],e3[2]],[e0[3],e1[3],e2[3],e3[3]]];const skewMatrix=[[innerProduct(e0,a0),innerProduct(e0,a1),innerProduct(e0,a2),innerProduct(e0,a3)],[0,innerProduct(e1,a1),innerProduct(e1,a2),innerProduct(e1,a3)],[0,0,innerProduct(e2,a2),innerProduct(e2,a3)],[0,0,0,innerProduct(e3,a3)]];return{rotationMatrix:transposeMatrix(rotationMatrix),skewMatrix:transposeMatrix(skewMatrix)};}\"\n  };\n  var gramSchmidtAlgorithm = function () {\n    var gramSchmidtAlgorithm = function (matrix) {\n      var _matrix = (0, _slicedToArray2.default)(matrix, 4),\n        a0 = _matrix[0],\n        a1 = _matrix[1],\n        a2 = _matrix[2],\n        a3 = _matrix[3];\n      var u0 = a0;\n      var u1 = subtractVectors(a1, projection(u0, a1));\n      var u2 = subtractVectors(subtractVectors(a2, projection(u0, a2)), projection(u1, a2));\n      var u3 = subtractVectors(subtractVectors(subtractVectors(a3, projection(u0, a3)), projection(u1, a3)), projection(u2, a3));\n      var _map = [u0, u1, u2, u3].map(u => scaleVector(u, 1 / Math.sqrt(innerProduct(u, u)))),\n        _map2 = (0, _slicedToArray2.default)(_map, 4),\n        e0 = _map2[0],\n        e1 = _map2[1],\n        e2 = _map2[2],\n        e3 = _map2[3];\n      var rotationMatrix = [[e0[0], e1[0], e2[0], e3[0]], [e0[1], e1[1], e2[1], e3[1]], [e0[2], e1[2], e2[2], e3[2]], [e0[3], e1[3], e2[3], e3[3]]];\n      var skewMatrix = [[innerProduct(e0, a0), innerProduct(e0, a1), innerProduct(e0, a2), innerProduct(e0, a3)], [0, innerProduct(e1, a1), innerProduct(e1, a2), innerProduct(e1, a3)], [0, 0, innerProduct(e2, a2), innerProduct(e2, a3)], [0, 0, 0, innerProduct(e3, a3)]];\n      return {\n        rotationMatrix: transposeMatrix(rotationMatrix),\n        skewMatrix: transposeMatrix(skewMatrix)\n      };\n    };\n    gramSchmidtAlgorithm.__closure = {\n      subtractVectors,\n      projection,\n      scaleVector,\n      innerProduct,\n      transposeMatrix\n    };\n    gramSchmidtAlgorithm.__workletHash = 827372645680;\n    gramSchmidtAlgorithm.__initData = _worklet_827372645680_init_data;\n    return gramSchmidtAlgorithm;\n  }(); // ts-prune-ignore-next This function is exported to be tested\n  var _worklet_2076609522926_init_data = {\n    code: \"function decomposeMatrix_reactNativeReanimated_matrixUtilsTsx19(unknownTypeMatrix){const{maybeFlattenMatrix,norm3d,gramSchmidtAlgorithm}=this.__closure;const matrix=maybeFlattenMatrix(unknownTypeMatrix);if(matrix[15]===0){throw new ReanimatedError('Invalid transform matrix.');}matrix.forEach(function(_,i){return matrix[i]/=matrix[15];});const translationMatrix=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[matrix[12],matrix[13],matrix[14],1]];const sx=matrix[15]*norm3d(matrix[0],matrix[4],matrix[8]);const sy=matrix[15]*norm3d(matrix[1],matrix[5],matrix[9]);const sz=matrix[15]*norm3d(matrix[2],matrix[6],matrix[10]);const scaleMatrix=[[sx,0,0,0],[0,sy,0,0],[0,0,sz,0],[0,0,0,1]];const rotationAndSkewMatrix=[[matrix[0]/sx,matrix[1]/sx,matrix[2]/sx,0],[matrix[4]/sy,matrix[5]/sy,matrix[6]/sy,0],[matrix[8]/sz,matrix[9]/sz,matrix[10]/sz,0],[0,0,0,1]];const{rotationMatrix:rotationMatrix,skewMatrix:skewMatrix}=gramSchmidtAlgorithm(rotationAndSkewMatrix);return{translationMatrix:translationMatrix,scaleMatrix:scaleMatrix,rotationMatrix:rotationMatrix,skewMatrix:skewMatrix};}\"\n  };\n  var decomposeMatrix = exports.decomposeMatrix = function () {\n    var decomposeMatrix = function (unknownTypeMatrix) {\n      var matrix = maybeFlattenMatrix(unknownTypeMatrix);\n\n      // normalize matrix\n      if (matrix[15] === 0) {\n        throw new _errors.ReanimatedError('Invalid transform matrix.');\n      }\n      matrix.forEach((_, i) => matrix[i] /= matrix[15]);\n      var translationMatrix = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [matrix[12], matrix[13], matrix[14], 1]];\n      var sx = matrix[15] * norm3d(matrix[0], matrix[4], matrix[8]);\n      var sy = matrix[15] * norm3d(matrix[1], matrix[5], matrix[9]);\n      var sz = matrix[15] * norm3d(matrix[2], matrix[6], matrix[10]);\n\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      var scaleMatrix = [[sx, 0, 0, 0], [0, sy, 0, 0], [0, 0, sz, 0], [0, 0, 0, 1]];\n      var rotationAndSkewMatrix = [[matrix[0] / sx, matrix[1] / sx, matrix[2] / sx, 0], [matrix[4] / sy, matrix[5] / sy, matrix[6] / sy, 0], [matrix[8] / sz, matrix[9] / sz, matrix[10] / sz, 0], [0, 0, 0, 1]];\n      var _gramSchmidtAlgorithm = gramSchmidtAlgorithm(rotationAndSkewMatrix),\n        rotationMatrix = _gramSchmidtAlgorithm.rotationMatrix,\n        skewMatrix = _gramSchmidtAlgorithm.skewMatrix;\n      return {\n        translationMatrix,\n        scaleMatrix,\n        rotationMatrix,\n        skewMatrix\n      };\n    };\n    decomposeMatrix.__closure = {\n      maybeFlattenMatrix,\n      norm3d,\n      gramSchmidtAlgorithm\n    };\n    decomposeMatrix.__workletHash = 2076609522926;\n    decomposeMatrix.__initData = _worklet_2076609522926_init_data;\n    return decomposeMatrix;\n  }();\n  var _worklet_14654446791686_init_data = {\n    code: \"function decomposeMatrixIntoMatricesAndAngles_reactNativeReanimated_matrixUtilsTsx20(matrix){const{decomposeMatrix}=this.__closure;const{scaleMatrix:scaleMatrix,rotationMatrix:rotationMatrix,translationMatrix:translationMatrix,skewMatrix:skewMatrix}=decomposeMatrix(matrix);const sinRy=-rotationMatrix[0][2];const ry=Math.asin(sinRy);let rx;let rz;if(sinRy===1||sinRy===-1){rz=0;rx=Math.atan2(sinRy*rotationMatrix[0][1],sinRy*rotationMatrix[0][2]);}else{rz=Math.atan2(rotationMatrix[0][1],rotationMatrix[0][0]);rx=Math.atan2(rotationMatrix[1][2],rotationMatrix[2][2]);}return{scaleMatrix:scaleMatrix,rotationMatrix:rotationMatrix,translationMatrix:translationMatrix,skewMatrix:skewMatrix,rx:rx||0,ry:ry||0,rz:rz||0};}\"\n  };\n  var decomposeMatrixIntoMatricesAndAngles = exports.decomposeMatrixIntoMatricesAndAngles = function () {\n    var decomposeMatrixIntoMatricesAndAngles = function (matrix) {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      var _decomposeMatrix = decomposeMatrix(matrix),\n        scaleMatrix = _decomposeMatrix.scaleMatrix,\n        rotationMatrix = _decomposeMatrix.rotationMatrix,\n        translationMatrix = _decomposeMatrix.translationMatrix,\n        skewMatrix = _decomposeMatrix.skewMatrix;\n      var sinRy = -rotationMatrix[0][2];\n      var ry = Math.asin(sinRy);\n      var rx;\n      var rz;\n      if (sinRy === 1 || sinRy === -1) {\n        rz = 0;\n        rx = Math.atan2(sinRy * rotationMatrix[0][1], sinRy * rotationMatrix[0][2]);\n      } else {\n        rz = Math.atan2(rotationMatrix[0][1], rotationMatrix[0][0]);\n        rx = Math.atan2(rotationMatrix[1][2], rotationMatrix[2][2]);\n      }\n      return {\n        scaleMatrix,\n        rotationMatrix,\n        translationMatrix,\n        skewMatrix,\n        rx: rx || 0,\n        ry: ry || 0,\n        rz: rz || 0\n      };\n    };\n    decomposeMatrixIntoMatricesAndAngles.__closure = {\n      decomposeMatrix\n    };\n    decomposeMatrixIntoMatricesAndAngles.__workletHash = 14654446791686;\n    decomposeMatrixIntoMatricesAndAngles.__initData = _worklet_14654446791686_init_data;\n    return decomposeMatrixIntoMatricesAndAngles;\n  }();\n});","lineCount":381,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"unflatten"],[8,19,1,13],[8,22,1,13,"exports"],[8,29,1,13],[8,30,1,13,"subtractMatrices"],[8,46,1,13],[8,49,1,13,"exports"],[8,56,1,13],[8,57,1,13,"scaleMatrix"],[8,68,1,13],[8,71,1,13,"exports"],[8,78,1,13],[8,79,1,13,"multiplyMatrices"],[8,95,1,13],[8,98,1,13,"exports"],[8,105,1,13],[8,106,1,13,"isAffineMatrixFlat"],[8,124,1,13],[8,127,1,13,"exports"],[8,134,1,13],[8,135,1,13,"isAffineMatrix"],[8,149,1,13],[8,152,1,13,"exports"],[8,159,1,13],[8,160,1,13,"getRotationMatrix"],[8,177,1,13],[8,180,1,13,"exports"],[8,187,1,13],[8,188,1,13,"flatten"],[8,195,1,13],[8,198,1,13,"exports"],[8,205,1,13],[8,206,1,13,"decomposeMatrixIntoMatricesAndAngles"],[8,242,1,13],[8,245,1,13,"exports"],[8,252,1,13],[8,253,1,13,"decomposeMatrix"],[8,268,1,13],[8,271,1,13,"exports"],[8,278,1,13],[8,279,1,13,"addMatrices"],[8,290,1,13],[8,293,1,13,"undefined"],[8,302,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,3,0],[10,6,3,0,"_errors"],[10,13,3,0],[10,16,3,0,"require"],[10,23,3,0],[10,24,3,0,"_dependencyMap"],[10,38,3,0],[11,2,3,47],[11,6,3,47,"_worklet_15554583600949_init_data"],[11,39,3,47],[12,4,3,47,"code"],[12,8,3,47],[13,2,3,47],[14,2,3,47],[14,6,3,47,"isAffineMatrixFlat"],[14,24,3,47],[14,27,3,47,"exports"],[14,34,3,47],[14,35,3,47,"isAffineMatrixFlat"],[14,53,3,47],[14,56,32,7],[15,4,32,7],[15,8,32,7,"isAffineMatrixFlat"],[15,26,32,7],[15,38,32,7,"isAffineMatrixFlat"],[15,39,32,35,"x"],[15,40,32,45],[15,42,32,70],[16,6,34,2],[16,13,35,4,"Array"],[16,18,35,9],[16,19,35,10,"isArray"],[16,26,35,17],[16,27,35,18,"x"],[16,28,35,19],[16,29,35,20],[16,33,36,4,"x"],[16,34,36,5],[16,35,36,6,"length"],[16,41,36,12],[16,46,36,17],[16,48,36,19],[16,52,37,4,"x"],[16,53,37,5],[16,54,37,6,"every"],[16,59,37,11],[16,60,37,13,"element"],[16,67,37,20],[16,71,37,25],[16,78,37,32,"element"],[16,85,37,39],[16,90,37,44],[16,98,37,52],[16,102,37,56],[16,103,37,57,"isNaN"],[16,108,37,62],[16,109,37,63,"element"],[16,116,37,70],[16,117,37,71],[16,118,37,72],[17,4,39,0],[17,5,39,1],[18,4,39,1,"isAffineMatrixFlat"],[18,22,39,1],[18,23,39,1,"__closure"],[18,32,39,1],[19,4,39,1,"isAffineMatrixFlat"],[19,22,39,1],[19,23,39,1,"__workletHash"],[19,36,39,1],[20,4,39,1,"isAffineMatrixFlat"],[20,22,39,1],[20,23,39,1,"__initData"],[20,33,39,1],[20,36,39,1,"_worklet_15554583600949_init_data"],[20,69,39,1],[21,4,39,1],[21,11,39,1,"isAffineMatrixFlat"],[21,29,39,1],[22,2,39,1],[22,3,32,7],[22,7,41,0],[23,2,41,0],[23,6,41,0,"_worklet_3255481902002_init_data"],[23,38,41,0],[24,4,41,0,"code"],[24,8,41,0],[25,2,41,0],[26,2,41,0],[26,6,41,0,"isAffineMatrix"],[26,20,41,0],[26,23,41,0,"exports"],[26,30,41,0],[26,31,41,0,"isAffineMatrix"],[26,45,41,0],[26,48,42,7],[27,4,42,7],[27,8,42,7,"isAffineMatrix"],[27,22,42,7],[27,34,42,7,"isAffineMatrix"],[27,35,42,31,"x"],[27,36,42,41],[27,38,42,62],[28,6,44,2],[28,13,45,4,"Array"],[28,18,45,9],[28,19,45,10,"isArray"],[28,26,45,17],[28,27,45,18,"x"],[28,28,45,19],[28,29,45,20],[28,33,46,4,"x"],[28,34,46,5],[28,35,46,6,"length"],[28,41,46,12],[28,46,46,17],[28,47,46,18],[28,51,47,4,"x"],[28,52,47,5],[28,53,47,6,"every"],[28,58,47,11],[28,59,48,7,"row"],[28,62,48,10],[28,66,49,8,"Array"],[28,71,49,13],[28,72,49,14,"isArray"],[28,79,49,21],[28,80,49,22,"row"],[28,83,49,25],[28,84,49,26],[28,88,50,8,"row"],[28,91,50,11],[28,92,50,12,"length"],[28,98,50,18],[28,103,50,23],[28,104,50,24],[28,108,51,8,"row"],[28,111,51,11],[28,112,51,12,"every"],[28,117,51,17],[28,118,51,19,"element"],[28,125,51,26],[28,129,51,31],[28,136,51,38,"element"],[28,143,51,45],[28,148,51,50],[28,156,51,58],[28,160,51,62],[28,161,51,63,"isNaN"],[28,166,51,68],[28,167,51,69,"element"],[28,174,51,76],[28,175,51,77],[28,176,52,4],[28,177,52,5],[29,4,54,0],[29,5,54,1],[30,4,54,1,"isAffineMatrix"],[30,18,54,1],[30,19,54,1,"__closure"],[30,28,54,1],[31,4,54,1,"isAffineMatrix"],[31,18,54,1],[31,19,54,1,"__workletHash"],[31,32,54,1],[32,4,54,1,"isAffineMatrix"],[32,18,54,1],[32,19,54,1,"__initData"],[32,29,54,1],[32,32,54,1,"_worklet_3255481902002_init_data"],[32,64,54,1],[33,4,54,1],[33,11,54,1,"isAffineMatrix"],[33,25,54,1],[34,2,54,1],[34,3,42,7],[35,2,42,7],[35,6,42,7,"_worklet_9419609223755_init_data"],[35,38,42,7],[36,4,42,7,"code"],[36,8,42,7],[37,2,42,7],[38,2,42,7],[38,6,42,7,"flatten"],[38,13,42,7],[38,16,42,7,"exports"],[38,23,42,7],[38,24,42,7,"flatten"],[38,31,42,7],[38,34,56,7],[39,4,56,7],[39,8,56,7,"flatten"],[39,15,56,7],[39,27,56,7,"flatten"],[39,28,56,24,"matrix"],[39,34,56,44],[39,36,56,64],[40,6,58,2],[40,13,58,9,"matrix"],[40,19,58,15],[40,20,58,16,"flat"],[40,24,58,20],[40,25,58,21],[40,26,58,22],[41,4,59,0],[41,5,59,1],[42,4,59,1,"flatten"],[42,11,59,1],[42,12,59,1,"__closure"],[42,21,59,1],[43,4,59,1,"flatten"],[43,11,59,1],[43,12,59,1,"__workletHash"],[43,25,59,1],[44,4,59,1,"flatten"],[44,11,59,1],[44,12,59,1,"__initData"],[44,22,59,1],[44,25,59,1,"_worklet_9419609223755_init_data"],[44,57,59,1],[45,4,59,1],[45,11,59,1,"flatten"],[45,18,59,1],[46,2,59,1],[46,3,56,7],[46,7,61,0],[47,2,61,0],[47,6,61,0,"_worklet_14156284422336_init_data"],[47,39,61,0],[48,4,61,0,"code"],[48,8,61,0],[49,2,61,0],[50,2,61,0],[50,6,61,0,"unflatten"],[50,15,61,0],[50,18,61,0,"exports"],[50,25,61,0],[50,26,61,0,"unflatten"],[50,35,61,0],[50,38,62,7],[51,4,62,7],[51,8,62,7,"unflatten"],[51,17,62,7],[51,29,62,7,"unflatten"],[51,30,62,26,"m"],[51,31,62,45],[51,33,62,61],[52,6,64,2],[52,13,64,9],[52,14,65,4],[52,15,65,5,"m"],[52,16,65,6],[52,17,65,7],[52,18,65,8],[52,19,65,9],[52,21,65,11,"m"],[52,22,65,12],[52,23,65,13],[52,24,65,14],[52,25,65,15],[52,27,65,17,"m"],[52,28,65,18],[52,29,65,19],[52,30,65,20],[52,31,65,21],[52,33,65,23,"m"],[52,34,65,24],[52,35,65,25],[52,36,65,26],[52,37,65,27],[52,38,65,28],[52,40,66,4],[52,41,66,5,"m"],[52,42,66,6],[52,43,66,7],[52,44,66,8],[52,45,66,9],[52,47,66,11,"m"],[52,48,66,12],[52,49,66,13],[52,50,66,14],[52,51,66,15],[52,53,66,17,"m"],[52,54,66,18],[52,55,66,19],[52,56,66,20],[52,57,66,21],[52,59,66,23,"m"],[52,60,66,24],[52,61,66,25],[52,62,66,26],[52,63,66,27],[52,64,66,28],[52,66,67,4],[52,67,67,5,"m"],[52,68,67,6],[52,69,67,7],[52,70,67,8],[52,71,67,9],[52,73,67,11,"m"],[52,74,67,12],[52,75,67,13],[52,76,67,14],[52,77,67,15],[52,79,67,17,"m"],[52,80,67,18],[52,81,67,19],[52,83,67,21],[52,84,67,22],[52,86,67,24,"m"],[52,87,67,25],[52,88,67,26],[52,90,67,28],[52,91,67,29],[52,92,67,30],[52,94,68,4],[52,95,68,5,"m"],[52,96,68,6],[52,97,68,7],[52,99,68,9],[52,100,68,10],[52,102,68,12,"m"],[52,103,68,13],[52,104,68,14],[52,106,68,16],[52,107,68,17],[52,109,68,19,"m"],[52,110,68,20],[52,111,68,21],[52,113,68,23],[52,114,68,24],[52,116,68,26,"m"],[52,117,68,27],[52,118,68,28],[52,120,68,30],[52,121,68,31],[52,122,68,32],[52,123,69,3],[53,4,70,0],[53,5,70,1],[54,4,70,1,"unflatten"],[54,13,70,1],[54,14,70,1,"__closure"],[54,23,70,1],[55,4,70,1,"unflatten"],[55,13,70,1],[55,14,70,1,"__workletHash"],[55,27,70,1],[56,4,70,1,"unflatten"],[56,13,70,1],[56,14,70,1,"__initData"],[56,24,70,1],[56,27,70,1,"_worklet_14156284422336_init_data"],[56,60,70,1],[57,4,70,1],[57,11,70,1,"unflatten"],[57,20,70,1],[58,2,70,1],[58,3,62,7],[59,2,62,7],[59,6,62,7,"_worklet_31377339073_init_data"],[59,36,62,7],[60,4,62,7,"code"],[60,8,62,7],[61,2,62,7],[62,2,62,7],[62,6,62,7,"maybeFlattenMatrix"],[62,24,62,7],[62,27,72,0],[63,4,72,0],[63,8,72,0,"maybeFlattenMatrix"],[63,26,72,0],[63,38,72,0,"maybeFlattenMatrix"],[63,39,73,2,"matrix"],[63,45,73,41],[63,47,74,20],[64,6,76,2],[64,13,76,9,"isAffineMatrix"],[64,27,76,23],[64,28,76,24,"matrix"],[64,34,76,30],[64,35,76,31],[64,38,76,34,"flatten"],[64,45,76,41],[64,46,76,42,"matrix"],[64,52,76,48],[64,53,76,49],[64,56,76,52,"matrix"],[64,62,76,58],[65,4,77,0],[65,5,77,1],[66,4,77,1,"maybeFlattenMatrix"],[66,22,77,1],[66,23,77,1,"__closure"],[66,32,77,1],[67,6,77,1,"isAffineMatrix"],[67,20,77,1],[68,6,77,1,"flatten"],[69,4,77,1],[70,4,77,1,"maybeFlattenMatrix"],[70,22,77,1],[70,23,77,1,"__workletHash"],[70,36,77,1],[71,4,77,1,"maybeFlattenMatrix"],[71,22,77,1],[71,23,77,1,"__initData"],[71,33,77,1],[71,36,77,1,"_worklet_31377339073_init_data"],[71,66,77,1],[72,4,77,1],[72,11,77,1,"maybeFlattenMatrix"],[72,29,77,1],[73,2,77,1],[73,3,72,0],[74,2,72,0],[74,6,72,0,"_worklet_15992296871009_init_data"],[74,39,72,0],[75,4,72,0,"code"],[75,8,72,0],[76,2,72,0],[77,2,72,0],[77,6,72,0,"multiplyMatrices"],[77,22,72,0],[77,25,72,0,"exports"],[77,32,72,0],[77,33,72,0,"multiplyMatrices"],[77,49,72,0],[77,52,79,7],[78,4,79,7],[78,8,79,7,"multiplyMatrices"],[78,24,79,7],[78,36,79,7,"multiplyMatrices"],[78,37,80,2,"a"],[78,38,80,17],[78,40,81,2,"b"],[78,41,81,17],[78,43,82,16],[79,6,84,2],[79,13,84,9],[79,14,85,4],[79,15,86,6,"a"],[79,16,86,7],[79,17,86,8],[79,18,86,9],[79,19,86,10],[79,20,86,11],[79,21,86,12],[79,22,86,13],[79,25,86,16,"b"],[79,26,86,17],[79,27,86,18],[79,28,86,19],[79,29,86,20],[79,30,86,21],[79,31,86,22],[79,32,86,23],[79,35,87,8,"a"],[79,36,87,9],[79,37,87,10],[79,38,87,11],[79,39,87,12],[79,40,87,13],[79,41,87,14],[79,42,87,15],[79,45,87,18,"b"],[79,46,87,19],[79,47,87,20],[79,48,87,21],[79,49,87,22],[79,50,87,23],[79,51,87,24],[79,52,87,25],[79,55,88,8,"a"],[79,56,88,9],[79,57,88,10],[79,58,88,11],[79,59,88,12],[79,60,88,13],[79,61,88,14],[79,62,88,15],[79,65,88,18,"b"],[79,66,88,19],[79,67,88,20],[79,68,88,21],[79,69,88,22],[79,70,88,23],[79,71,88,24],[79,72,88,25],[79,75,89,8,"a"],[79,76,89,9],[79,77,89,10],[79,78,89,11],[79,79,89,12],[79,80,89,13],[79,81,89,14],[79,82,89,15],[79,85,89,18,"b"],[79,86,89,19],[79,87,89,20],[79,88,89,21],[79,89,89,22],[79,90,89,23],[79,91,89,24],[79,92,89,25],[79,94,91,6,"a"],[79,95,91,7],[79,96,91,8],[79,97,91,9],[79,98,91,10],[79,99,91,11],[79,100,91,12],[79,101,91,13],[79,104,91,16,"b"],[79,105,91,17],[79,106,91,18],[79,107,91,19],[79,108,91,20],[79,109,91,21],[79,110,91,22],[79,111,91,23],[79,114,92,8,"a"],[79,115,92,9],[79,116,92,10],[79,117,92,11],[79,118,92,12],[79,119,92,13],[79,120,92,14],[79,121,92,15],[79,124,92,18,"b"],[79,125,92,19],[79,126,92,20],[79,127,92,21],[79,128,92,22],[79,129,92,23],[79,130,92,24],[79,131,92,25],[79,134,93,8,"a"],[79,135,93,9],[79,136,93,10],[79,137,93,11],[79,138,93,12],[79,139,93,13],[79,140,93,14],[79,141,93,15],[79,144,93,18,"b"],[79,145,93,19],[79,146,93,20],[79,147,93,21],[79,148,93,22],[79,149,93,23],[79,150,93,24],[79,151,93,25],[79,154,94,8,"a"],[79,155,94,9],[79,156,94,10],[79,157,94,11],[79,158,94,12],[79,159,94,13],[79,160,94,14],[79,161,94,15],[79,164,94,18,"b"],[79,165,94,19],[79,166,94,20],[79,167,94,21],[79,168,94,22],[79,169,94,23],[79,170,94,24],[79,171,94,25],[79,173,96,6,"a"],[79,174,96,7],[79,175,96,8],[79,176,96,9],[79,177,96,10],[79,178,96,11],[79,179,96,12],[79,180,96,13],[79,183,96,16,"b"],[79,184,96,17],[79,185,96,18],[79,186,96,19],[79,187,96,20],[79,188,96,21],[79,189,96,22],[79,190,96,23],[79,193,97,8,"a"],[79,194,97,9],[79,195,97,10],[79,196,97,11],[79,197,97,12],[79,198,97,13],[79,199,97,14],[79,200,97,15],[79,203,97,18,"b"],[79,204,97,19],[79,205,97,20],[79,206,97,21],[79,207,97,22],[79,208,97,23],[79,209,97,24],[79,210,97,25],[79,213,98,8,"a"],[79,214,98,9],[79,215,98,10],[79,216,98,11],[79,217,98,12],[79,218,98,13],[79,219,98,14],[79,220,98,15],[79,223,98,18,"b"],[79,224,98,19],[79,225,98,20],[79,226,98,21],[79,227,98,22],[79,228,98,23],[79,229,98,24],[79,230,98,25],[79,233,99,8,"a"],[79,234,99,9],[79,235,99,10],[79,236,99,11],[79,237,99,12],[79,238,99,13],[79,239,99,14],[79,240,99,15],[79,243,99,18,"b"],[79,244,99,19],[79,245,99,20],[79,246,99,21],[79,247,99,22],[79,248,99,23],[79,249,99,24],[79,250,99,25],[79,252,101,6,"a"],[79,253,101,7],[79,254,101,8],[79,255,101,9],[79,256,101,10],[79,257,101,11],[79,258,101,12],[79,259,101,13],[79,262,101,16,"b"],[79,263,101,17],[79,264,101,18],[79,265,101,19],[79,266,101,20],[79,267,101,21],[79,268,101,22],[79,269,101,23],[79,272,102,8,"a"],[79,273,102,9],[79,274,102,10],[79,275,102,11],[79,276,102,12],[79,277,102,13],[79,278,102,14],[79,279,102,15],[79,282,102,18,"b"],[79,283,102,19],[79,284,102,20],[79,285,102,21],[79,286,102,22],[79,287,102,23],[79,288,102,24],[79,289,102,25],[79,292,103,8,"a"],[79,293,103,9],[79,294,103,10],[79,295,103,11],[79,296,103,12],[79,297,103,13],[79,298,103,14],[79,299,103,15],[79,302,103,18,"b"],[79,303,103,19],[79,304,103,20],[79,305,103,21],[79,306,103,22],[79,307,103,23],[79,308,103,24],[79,309,103,25],[79,312,104,8,"a"],[79,313,104,9],[79,314,104,10],[79,315,104,11],[79,316,104,12],[79,317,104,13],[79,318,104,14],[79,319,104,15],[79,322,104,18,"b"],[79,323,104,19],[79,324,104,20],[79,325,104,21],[79,326,104,22],[79,327,104,23],[79,328,104,24],[79,329,104,25],[79,330,105,5],[79,332,106,4],[79,333,107,6,"a"],[79,334,107,7],[79,335,107,8],[79,336,107,9],[79,337,107,10],[79,338,107,11],[79,339,107,12],[79,340,107,13],[79,343,107,16,"b"],[79,344,107,17],[79,345,107,18],[79,346,107,19],[79,347,107,20],[79,348,107,21],[79,349,107,22],[79,350,107,23],[79,353,108,8,"a"],[79,354,108,9],[79,355,108,10],[79,356,108,11],[79,357,108,12],[79,358,108,13],[79,359,108,14],[79,360,108,15],[79,363,108,18,"b"],[79,364,108,19],[79,365,108,20],[79,366,108,21],[79,367,108,22],[79,368,108,23],[79,369,108,24],[79,370,108,25],[79,373,109,8,"a"],[79,374,109,9],[79,375,109,10],[79,376,109,11],[79,377,109,12],[79,378,109,13],[79,379,109,14],[79,380,109,15],[79,383,109,18,"b"],[79,384,109,19],[79,385,109,20],[79,386,109,21],[79,387,109,22],[79,388,109,23],[79,389,109,24],[79,390,109,25],[79,393,110,8,"a"],[79,394,110,9],[79,395,110,10],[79,396,110,11],[79,397,110,12],[79,398,110,13],[79,399,110,14],[79,400,110,15],[79,403,110,18,"b"],[79,404,110,19],[79,405,110,20],[79,406,110,21],[79,407,110,22],[79,408,110,23],[79,409,110,24],[79,410,110,25],[79,412,112,6,"a"],[79,413,112,7],[79,414,112,8],[79,415,112,9],[79,416,112,10],[79,417,112,11],[79,418,112,12],[79,419,112,13],[79,422,112,16,"b"],[79,423,112,17],[79,424,112,18],[79,425,112,19],[79,426,112,20],[79,427,112,21],[79,428,112,22],[79,429,112,23],[79,432,113,8,"a"],[79,433,113,9],[79,434,113,10],[79,435,113,11],[79,436,113,12],[79,437,113,13],[79,438,113,14],[79,439,113,15],[79,442,113,18,"b"],[79,443,113,19],[79,444,113,20],[79,445,113,21],[79,446,113,22],[79,447,113,23],[79,448,113,24],[79,449,113,25],[79,452,114,8,"a"],[79,453,114,9],[79,454,114,10],[79,455,114,11],[79,456,114,12],[79,457,114,13],[79,458,114,14],[79,459,114,15],[79,462,114,18,"b"],[79,463,114,19],[79,464,114,20],[79,465,114,21],[79,466,114,22],[79,467,114,23],[79,468,114,24],[79,469,114,25],[79,472,115,8,"a"],[79,473,115,9],[79,474,115,10],[79,475,115,11],[79,476,115,12],[79,477,115,13],[79,478,115,14],[79,479,115,15],[79,482,115,18,"b"],[79,483,115,19],[79,484,115,20],[79,485,115,21],[79,486,115,22],[79,487,115,23],[79,488,115,24],[79,489,115,25],[79,491,117,6,"a"],[79,492,117,7],[79,493,117,8],[79,494,117,9],[79,495,117,10],[79,496,117,11],[79,497,117,12],[79,498,117,13],[79,501,117,16,"b"],[79,502,117,17],[79,503,117,18],[79,504,117,19],[79,505,117,20],[79,506,117,21],[79,507,117,22],[79,508,117,23],[79,511,118,8,"a"],[79,512,118,9],[79,513,118,10],[79,514,118,11],[79,515,118,12],[79,516,118,13],[79,517,118,14],[79,518,118,15],[79,521,118,18,"b"],[79,522,118,19],[79,523,118,20],[79,524,118,21],[79,525,118,22],[79,526,118,23],[79,527,118,24],[79,528,118,25],[79,531,119,8,"a"],[79,532,119,9],[79,533,119,10],[79,534,119,11],[79,535,119,12],[79,536,119,13],[79,537,119,14],[79,538,119,15],[79,541,119,18,"b"],[79,542,119,19],[79,543,119,20],[79,544,119,21],[79,545,119,22],[79,546,119,23],[79,547,119,24],[79,548,119,25],[79,551,120,8,"a"],[79,552,120,9],[79,553,120,10],[79,554,120,11],[79,555,120,12],[79,556,120,13],[79,557,120,14],[79,558,120,15],[79,561,120,18,"b"],[79,562,120,19],[79,563,120,20],[79,564,120,21],[79,565,120,22],[79,566,120,23],[79,567,120,24],[79,568,120,25],[79,570,122,6,"a"],[79,571,122,7],[79,572,122,8],[79,573,122,9],[79,574,122,10],[79,575,122,11],[79,576,122,12],[79,577,122,13],[79,580,122,16,"b"],[79,581,122,17],[79,582,122,18],[79,583,122,19],[79,584,122,20],[79,585,122,21],[79,586,122,22],[79,587,122,23],[79,590,123,8,"a"],[79,591,123,9],[79,592,123,10],[79,593,123,11],[79,594,123,12],[79,595,123,13],[79,596,123,14],[79,597,123,15],[79,600,123,18,"b"],[79,601,123,19],[79,602,123,20],[79,603,123,21],[79,604,123,22],[79,605,123,23],[79,606,123,24],[79,607,123,25],[79,610,124,8,"a"],[79,611,124,9],[79,612,124,10],[79,613,124,11],[79,614,124,12],[79,615,124,13],[79,616,124,14],[79,617,124,15],[79,620,124,18,"b"],[79,621,124,19],[79,622,124,20],[79,623,124,21],[79,624,124,22],[79,625,124,23],[79,626,124,24],[79,627,124,25],[79,630,125,8,"a"],[79,631,125,9],[79,632,125,10],[79,633,125,11],[79,634,125,12],[79,635,125,13],[79,636,125,14],[79,637,125,15],[79,640,125,18,"b"],[79,641,125,19],[79,642,125,20],[79,643,125,21],[79,644,125,22],[79,645,125,23],[79,646,125,24],[79,647,125,25],[79,648,126,5],[79,650,127,4],[79,651,128,6,"a"],[79,652,128,7],[79,653,128,8],[79,654,128,9],[79,655,128,10],[79,656,128,11],[79,657,128,12],[79,658,128,13],[79,661,128,16,"b"],[79,662,128,17],[79,663,128,18],[79,664,128,19],[79,665,128,20],[79,666,128,21],[79,667,128,22],[79,668,128,23],[79,671,129,8,"a"],[79,672,129,9],[79,673,129,10],[79,674,129,11],[79,675,129,12],[79,676,129,13],[79,677,129,14],[79,678,129,15],[79,681,129,18,"b"],[79,682,129,19],[79,683,129,20],[79,684,129,21],[79,685,129,22],[79,686,129,23],[79,687,129,24],[79,688,129,25],[79,691,130,8,"a"],[79,692,130,9],[79,693,130,10],[79,694,130,11],[79,695,130,12],[79,696,130,13],[79,697,130,14],[79,698,130,15],[79,701,130,18,"b"],[79,702,130,19],[79,703,130,20],[79,704,130,21],[79,705,130,22],[79,706,130,23],[79,707,130,24],[79,708,130,25],[79,711,131,8,"a"],[79,712,131,9],[79,713,131,10],[79,714,131,11],[79,715,131,12],[79,716,131,13],[79,717,131,14],[79,718,131,15],[79,721,131,18,"b"],[79,722,131,19],[79,723,131,20],[79,724,131,21],[79,725,131,22],[79,726,131,23],[79,727,131,24],[79,728,131,25],[79,730,133,6,"a"],[79,731,133,7],[79,732,133,8],[79,733,133,9],[79,734,133,10],[79,735,133,11],[79,736,133,12],[79,737,133,13],[79,740,133,16,"b"],[79,741,133,17],[79,742,133,18],[79,743,133,19],[79,744,133,20],[79,745,133,21],[79,746,133,22],[79,747,133,23],[79,750,134,8,"a"],[79,751,134,9],[79,752,134,10],[79,753,134,11],[79,754,134,12],[79,755,134,13],[79,756,134,14],[79,757,134,15],[79,760,134,18,"b"],[79,761,134,19],[79,762,134,20],[79,763,134,21],[79,764,134,22],[79,765,134,23],[79,766,134,24],[79,767,134,25],[79,770,135,8,"a"],[79,771,135,9],[79,772,135,10],[79,773,135,11],[79,774,135,12],[79,775,135,13],[79,776,135,14],[79,777,135,15],[79,780,135,18,"b"],[79,781,135,19],[79,782,135,20],[79,783,135,21],[79,784,135,22],[79,785,135,23],[79,786,135,24],[79,787,135,25],[79,790,136,8,"a"],[79,791,136,9],[79,792,136,10],[79,793,136,11],[79,794,136,12],[79,795,136,13],[79,796,136,14],[79,797,136,15],[79,800,136,18,"b"],[79,801,136,19],[79,802,136,20],[79,803,136,21],[79,804,136,22],[79,805,136,23],[79,806,136,24],[79,807,136,25],[79,809,138,6,"a"],[79,810,138,7],[79,811,138,8],[79,812,138,9],[79,813,138,10],[79,814,138,11],[79,815,138,12],[79,816,138,13],[79,819,138,16,"b"],[79,820,138,17],[79,821,138,18],[79,822,138,19],[79,823,138,20],[79,824,138,21],[79,825,138,22],[79,826,138,23],[79,829,139,8,"a"],[79,830,139,9],[79,831,139,10],[79,832,139,11],[79,833,139,12],[79,834,139,13],[79,835,139,14],[79,836,139,15],[79,839,139,18,"b"],[79,840,139,19],[79,841,139,20],[79,842,139,21],[79,843,139,22],[79,844,139,23],[79,845,139,24],[79,846,139,25],[79,849,140,8,"a"],[79,850,140,9],[79,851,140,10],[79,852,140,11],[79,853,140,12],[79,854,140,13],[79,855,140,14],[79,856,140,15],[79,859,140,18,"b"],[79,860,140,19],[79,861,140,20],[79,862,140,21],[79,863,140,22],[79,864,140,23],[79,865,140,24],[79,866,140,25],[79,869,141,8,"a"],[79,870,141,9],[79,871,141,10],[79,872,141,11],[79,873,141,12],[79,874,141,13],[79,875,141,14],[79,876,141,15],[79,879,141,18,"b"],[79,880,141,19],[79,881,141,20],[79,882,141,21],[79,883,141,22],[79,884,141,23],[79,885,141,24],[79,886,141,25],[79,888,143,6,"a"],[79,889,143,7],[79,890,143,8],[79,891,143,9],[79,892,143,10],[79,893,143,11],[79,894,143,12],[79,895,143,13],[79,898,143,16,"b"],[79,899,143,17],[79,900,143,18],[79,901,143,19],[79,902,143,20],[79,903,143,21],[79,904,143,22],[79,905,143,23],[79,908,144,8,"a"],[79,909,144,9],[79,910,144,10],[79,911,144,11],[79,912,144,12],[79,913,144,13],[79,914,144,14],[79,915,144,15],[79,918,144,18,"b"],[79,919,144,19],[79,920,144,20],[79,921,144,21],[79,922,144,22],[79,923,144,23],[79,924,144,24],[79,925,144,25],[79,928,145,8,"a"],[79,929,145,9],[79,930,145,10],[79,931,145,11],[79,932,145,12],[79,933,145,13],[79,934,145,14],[79,935,145,15],[79,938,145,18,"b"],[79,939,145,19],[79,940,145,20],[79,941,145,21],[79,942,145,22],[79,943,145,23],[79,944,145,24],[79,945,145,25],[79,948,146,8,"a"],[79,949,146,9],[79,950,146,10],[79,951,146,11],[79,952,146,12],[79,953,146,13],[79,954,146,14],[79,955,146,15],[79,958,146,18,"b"],[79,959,146,19],[79,960,146,20],[79,961,146,21],[79,962,146,22],[79,963,146,23],[79,964,146,24],[79,965,146,25],[79,966,147,5],[79,968,148,4],[79,969,149,6,"a"],[79,970,149,7],[79,971,149,8],[79,972,149,9],[79,973,149,10],[79,974,149,11],[79,975,149,12],[79,976,149,13],[79,979,149,16,"b"],[79,980,149,17],[79,981,149,18],[79,982,149,19],[79,983,149,20],[79,984,149,21],[79,985,149,22],[79,986,149,23],[79,989,150,8,"a"],[79,990,150,9],[79,991,150,10],[79,992,150,11],[79,993,150,12],[79,994,150,13],[79,995,150,14],[79,996,150,15],[79,999,150,18,"b"],[79,1000,150,19],[79,1001,150,20],[79,1002,150,21],[79,1003,150,22],[79,1004,150,23],[79,1005,150,24],[79,1006,150,25],[79,1009,151,8,"a"],[79,1010,151,9],[79,1011,151,10],[79,1012,151,11],[79,1013,151,12],[79,1014,151,13],[79,1015,151,14],[79,1016,151,15],[79,1019,151,18,"b"],[79,1020,151,19],[79,1021,151,20],[79,1022,151,21],[79,1023,151,22],[79,1024,151,23],[79,1025,151,24],[79,1026,151,25],[79,1029,152,8,"a"],[79,1030,152,9],[79,1031,152,10],[79,1032,152,11],[79,1033,152,12],[79,1034,152,13],[79,1035,152,14],[79,1036,152,15],[79,1039,152,18,"b"],[79,1040,152,19],[79,1041,152,20],[79,1042,152,21],[79,1043,152,22],[79,1044,152,23],[79,1045,152,24],[79,1046,152,25],[79,1048,154,6,"a"],[79,1049,154,7],[79,1050,154,8],[79,1051,154,9],[79,1052,154,10],[79,1053,154,11],[79,1054,154,12],[79,1055,154,13],[79,1058,154,16,"b"],[79,1059,154,17],[79,1060,154,18],[79,1061,154,19],[79,1062,154,20],[79,1063,154,21],[79,1064,154,22],[79,1065,154,23],[79,1068,155,8,"a"],[79,1069,155,9],[79,1070,155,10],[79,1071,155,11],[79,1072,155,12],[79,1073,155,13],[79,1074,155,14],[79,1075,155,15],[79,1078,155,18,"b"],[79,1079,155,19],[79,1080,155,20],[79,1081,155,21],[79,1082,155,22],[79,1083,155,23],[79,1084,155,24],[79,1085,155,25],[79,1088,156,8,"a"],[79,1089,156,9],[79,1090,156,10],[79,1091,156,11],[79,1092,156,12],[79,1093,156,13],[79,1094,156,14],[79,1095,156,15],[79,1098,156,18,"b"],[79,1099,156,19],[79,1100,156,20],[79,1101,156,21],[79,1102,156,22],[79,1103,156,23],[79,1104,156,24],[79,1105,156,25],[79,1108,157,8,"a"],[79,1109,157,9],[79,1110,157,10],[79,1111,157,11],[79,1112,157,12],[79,1113,157,13],[79,1114,157,14],[79,1115,157,15],[79,1118,157,18,"b"],[79,1119,157,19],[79,1120,157,20],[79,1121,157,21],[79,1122,157,22],[79,1123,157,23],[79,1124,157,24],[79,1125,157,25],[79,1127,159,6,"a"],[79,1128,159,7],[79,1129,159,8],[79,1130,159,9],[79,1131,159,10],[79,1132,159,11],[79,1133,159,12],[79,1134,159,13],[79,1137,159,16,"b"],[79,1138,159,17],[79,1139,159,18],[79,1140,159,19],[79,1141,159,20],[79,1142,159,21],[79,1143,159,22],[79,1144,159,23],[79,1147,160,8,"a"],[79,1148,160,9],[79,1149,160,10],[79,1150,160,11],[79,1151,160,12],[79,1152,160,13],[79,1153,160,14],[79,1154,160,15],[79,1157,160,18,"b"],[79,1158,160,19],[79,1159,160,20],[79,1160,160,21],[79,1161,160,22],[79,1162,160,23],[79,1163,160,24],[79,1164,160,25],[79,1167,161,8,"a"],[79,1168,161,9],[79,1169,161,10],[79,1170,161,11],[79,1171,161,12],[79,1172,161,13],[79,1173,161,14],[79,1174,161,15],[79,1177,161,18,"b"],[79,1178,161,19],[79,1179,161,20],[79,1180,161,21],[79,1181,161,22],[79,1182,161,23],[79,1183,161,24],[79,1184,161,25],[79,1187,162,8,"a"],[79,1188,162,9],[79,1189,162,10],[79,1190,162,11],[79,1191,162,12],[79,1192,162,13],[79,1193,162,14],[79,1194,162,15],[79,1197,162,18,"b"],[79,1198,162,19],[79,1199,162,20],[79,1200,162,21],[79,1201,162,22],[79,1202,162,23],[79,1203,162,24],[79,1204,162,25],[79,1206,164,6,"a"],[79,1207,164,7],[79,1208,164,8],[79,1209,164,9],[79,1210,164,10],[79,1211,164,11],[79,1212,164,12],[79,1213,164,13],[79,1216,164,16,"b"],[79,1217,164,17],[79,1218,164,18],[79,1219,164,19],[79,1220,164,20],[79,1221,164,21],[79,1222,164,22],[79,1223,164,23],[79,1226,165,8,"a"],[79,1227,165,9],[79,1228,165,10],[79,1229,165,11],[79,1230,165,12],[79,1231,165,13],[79,1232,165,14],[79,1233,165,15],[79,1236,165,18,"b"],[79,1237,165,19],[79,1238,165,20],[79,1239,165,21],[79,1240,165,22],[79,1241,165,23],[79,1242,165,24],[79,1243,165,25],[79,1246,166,8,"a"],[79,1247,166,9],[79,1248,166,10],[79,1249,166,11],[79,1250,166,12],[79,1251,166,13],[79,1252,166,14],[79,1253,166,15],[79,1256,166,18,"b"],[79,1257,166,19],[79,1258,166,20],[79,1259,166,21],[79,1260,166,22],[79,1261,166,23],[79,1262,166,24],[79,1263,166,25],[79,1266,167,8,"a"],[79,1267,167,9],[79,1268,167,10],[79,1269,167,11],[79,1270,167,12],[79,1271,167,13],[79,1272,167,14],[79,1273,167,15],[79,1276,167,18,"b"],[79,1277,167,19],[79,1278,167,20],[79,1279,167,21],[79,1280,167,22],[79,1281,167,23],[79,1282,167,24],[79,1283,167,25],[79,1284,168,5],[79,1285,169,3],[80,4,170,0],[80,5,170,1],[81,4,170,1,"multiplyMatrices"],[81,20,170,1],[81,21,170,1,"__closure"],[81,30,170,1],[82,4,170,1,"multiplyMatrices"],[82,20,170,1],[82,21,170,1,"__workletHash"],[82,34,170,1],[83,4,170,1,"multiplyMatrices"],[83,20,170,1],[83,21,170,1,"__initData"],[83,31,170,1],[83,34,170,1,"_worklet_15992296871009_init_data"],[83,67,170,1],[84,4,170,1],[84,11,170,1,"multiplyMatrices"],[84,27,170,1],[85,2,170,1],[85,3,79,7],[86,2,79,7],[86,6,79,7,"_worklet_6627182100671_init_data"],[86,38,79,7],[87,4,79,7,"code"],[87,8,79,7],[88,2,79,7],[89,2,79,7],[89,6,79,7,"subtractMatrices"],[89,22,79,7],[89,25,79,7,"exports"],[89,32,79,7],[89,33,79,7,"subtractMatrices"],[89,49,79,7],[89,52,172,7],[90,4,172,7],[90,8,172,7,"subtractMatrices"],[90,24,172,7],[90,36,172,7,"subtractMatrices"],[90,37,173,2,"maybeFlatA"],[90,47,173,15],[90,49,174,2,"maybeFlatB"],[90,59,174,15],[90,61,175,5],[91,6,177,2],[91,10,177,8,"isFlatOnStart"],[91,23,177,21],[91,26,177,24,"isAffineMatrixFlat"],[91,44,177,42],[91,45,177,43,"maybeFlatA"],[91,55,177,53],[91,56,177,54],[92,6,178,2],[92,10,178,8,"a"],[92,11,178,27],[92,14,178,30,"maybeFlattenMatrix"],[92,32,178,48],[92,33,178,49,"maybeFlatA"],[92,43,178,59],[92,44,178,60],[93,6,179,2],[93,10,179,8,"b"],[93,11,179,27],[93,14,179,30,"maybeFlattenMatrix"],[93,32,179,48],[93,33,179,49,"maybeFlatB"],[93,43,179,59],[93,44,179,60],[94,6,181,2],[94,10,181,8,"c"],[94,11,181,9],[94,14,181,12,"a"],[94,15,181,13],[94,16,181,14,"map"],[94,19,181,17],[94,20,181,18],[94,21,181,19,"_"],[94,22,181,20],[94,24,181,22,"i"],[94,25,181,23],[94,30,181,28,"a"],[94,31,181,29],[94,32,181,30,"i"],[94,33,181,31],[94,34,181,32],[94,37,181,35,"b"],[94,38,181,36],[94,39,181,37,"i"],[94,40,181,38],[94,41,181,39],[94,42,181,60],[95,6,182,2],[95,13,182,9,"isFlatOnStart"],[95,26,182,22],[95,29,182,26,"c"],[95,30,182,27],[95,33,182,37,"unflatten"],[95,42,182,46],[95,43,182,47,"c"],[95,44,182,48],[95,45,182,55],[96,4,183,0],[96,5,183,1],[97,4,183,1,"subtractMatrices"],[97,20,183,1],[97,21,183,1,"__closure"],[97,30,183,1],[98,6,183,1,"isAffineMatrixFlat"],[98,24,183,1],[99,6,183,1,"maybeFlattenMatrix"],[99,24,183,1],[100,6,183,1,"unflatten"],[101,4,183,1],[102,4,183,1,"subtractMatrices"],[102,20,183,1],[102,21,183,1,"__workletHash"],[102,34,183,1],[103,4,183,1,"subtractMatrices"],[103,20,183,1],[103,21,183,1,"__initData"],[103,31,183,1],[103,34,183,1,"_worklet_6627182100671_init_data"],[103,66,183,1],[104,4,183,1],[104,11,183,1,"subtractMatrices"],[104,27,183,1],[105,2,183,1],[105,3,172,7],[106,2,172,7],[106,6,172,7,"_worklet_14155680970531_init_data"],[106,39,172,7],[107,4,172,7,"code"],[107,8,172,7],[108,2,172,7],[109,2,172,7],[109,6,172,7,"addMatrices"],[109,17,172,7],[109,20,172,7,"exports"],[109,27,172,7],[109,28,172,7,"addMatrices"],[109,39,172,7],[109,42,185,7],[110,4,185,7],[110,8,185,7,"addMatrices"],[110,19,185,7],[110,31,185,7,"addMatrices"],[110,32,186,2,"maybeFlatA"],[110,42,186,15],[110,44,187,2,"maybeFlatB"],[110,54,187,15],[110,56,188,5],[111,6,190,2],[111,10,190,8,"isFlatOnStart"],[111,23,190,21],[111,26,190,24,"isAffineMatrixFlat"],[111,44,190,42],[111,45,190,43,"maybeFlatA"],[111,55,190,53],[111,56,190,54],[112,6,191,2],[112,10,191,8,"a"],[112,11,191,9],[112,14,191,12,"maybeFlattenMatrix"],[112,32,191,30],[112,33,191,31,"maybeFlatA"],[112,43,191,41],[112,44,191,42],[113,6,192,2],[113,10,192,8,"b"],[113,11,192,9],[113,14,192,12,"maybeFlattenMatrix"],[113,32,192,30],[113,33,192,31,"maybeFlatB"],[113,43,192,41],[113,44,192,42],[114,6,194,2],[114,10,194,8,"c"],[114,11,194,9],[114,14,194,12,"a"],[114,15,194,13],[114,16,194,14,"map"],[114,19,194,17],[114,20,194,18],[114,21,194,19,"_"],[114,22,194,20],[114,24,194,22,"i"],[114,25,194,23],[114,30,194,28,"a"],[114,31,194,29],[114,32,194,30,"i"],[114,33,194,31],[114,34,194,32],[114,37,194,35,"b"],[114,38,194,36],[114,39,194,37,"i"],[114,40,194,38],[114,41,194,39],[114,42,194,60],[115,6,195,2],[115,13,195,9,"isFlatOnStart"],[115,26,195,22],[115,29,195,26,"c"],[115,30,195,27],[115,33,195,37,"unflatten"],[115,42,195,46],[115,43,195,47,"c"],[115,44,195,48],[115,45,195,55],[116,4,196,0],[116,5,196,1],[117,4,196,1,"addMatrices"],[117,15,196,1],[117,16,196,1,"__closure"],[117,25,196,1],[118,6,196,1,"isAffineMatrixFlat"],[118,24,196,1],[119,6,196,1,"maybeFlattenMatrix"],[119,24,196,1],[120,6,196,1,"unflatten"],[121,4,196,1],[122,4,196,1,"addMatrices"],[122,15,196,1],[122,16,196,1,"__workletHash"],[122,29,196,1],[123,4,196,1,"addMatrices"],[123,15,196,1],[123,16,196,1,"__initData"],[123,26,196,1],[123,29,196,1,"_worklet_14155680970531_init_data"],[123,62,196,1],[124,4,196,1],[124,11,196,1,"addMatrices"],[124,22,196,1],[125,2,196,1],[125,3,185,7],[126,2,185,7],[126,6,185,7,"_worklet_2686901073094_init_data"],[126,38,185,7],[127,4,185,7,"code"],[127,8,185,7],[128,2,185,7],[129,2,185,7],[129,6,185,7,"scaleMatrix"],[129,17,185,7],[129,20,185,7,"exports"],[129,27,185,7],[129,28,185,7,"scaleMatrix"],[129,39,185,7],[129,42,198,7],[130,4,198,7],[130,8,198,7,"scaleMatrix"],[130,19,198,7],[130,31,198,7,"scaleMatrix"],[130,32,199,2,"maybeFlatA"],[130,42,199,15],[130,44,200,2,"scalar"],[130,50,200,16],[130,52,201,5],[131,6,203,2],[131,10,203,8,"isFlatOnStart"],[131,23,203,21],[131,26,203,24,"isAffineMatrixFlat"],[131,44,203,42],[131,45,203,43,"maybeFlatA"],[131,55,203,53],[131,56,203,54],[132,6,204,2],[132,10,204,8,"a"],[132,11,204,9],[132,14,204,12,"maybeFlattenMatrix"],[132,32,204,30],[132,33,204,31,"maybeFlatA"],[132,43,204,41],[132,44,204,42],[133,6,206,2],[133,10,206,8,"b"],[133,11,206,9],[133,14,206,12,"a"],[133,15,206,13],[133,16,206,14,"map"],[133,19,206,17],[133,20,206,19,"x"],[133,21,206,20],[133,25,206,25,"x"],[133,26,206,26],[133,29,206,29,"scalar"],[133,35,206,35],[133,36,206,56],[134,6,207,2],[134,13,207,9,"isFlatOnStart"],[134,26,207,22],[134,29,207,26,"b"],[134,30,207,27],[134,33,207,37,"unflatten"],[134,42,207,46],[134,43,207,47,"b"],[134,44,207,48],[134,45,207,55],[135,4,208,0],[135,5,208,1],[136,4,208,1,"scaleMatrix"],[136,15,208,1],[136,16,208,1,"__closure"],[136,25,208,1],[137,6,208,1,"isAffineMatrixFlat"],[137,24,208,1],[138,6,208,1,"maybeFlattenMatrix"],[138,24,208,1],[139,6,208,1,"unflatten"],[140,4,208,1],[141,4,208,1,"scaleMatrix"],[141,15,208,1],[141,16,208,1,"__workletHash"],[141,29,208,1],[142,4,208,1,"scaleMatrix"],[142,15,208,1],[142,16,208,1,"__initData"],[142,26,208,1],[142,29,208,1,"_worklet_2686901073094_init_data"],[142,61,208,1],[143,4,208,1],[143,11,208,1,"scaleMatrix"],[143,22,208,1],[144,2,208,1],[144,3,198,7],[145,2,198,7],[145,6,198,7,"_worklet_5407153467837_init_data"],[145,38,198,7],[146,4,198,7,"code"],[146,8,198,7],[147,2,198,7],[148,2,198,7],[148,6,198,7,"getRotationMatrix"],[148,23,198,7],[148,26,198,7,"exports"],[148,33,198,7],[148,34,198,7,"getRotationMatrix"],[148,51,198,7],[148,54,210,7],[149,4,210,7],[149,8,210,7,"getRotationMatrix"],[149,25,210,7],[149,37,210,7,"getRotationMatrix"],[149,38,211,2,"angle"],[149,43,211,15],[149,45,213,16],[150,6,213,16],[150,10,212,2,"axis"],[150,14,212,12],[150,17,212,12,"arguments"],[150,26,212,12],[150,27,212,12,"length"],[150,33,212,12],[150,41,212,12,"arguments"],[150,50,212,12],[150,58,212,12,"undefined"],[150,67,212,12],[150,70,212,12,"arguments"],[150,79,212,12],[150,85,212,15],[150,88,212,18],[151,6,215,2],[151,10,215,8,"cos"],[151,13,215,11],[151,16,215,14,"Math"],[151,20,215,18],[151,21,215,19,"cos"],[151,24,215,22],[151,25,215,23,"angle"],[151,30,215,28],[151,31,215,29],[152,6,216,2],[152,10,216,8,"sin"],[152,13,216,11],[152,16,216,14,"Math"],[152,20,216,18],[152,21,216,19,"sin"],[152,24,216,22],[152,25,216,23,"angle"],[152,30,216,28],[152,31,216,29],[153,6,217,2],[153,14,217,10,"axis"],[153,18,217,14],[154,8,218,4],[154,13,218,9],[154,16,218,12],[155,10,219,6],[155,17,219,13],[155,18,220,8],[155,19,220,9,"cos"],[155,22,220,12],[155,24,220,14,"sin"],[155,27,220,17],[155,29,220,19],[155,30,220,20],[155,32,220,22],[155,33,220,23],[155,34,220,24],[155,36,221,8],[155,37,221,9],[155,38,221,10,"sin"],[155,41,221,13],[155,43,221,15,"cos"],[155,46,221,18],[155,48,221,20],[155,49,221,21],[155,51,221,23],[155,52,221,24],[155,53,221,25],[155,55,222,8],[155,56,222,9],[155,57,222,10],[155,59,222,12],[155,60,222,13],[155,62,222,15],[155,63,222,16],[155,65,222,18],[155,66,222,19],[155,67,222,20],[155,69,223,8],[155,70,223,9],[155,71,223,10],[155,73,223,12],[155,74,223,13],[155,76,223,15],[155,77,223,16],[155,79,223,18],[155,80,223,19],[155,81,223,20],[155,82,224,7],[156,8,225,4],[156,13,225,9],[156,16,225,12],[157,10,226,6],[157,17,226,13],[157,18,227,8],[157,19,227,9,"cos"],[157,22,227,12],[157,24,227,14],[157,25,227,15],[157,27,227,17],[157,28,227,18,"sin"],[157,31,227,21],[157,33,227,23],[157,34,227,24],[157,35,227,25],[157,37,228,8],[157,38,228,9],[157,39,228,10],[157,41,228,12],[157,42,228,13],[157,44,228,15],[157,45,228,16],[157,47,228,18],[157,48,228,19],[157,49,228,20],[157,51,229,8],[157,52,229,9,"sin"],[157,55,229,12],[157,57,229,14],[157,58,229,15],[157,60,229,17,"cos"],[157,63,229,20],[157,65,229,22],[157,66,229,23],[157,67,229,24],[157,69,230,8],[157,70,230,9],[157,71,230,10],[157,73,230,12],[157,74,230,13],[157,76,230,15],[157,77,230,16],[157,79,230,18],[157,80,230,19],[157,81,230,20],[157,82,231,7],[158,8,232,4],[158,13,232,9],[158,16,232,12],[159,10,233,6],[159,17,233,13],[159,18,234,8],[159,19,234,9],[159,20,234,10],[159,22,234,12],[159,23,234,13],[159,25,234,15],[159,26,234,16],[159,28,234,18],[159,29,234,19],[159,30,234,20],[159,32,235,8],[159,33,235,9],[159,34,235,10],[159,36,235,12,"cos"],[159,39,235,15],[159,41,235,17,"sin"],[159,44,235,20],[159,46,235,22],[159,47,235,23],[159,48,235,24],[159,50,236,8],[159,51,236,9],[159,52,236,10],[159,54,236,12],[159,55,236,13,"sin"],[159,58,236,16],[159,60,236,18,"cos"],[159,63,236,21],[159,65,236,23],[159,66,236,24],[159,67,236,25],[159,69,237,8],[159,70,237,9],[159,71,237,10],[159,73,237,12],[159,74,237,13],[159,76,237,15],[159,77,237,16],[159,79,237,18],[159,80,237,19],[159,81,237,20],[159,82,238,7],[160,6,239,2],[161,4,240,0],[161,5,240,1],[162,4,240,1,"getRotationMatrix"],[162,21,240,1],[162,22,240,1,"__closure"],[162,31,240,1],[163,4,240,1,"getRotationMatrix"],[163,21,240,1],[163,22,240,1,"__workletHash"],[163,35,240,1],[164,4,240,1,"getRotationMatrix"],[164,21,240,1],[164,22,240,1,"__initData"],[164,32,240,1],[164,35,240,1,"_worklet_5407153467837_init_data"],[164,67,240,1],[165,4,240,1],[165,11,240,1,"getRotationMatrix"],[165,28,240,1],[166,2,240,1],[166,3,210,7],[167,2,210,7],[167,6,210,7,"_worklet_1030244477291_init_data"],[167,38,210,7],[168,4,210,7,"code"],[168,8,210,7],[169,2,210,7],[170,2,210,7],[170,6,210,7,"norm3d"],[170,12,210,7],[170,15,242,0],[171,4,242,0],[171,8,242,0,"norm3d"],[171,14,242,0],[171,26,242,0,"norm3d"],[171,27,242,16,"x"],[171,28,242,25],[171,30,242,27,"y"],[171,31,242,36],[171,33,242,38,"z"],[171,34,242,47],[171,36,242,49],[172,6,244,2],[172,13,244,9,"Math"],[172,17,244,13],[172,18,244,14,"sqrt"],[172,22,244,18],[172,23,244,19,"x"],[172,24,244,20],[172,27,244,23,"x"],[172,28,244,24],[172,31,244,27,"y"],[172,32,244,28],[172,35,244,31,"y"],[172,36,244,32],[172,39,244,35,"z"],[172,40,244,36],[172,43,244,39,"z"],[172,44,244,40],[172,45,244,41],[173,4,245,0],[173,5,245,1],[174,4,245,1,"norm3d"],[174,10,245,1],[174,11,245,1,"__closure"],[174,20,245,1],[175,4,245,1,"norm3d"],[175,10,245,1],[175,11,245,1,"__workletHash"],[175,24,245,1],[176,4,245,1,"norm3d"],[176,10,245,1],[176,11,245,1,"__initData"],[176,21,245,1],[176,24,245,1,"_worklet_1030244477291_init_data"],[176,56,245,1],[177,4,245,1],[177,11,245,1,"norm3d"],[177,17,245,1],[178,2,245,1],[178,3,242,0],[179,2,242,0],[179,6,242,0,"_worklet_7878923469978_init_data"],[179,38,242,0],[180,4,242,0,"code"],[180,8,242,0],[181,2,242,0],[182,2,242,0],[182,6,242,0,"transposeMatrix"],[182,21,242,0],[182,24,247,0],[183,4,247,0],[183,8,247,0,"transposeMatrix"],[183,23,247,0],[183,35,247,0,"transposeMatrix"],[183,36,247,25,"matrix"],[183,42,247,45],[183,44,247,61],[184,6,249,2],[184,10,249,8,"m"],[184,11,249,9],[184,14,249,12,"flatten"],[184,21,249,19],[184,22,249,20,"matrix"],[184,28,249,26],[184,29,249,27],[185,6,250,2],[185,13,250,9],[185,14,251,4],[185,15,251,5,"m"],[185,16,251,6],[185,17,251,7],[185,18,251,8],[185,19,251,9],[185,21,251,11,"m"],[185,22,251,12],[185,23,251,13],[185,24,251,14],[185,25,251,15],[185,27,251,17,"m"],[185,28,251,18],[185,29,251,19],[185,30,251,20],[185,31,251,21],[185,33,251,23,"m"],[185,34,251,24],[185,35,251,25],[185,37,251,27],[185,38,251,28],[185,39,251,29],[185,41,252,4],[185,42,252,5,"m"],[185,43,252,6],[185,44,252,7],[185,45,252,8],[185,46,252,9],[185,48,252,11,"m"],[185,49,252,12],[185,50,252,13],[185,51,252,14],[185,52,252,15],[185,54,252,17,"m"],[185,55,252,18],[185,56,252,19],[185,57,252,20],[185,58,252,21],[185,60,252,23,"m"],[185,61,252,24],[185,62,252,25],[185,64,252,27],[185,65,252,28],[185,66,252,29],[185,68,253,4],[185,69,253,5,"m"],[185,70,253,6],[185,71,253,7],[185,72,253,8],[185,73,253,9],[185,75,253,11,"m"],[185,76,253,12],[185,77,253,13],[185,78,253,14],[185,79,253,15],[185,81,253,17,"m"],[185,82,253,18],[185,83,253,19],[185,85,253,21],[185,86,253,22],[185,88,253,24,"m"],[185,89,253,25],[185,90,253,26],[185,92,253,28],[185,93,253,29],[185,94,253,30],[185,96,254,4],[185,97,254,5,"m"],[185,98,254,6],[185,99,254,7],[185,100,254,8],[185,101,254,9],[185,103,254,11,"m"],[185,104,254,12],[185,105,254,13],[185,106,254,14],[185,107,254,15],[185,109,254,17,"m"],[185,110,254,18],[185,111,254,19],[185,113,254,21],[185,114,254,22],[185,116,254,24,"m"],[185,117,254,25],[185,118,254,26],[185,120,254,28],[185,121,254,29],[185,122,254,30],[185,123,255,3],[186,4,256,0],[186,5,256,1],[187,4,256,1,"transposeMatrix"],[187,19,256,1],[187,20,256,1,"__closure"],[187,29,256,1],[188,6,256,1,"flatten"],[189,4,256,1],[190,4,256,1,"transposeMatrix"],[190,19,256,1],[190,20,256,1,"__workletHash"],[190,33,256,1],[191,4,256,1,"transposeMatrix"],[191,19,256,1],[191,20,256,1,"__initData"],[191,30,256,1],[191,33,256,1,"_worklet_7878923469978_init_data"],[191,65,256,1],[192,4,256,1],[192,11,256,1,"transposeMatrix"],[192,26,256,1],[193,2,256,1],[193,3,247,0],[194,2,247,0],[194,6,247,0,"_worklet_3891131781244_init_data"],[194,38,247,0],[195,4,247,0,"code"],[195,8,247,0],[196,2,247,0],[197,2,247,0],[197,6,247,0,"assertVectorsHaveEqualLengths"],[197,35,247,0],[197,38,258,0],[198,4,258,0],[198,8,258,0,"assertVectorsHaveEqualLengths"],[198,37,258,0],[198,49,258,0,"assertVectorsHaveEqualLengths"],[198,50,258,39,"a"],[198,51,258,50],[198,53,258,52,"b"],[198,54,258,63],[198,56,258,65],[198,57,267,0],[198,58,267,1],[199,4,267,1,"assertVectorsHaveEqualLengths"],[199,33,267,1],[199,34,267,1,"__closure"],[199,43,267,1],[200,6,267,1,"__DEV__"],[200,13,267,1],[201,4,267,1],[202,4,267,1,"assertVectorsHaveEqualLengths"],[202,33,267,1],[202,34,267,1,"__workletHash"],[202,47,267,1],[203,4,267,1,"assertVectorsHaveEqualLengths"],[203,33,267,1],[203,34,267,1,"__initData"],[203,44,267,1],[203,47,267,1,"_worklet_3891131781244_init_data"],[203,79,267,1],[204,4,267,1],[204,11,267,1,"assertVectorsHaveEqualLengths"],[204,40,267,1],[205,2,267,1],[205,3,258,0],[206,2,258,0],[206,6,258,0,"_worklet_2500695369804_init_data"],[206,38,258,0],[207,4,258,0,"code"],[207,8,258,0],[208,2,258,0],[209,2,258,0],[209,6,258,0,"innerProduct"],[209,18,258,0],[209,21,269,0],[210,4,269,0],[210,8,269,0,"innerProduct"],[210,20,269,0],[210,32,269,0,"innerProduct"],[210,33,269,22,"a"],[210,34,269,33],[210,36,269,35,"b"],[210,37,269,46],[210,39,269,48],[211,6,271,2,"assertVectorsHaveEqualLengths"],[211,35,271,31],[211,36,271,32,"a"],[211,37,271,33],[211,39,271,35,"b"],[211,40,271,36],[211,41,271,37],[212,6,272,2],[212,13,272,9,"a"],[212,14,272,10],[212,15,272,11,"reduce"],[212,21,272,17],[212,22,272,18],[212,23,272,19,"acc"],[212,26,272,22],[212,28,272,24,"_"],[212,29,272,25],[212,31,272,27,"i"],[212,32,272,28],[212,37,272,33,"acc"],[212,40,272,36],[212,43,272,39,"a"],[212,44,272,40],[212,45,272,41,"i"],[212,46,272,42],[212,47,272,43],[212,50,272,46,"b"],[212,51,272,47],[212,52,272,48,"i"],[212,53,272,49],[212,54,272,50],[212,56,272,52],[212,57,272,53],[212,58,272,54],[213,4,273,0],[213,5,273,1],[214,4,273,1,"innerProduct"],[214,16,273,1],[214,17,273,1,"__closure"],[214,26,273,1],[215,6,273,1,"assertVectorsHaveEqualLengths"],[216,4,273,1],[217,4,273,1,"innerProduct"],[217,16,273,1],[217,17,273,1,"__workletHash"],[217,30,273,1],[218,4,273,1,"innerProduct"],[218,16,273,1],[218,17,273,1,"__initData"],[218,27,273,1],[218,30,273,1,"_worklet_2500695369804_init_data"],[218,62,273,1],[219,4,273,1],[219,11,273,1,"innerProduct"],[219,23,273,1],[220,2,273,1],[220,3,269,0],[221,2,269,0],[221,6,269,0,"_worklet_16002079233038_init_data"],[221,39,269,0],[222,4,269,0,"code"],[222,8,269,0],[223,2,269,0],[224,2,269,0],[224,6,269,0,"projection"],[224,16,269,0],[224,19,275,0],[225,4,275,0],[225,8,275,0,"projection"],[225,18,275,0],[225,30,275,0,"projection"],[225,31,275,20,"u"],[225,32,275,31],[225,34,275,33,"a"],[225,35,275,44],[225,37,275,46],[226,6,277,2,"assertVectorsHaveEqualLengths"],[226,35,277,31],[226,36,277,32,"u"],[226,37,277,33],[226,39,277,35,"a"],[226,40,277,36],[226,41,277,37],[227,6,278,2],[227,10,278,8,"s"],[227,11,278,9],[227,14,278,12,"innerProduct"],[227,26,278,24],[227,27,278,25,"u"],[227,28,278,26],[227,30,278,28,"a"],[227,31,278,29],[227,32,278,30],[227,35,278,33,"innerProduct"],[227,47,278,45],[227,48,278,46,"u"],[227,49,278,47],[227,51,278,49,"u"],[227,52,278,50],[227,53,278,51],[228,6,279,2],[228,13,279,9,"u"],[228,14,279,10],[228,15,279,11,"map"],[228,18,279,14],[228,19,279,16,"e"],[228,20,279,17],[228,24,279,22,"e"],[228,25,279,23],[228,28,279,26,"s"],[228,29,279,27],[228,30,279,28],[229,4,280,0],[229,5,280,1],[230,4,280,1,"projection"],[230,14,280,1],[230,15,280,1,"__closure"],[230,24,280,1],[231,6,280,1,"assertVectorsHaveEqualLengths"],[231,35,280,1],[232,6,280,1,"innerProduct"],[233,4,280,1],[234,4,280,1,"projection"],[234,14,280,1],[234,15,280,1,"__workletHash"],[234,28,280,1],[235,4,280,1,"projection"],[235,14,280,1],[235,15,280,1,"__initData"],[235,25,280,1],[235,28,280,1,"_worklet_16002079233038_init_data"],[235,61,280,1],[236,4,280,1],[236,11,280,1,"projection"],[236,21,280,1],[237,2,280,1],[237,3,275,0],[238,2,275,0],[238,6,275,0,"_worklet_5264626187493_init_data"],[238,38,275,0],[239,4,275,0,"code"],[239,8,275,0],[240,2,275,0],[241,2,275,0],[241,6,275,0,"subtractVectors"],[241,21,275,0],[241,24,282,0],[242,4,282,0],[242,8,282,0,"subtractVectors"],[242,23,282,0],[242,35,282,0,"subtractVectors"],[242,36,282,25,"a"],[242,37,282,36],[242,39,282,38,"b"],[242,40,282,49],[242,42,282,51],[243,6,284,2,"assertVectorsHaveEqualLengths"],[243,35,284,31],[243,36,284,32,"a"],[243,37,284,33],[243,39,284,35,"b"],[243,40,284,36],[243,41,284,37],[244,6,285,2],[244,13,285,9,"a"],[244,14,285,10],[244,15,285,11,"map"],[244,18,285,14],[244,19,285,15],[244,20,285,16,"_"],[244,21,285,17],[244,23,285,19,"i"],[244,24,285,20],[244,29,285,25,"a"],[244,30,285,26],[244,31,285,27,"i"],[244,32,285,28],[244,33,285,29],[244,36,285,32,"b"],[244,37,285,33],[244,38,285,34,"i"],[244,39,285,35],[244,40,285,36],[244,41,285,37],[245,4,286,0],[245,5,286,1],[246,4,286,1,"subtractVectors"],[246,19,286,1],[246,20,286,1,"__closure"],[246,29,286,1],[247,6,286,1,"assertVectorsHaveEqualLengths"],[248,4,286,1],[249,4,286,1,"subtractVectors"],[249,19,286,1],[249,20,286,1,"__workletHash"],[249,33,286,1],[250,4,286,1,"subtractVectors"],[250,19,286,1],[250,20,286,1,"__initData"],[250,30,286,1],[250,33,286,1,"_worklet_5264626187493_init_data"],[250,65,286,1],[251,4,286,1],[251,11,286,1,"subtractVectors"],[251,26,286,1],[252,2,286,1],[252,3,282,0],[253,2,282,0],[253,6,282,0,"_worklet_2059959224558_init_data"],[253,38,282,0],[254,4,282,0,"code"],[254,8,282,0],[255,2,282,0],[256,2,282,0],[256,6,282,0,"scaleVector"],[256,17,282,0],[256,20,288,0],[257,4,288,0],[257,8,288,0,"scaleVector"],[257,19,288,0],[257,31,288,0,"scaleVector"],[257,32,288,21,"u"],[257,33,288,32],[257,35,288,34,"a"],[257,36,288,43],[257,38,288,45],[258,6,290,2],[258,13,290,9,"u"],[258,14,290,10],[258,15,290,11,"map"],[258,18,290,14],[258,19,290,16,"e"],[258,20,290,17],[258,24,290,22,"e"],[258,25,290,23],[258,28,290,26,"a"],[258,29,290,27],[258,30,290,28],[259,4,291,0],[259,5,291,1],[260,4,291,1,"scaleVector"],[260,15,291,1],[260,16,291,1,"__closure"],[260,25,291,1],[261,4,291,1,"scaleVector"],[261,15,291,1],[261,16,291,1,"__workletHash"],[261,29,291,1],[262,4,291,1,"scaleVector"],[262,15,291,1],[262,16,291,1,"__initData"],[262,26,291,1],[262,29,291,1,"_worklet_2059959224558_init_data"],[262,61,291,1],[263,4,291,1],[263,11,291,1,"scaleVector"],[263,22,291,1],[264,2,291,1],[264,3,288,0],[265,2,288,0],[265,6,288,0,"_worklet_827372645680_init_data"],[265,37,288,0],[266,4,288,0,"code"],[266,8,288,0],[267,2,288,0],[268,2,288,0],[268,6,288,0,"gramSchmidtAlgorithm"],[268,26,288,0],[268,29,293,0],[269,4,293,0],[269,8,293,0,"gramSchmidtAlgorithm"],[269,28,293,0],[269,40,293,0,"gramSchmidtAlgorithm"],[269,41,293,30,"matrix"],[269,47,293,50],[269,49,296,2],[270,6,301,2],[270,10,301,2,"_matrix"],[270,17,301,2],[270,24,301,2,"_slicedToArray2"],[270,39,301,2],[270,40,301,2,"default"],[270,47,301,2],[270,49,301,27,"matrix"],[270,55,301,33],[271,8,301,9,"a0"],[271,10,301,11],[271,13,301,11,"_matrix"],[271,20,301,11],[272,8,301,13,"a1"],[272,10,301,15],[272,13,301,15,"_matrix"],[272,20,301,15],[273,8,301,17,"a2"],[273,10,301,19],[273,13,301,19,"_matrix"],[273,20,301,19],[274,8,301,21,"a3"],[274,10,301,23],[274,13,301,23,"_matrix"],[274,20,301,23],[275,6,303,2],[275,10,303,8,"u0"],[275,12,303,10],[275,15,303,13,"a0"],[275,17,303,15],[276,6,304,2],[276,10,304,8,"u1"],[276,12,304,10],[276,15,304,13,"subtractVectors"],[276,30,304,28],[276,31,304,29,"a1"],[276,33,304,31],[276,35,304,33,"projection"],[276,45,304,43],[276,46,304,44,"u0"],[276,48,304,46],[276,50,304,48,"a1"],[276,52,304,50],[276,53,304,51],[276,54,304,52],[277,6,305,2],[277,10,305,8,"u2"],[277,12,305,10],[277,15,305,13,"subtractVectors"],[277,30,305,28],[277,31,306,4,"subtractVectors"],[277,46,306,19],[277,47,306,20,"a2"],[277,49,306,22],[277,51,306,24,"projection"],[277,61,306,34],[277,62,306,35,"u0"],[277,64,306,37],[277,66,306,39,"a2"],[277,68,306,41],[277,69,306,42],[277,70,306,43],[277,72,307,4,"projection"],[277,82,307,14],[277,83,307,15,"u1"],[277,85,307,17],[277,87,307,19,"a2"],[277,89,307,21],[277,90,308,2],[277,91,308,3],[278,6,309,2],[278,10,309,8,"u3"],[278,12,309,10],[278,15,309,13,"subtractVectors"],[278,30,309,28],[278,31,310,4,"subtractVectors"],[278,46,310,19],[278,47,311,6,"subtractVectors"],[278,62,311,21],[278,63,311,22,"a3"],[278,65,311,24],[278,67,311,26,"projection"],[278,77,311,36],[278,78,311,37,"u0"],[278,80,311,39],[278,82,311,41,"a3"],[278,84,311,43],[278,85,311,44],[278,86,311,45],[278,88,312,6,"projection"],[278,98,312,16],[278,99,312,17,"u1"],[278,101,312,19],[278,103,312,21,"a3"],[278,105,312,23],[278,106,313,4],[278,107,313,5],[278,109,314,4,"projection"],[278,119,314,14],[278,120,314,15,"u2"],[278,122,314,17],[278,124,314,19,"a3"],[278,126,314,21],[278,127,315,2],[278,128,315,3],[279,6,317,2],[279,10,317,2,"_map"],[279,14,317,2],[279,17,317,27],[279,18,317,28,"u0"],[279,20,317,30],[279,22,317,32,"u1"],[279,24,317,34],[279,26,317,36,"u2"],[279,28,317,38],[279,30,317,40,"u3"],[279,32,317,42],[279,33,317,43],[279,34,317,44,"map"],[279,37,317,47],[279,38,317,49,"u"],[279,39,317,50],[279,43,318,4,"scaleVector"],[279,54,318,15],[279,55,318,16,"u"],[279,56,318,17],[279,58,318,19],[279,59,318,20],[279,62,318,23,"Math"],[279,66,318,27],[279,67,318,28,"sqrt"],[279,71,318,32],[279,72,318,33,"innerProduct"],[279,84,318,45],[279,85,318,46,"u"],[279,86,318,47],[279,88,318,49,"u"],[279,89,318,50],[279,90,318,51],[279,91,318,52],[279,92,319,2],[279,93,319,3],[280,8,319,3,"_map2"],[280,13,319,3],[280,20,319,3,"_slicedToArray2"],[280,35,319,3],[280,36,319,3,"default"],[280,43,319,3],[280,45,319,3,"_map"],[280,49,319,3],[281,8,317,9,"e0"],[281,10,317,11],[281,13,317,11,"_map2"],[281,18,317,11],[282,8,317,13,"e1"],[282,10,317,15],[282,13,317,15,"_map2"],[282,18,317,15],[283,8,317,17,"e2"],[283,10,317,19],[283,13,317,19,"_map2"],[283,18,317,19],[284,8,317,21,"e3"],[284,10,317,23],[284,13,317,23,"_map2"],[284,18,317,23],[285,6,321,2],[285,10,321,8,"rotationMatrix"],[285,24,321,36],[285,27,321,39],[285,28,322,4],[285,29,322,5,"e0"],[285,31,322,7],[285,32,322,8],[285,33,322,9],[285,34,322,10],[285,36,322,12,"e1"],[285,38,322,14],[285,39,322,15],[285,40,322,16],[285,41,322,17],[285,43,322,19,"e2"],[285,45,322,21],[285,46,322,22],[285,47,322,23],[285,48,322,24],[285,50,322,26,"e3"],[285,52,322,28],[285,53,322,29],[285,54,322,30],[285,55,322,31],[285,56,322,32],[285,58,323,4],[285,59,323,5,"e0"],[285,61,323,7],[285,62,323,8],[285,63,323,9],[285,64,323,10],[285,66,323,12,"e1"],[285,68,323,14],[285,69,323,15],[285,70,323,16],[285,71,323,17],[285,73,323,19,"e2"],[285,75,323,21],[285,76,323,22],[285,77,323,23],[285,78,323,24],[285,80,323,26,"e3"],[285,82,323,28],[285,83,323,29],[285,84,323,30],[285,85,323,31],[285,86,323,32],[285,88,324,4],[285,89,324,5,"e0"],[285,91,324,7],[285,92,324,8],[285,93,324,9],[285,94,324,10],[285,96,324,12,"e1"],[285,98,324,14],[285,99,324,15],[285,100,324,16],[285,101,324,17],[285,103,324,19,"e2"],[285,105,324,21],[285,106,324,22],[285,107,324,23],[285,108,324,24],[285,110,324,26,"e3"],[285,112,324,28],[285,113,324,29],[285,114,324,30],[285,115,324,31],[285,116,324,32],[285,118,325,4],[285,119,325,5,"e0"],[285,121,325,7],[285,122,325,8],[285,123,325,9],[285,124,325,10],[285,126,325,12,"e1"],[285,128,325,14],[285,129,325,15],[285,130,325,16],[285,131,325,17],[285,133,325,19,"e2"],[285,135,325,21],[285,136,325,22],[285,137,325,23],[285,138,325,24],[285,140,325,26,"e3"],[285,142,325,28],[285,143,325,29],[285,144,325,30],[285,145,325,31],[285,146,325,32],[285,147,326,3],[286,6,328,2],[286,10,328,8,"skewMatrix"],[286,20,328,32],[286,23,328,35],[286,24,329,4],[286,25,330,6,"innerProduct"],[286,37,330,18],[286,38,330,19,"e0"],[286,40,330,21],[286,42,330,23,"a0"],[286,44,330,25],[286,45,330,26],[286,47,331,6,"innerProduct"],[286,59,331,18],[286,60,331,19,"e0"],[286,62,331,21],[286,64,331,23,"a1"],[286,66,331,25],[286,67,331,26],[286,69,332,6,"innerProduct"],[286,81,332,18],[286,82,332,19,"e0"],[286,84,332,21],[286,86,332,23,"a2"],[286,88,332,25],[286,89,332,26],[286,91,333,6,"innerProduct"],[286,103,333,18],[286,104,333,19,"e0"],[286,106,333,21],[286,108,333,23,"a3"],[286,110,333,25],[286,111,333,26],[286,112,334,5],[286,114,335,4],[286,115,335,5],[286,116,335,6],[286,118,335,8,"innerProduct"],[286,130,335,20],[286,131,335,21,"e1"],[286,133,335,23],[286,135,335,25,"a1"],[286,137,335,27],[286,138,335,28],[286,140,335,30,"innerProduct"],[286,152,335,42],[286,153,335,43,"e1"],[286,155,335,45],[286,157,335,47,"a2"],[286,159,335,49],[286,160,335,50],[286,162,335,52,"innerProduct"],[286,174,335,64],[286,175,335,65,"e1"],[286,177,335,67],[286,179,335,69,"a3"],[286,181,335,71],[286,182,335,72],[286,183,335,73],[286,185,336,4],[286,186,336,5],[286,187,336,6],[286,189,336,8],[286,190,336,9],[286,192,336,11,"innerProduct"],[286,204,336,23],[286,205,336,24,"e2"],[286,207,336,26],[286,209,336,28,"a2"],[286,211,336,30],[286,212,336,31],[286,214,336,33,"innerProduct"],[286,226,336,45],[286,227,336,46,"e2"],[286,229,336,48],[286,231,336,50,"a3"],[286,233,336,52],[286,234,336,53],[286,235,336,54],[286,237,337,4],[286,238,337,5],[286,239,337,6],[286,241,337,8],[286,242,337,9],[286,244,337,11],[286,245,337,12],[286,247,337,14,"innerProduct"],[286,259,337,26],[286,260,337,27,"e3"],[286,262,337,29],[286,264,337,31,"a3"],[286,266,337,33],[286,267,337,34],[286,268,337,35],[286,269,338,3],[287,6,339,2],[287,13,339,9],[288,8,340,4,"rotationMatrix"],[288,22,340,18],[288,24,340,20,"transposeMatrix"],[288,39,340,35],[288,40,340,36,"rotationMatrix"],[288,54,340,50],[288,55,340,51],[289,8,341,4,"skewMatrix"],[289,18,341,14],[289,20,341,16,"transposeMatrix"],[289,35,341,31],[289,36,341,32,"skewMatrix"],[289,46,341,42],[290,6,342,2],[290,7,342,3],[291,4,343,0],[291,5,343,1],[292,4,343,1,"gramSchmidtAlgorithm"],[292,24,343,1],[292,25,343,1,"__closure"],[292,34,343,1],[293,6,343,1,"subtractVectors"],[293,21,343,1],[294,6,343,1,"projection"],[294,16,343,1],[295,6,343,1,"scaleVector"],[295,17,343,1],[296,6,343,1,"innerProduct"],[296,18,343,1],[297,6,343,1,"transposeMatrix"],[298,4,343,1],[299,4,343,1,"gramSchmidtAlgorithm"],[299,24,343,1],[299,25,343,1,"__workletHash"],[299,38,343,1],[300,4,343,1,"gramSchmidtAlgorithm"],[300,24,343,1],[300,25,343,1,"__initData"],[300,35,343,1],[300,38,343,1,"_worklet_827372645680_init_data"],[300,69,343,1],[301,4,343,1],[301,11,343,1,"gramSchmidtAlgorithm"],[301,31,343,1],[302,2,343,1],[302,3,293,0],[302,7,345,0],[303,2,345,0],[303,6,345,0,"_worklet_2076609522926_init_data"],[303,38,345,0],[304,4,345,0,"code"],[304,8,345,0],[305,2,345,0],[306,2,345,0],[306,6,345,0,"decomposeMatrix"],[306,21,345,0],[306,24,345,0,"exports"],[306,31,345,0],[306,32,345,0,"decomposeMatrix"],[306,47,345,0],[306,50,346,7],[307,4,346,7],[307,8,346,7,"decomposeMatrix"],[307,23,346,7],[307,35,346,7,"decomposeMatrix"],[307,36,347,2,"unknownTypeMatrix"],[307,53,347,52],[307,55,348,32],[308,6,350,2],[308,10,350,8,"matrix"],[308,16,350,14],[308,19,350,17,"maybeFlattenMatrix"],[308,37,350,35],[308,38,350,36,"unknownTypeMatrix"],[308,55,350,53],[308,56,350,54],[310,6,352,2],[311,6,353,2],[311,10,353,6,"matrix"],[311,16,353,12],[311,17,353,13],[311,19,353,15],[311,20,353,16],[311,25,353,21],[311,26,353,22],[311,28,353,24],[312,8,354,4],[312,14,354,10],[312,18,354,14,"ReanimatedError"],[312,41,354,29],[312,42,354,30],[312,69,354,57],[312,70,354,58],[313,6,355,2],[314,6,356,2,"matrix"],[314,12,356,8],[314,13,356,9,"forEach"],[314,20,356,16],[314,21,356,17],[314,22,356,18,"_"],[314,23,356,19],[314,25,356,21,"i"],[314,26,356,22],[314,31,356,28,"matrix"],[314,37,356,34],[314,38,356,35,"i"],[314,39,356,36],[314,40,356,37],[314,44,356,41,"matrix"],[314,50,356,47],[314,51,356,48],[314,53,356,50],[314,54,356,52],[314,55,356,53],[315,6,358,2],[315,10,358,8,"translationMatrix"],[315,27,358,39],[315,30,358,42],[315,31,359,4],[315,32,359,5],[315,33,359,6],[315,35,359,8],[315,36,359,9],[315,38,359,11],[315,39,359,12],[315,41,359,14],[315,42,359,15],[315,43,359,16],[315,45,360,4],[315,46,360,5],[315,47,360,6],[315,49,360,8],[315,50,360,9],[315,52,360,11],[315,53,360,12],[315,55,360,14],[315,56,360,15],[315,57,360,16],[315,59,361,4],[315,60,361,5],[315,61,361,6],[315,63,361,8],[315,64,361,9],[315,66,361,11],[315,67,361,12],[315,69,361,14],[315,70,361,15],[315,71,361,16],[315,73,362,4],[315,74,362,5,"matrix"],[315,80,362,11],[315,81,362,12],[315,83,362,14],[315,84,362,15],[315,86,362,17,"matrix"],[315,92,362,23],[315,93,362,24],[315,95,362,26],[315,96,362,27],[315,98,362,29,"matrix"],[315,104,362,35],[315,105,362,36],[315,107,362,38],[315,108,362,39],[315,110,362,41],[315,111,362,42],[315,112,362,43],[315,113,363,3],[316,6,364,2],[316,10,364,8,"sx"],[316,12,364,10],[316,15,364,13,"matrix"],[316,21,364,19],[316,22,364,20],[316,24,364,22],[316,25,364,23],[316,28,364,26,"norm3d"],[316,34,364,32],[316,35,364,33,"matrix"],[316,41,364,39],[316,42,364,40],[316,43,364,41],[316,44,364,42],[316,46,364,44,"matrix"],[316,52,364,50],[316,53,364,51],[316,54,364,52],[316,55,364,53],[316,57,364,55,"matrix"],[316,63,364,61],[316,64,364,62],[316,65,364,63],[316,66,364,64],[316,67,364,65],[317,6,365,2],[317,10,365,8,"sy"],[317,12,365,10],[317,15,365,13,"matrix"],[317,21,365,19],[317,22,365,20],[317,24,365,22],[317,25,365,23],[317,28,365,26,"norm3d"],[317,34,365,32],[317,35,365,33,"matrix"],[317,41,365,39],[317,42,365,40],[317,43,365,41],[317,44,365,42],[317,46,365,44,"matrix"],[317,52,365,50],[317,53,365,51],[317,54,365,52],[317,55,365,53],[317,57,365,55,"matrix"],[317,63,365,61],[317,64,365,62],[317,65,365,63],[317,66,365,64],[317,67,365,65],[318,6,366,2],[318,10,366,8,"sz"],[318,12,366,10],[318,15,366,13,"matrix"],[318,21,366,19],[318,22,366,20],[318,24,366,22],[318,25,366,23],[318,28,366,26,"norm3d"],[318,34,366,32],[318,35,366,33,"matrix"],[318,41,366,39],[318,42,366,40],[318,43,366,41],[318,44,366,42],[318,46,366,44,"matrix"],[318,52,366,50],[318,53,366,51],[318,54,366,52],[318,55,366,53],[318,57,366,55,"matrix"],[318,63,366,61],[318,64,366,62],[318,66,366,64],[318,67,366,65],[318,68,366,66],[320,6,368,2],[321,6,369,2],[321,10,369,8,"scaleMatrix"],[321,21,369,33],[321,24,369,36],[321,25,370,4],[321,26,370,5,"sx"],[321,28,370,7],[321,30,370,9],[321,31,370,10],[321,33,370,12],[321,34,370,13],[321,36,370,15],[321,37,370,16],[321,38,370,17],[321,40,371,4],[321,41,371,5],[321,42,371,6],[321,44,371,8,"sy"],[321,46,371,10],[321,48,371,12],[321,49,371,13],[321,51,371,15],[321,52,371,16],[321,53,371,17],[321,55,372,4],[321,56,372,5],[321,57,372,6],[321,59,372,8],[321,60,372,9],[321,62,372,11,"sz"],[321,64,372,13],[321,66,372,15],[321,67,372,16],[321,68,372,17],[321,70,373,4],[321,71,373,5],[321,72,373,6],[321,74,373,8],[321,75,373,9],[321,77,373,11],[321,78,373,12],[321,80,373,14],[321,81,373,15],[321,82,373,16],[321,83,374,3],[322,6,376,2],[322,10,376,8,"rotationAndSkewMatrix"],[322,31,376,43],[322,34,376,46],[322,35,377,4],[322,36,377,5,"matrix"],[322,42,377,11],[322,43,377,12],[322,44,377,13],[322,45,377,14],[322,48,377,17,"sx"],[322,50,377,19],[322,52,377,21,"matrix"],[322,58,377,27],[322,59,377,28],[322,60,377,29],[322,61,377,30],[322,64,377,33,"sx"],[322,66,377,35],[322,68,377,37,"matrix"],[322,74,377,43],[322,75,377,44],[322,76,377,45],[322,77,377,46],[322,80,377,49,"sx"],[322,82,377,51],[322,84,377,53],[322,85,377,54],[322,86,377,55],[322,88,378,4],[322,89,378,5,"matrix"],[322,95,378,11],[322,96,378,12],[322,97,378,13],[322,98,378,14],[322,101,378,17,"sy"],[322,103,378,19],[322,105,378,21,"matrix"],[322,111,378,27],[322,112,378,28],[322,113,378,29],[322,114,378,30],[322,117,378,33,"sy"],[322,119,378,35],[322,121,378,37,"matrix"],[322,127,378,43],[322,128,378,44],[322,129,378,45],[322,130,378,46],[322,133,378,49,"sy"],[322,135,378,51],[322,137,378,53],[322,138,378,54],[322,139,378,55],[322,141,379,4],[322,142,379,5,"matrix"],[322,148,379,11],[322,149,379,12],[322,150,379,13],[322,151,379,14],[322,154,379,17,"sz"],[322,156,379,19],[322,158,379,21,"matrix"],[322,164,379,27],[322,165,379,28],[322,166,379,29],[322,167,379,30],[322,170,379,33,"sz"],[322,172,379,35],[322,174,379,37,"matrix"],[322,180,379,43],[322,181,379,44],[322,183,379,46],[322,184,379,47],[322,187,379,50,"sz"],[322,189,379,52],[322,191,379,54],[322,192,379,55],[322,193,379,56],[322,195,380,4],[322,196,380,5],[322,197,380,6],[322,199,380,8],[322,200,380,9],[322,202,380,11],[322,203,380,12],[322,205,380,14],[322,206,380,15],[322,207,380,16],[322,208,381,3],[323,6,383,2],[323,10,383,2,"_gramSchmidtAlgorithm"],[323,31,383,2],[323,34,383,41,"gramSchmidtAlgorithm"],[323,54,383,61],[323,55,384,4,"rotationAndSkewMatrix"],[323,76,385,2],[323,77,385,3],[324,8,383,10,"rotationMatrix"],[324,22,383,24],[324,25,383,24,"_gramSchmidtAlgorithm"],[324,46,383,24],[324,47,383,10,"rotationMatrix"],[324,61,383,24],[325,8,383,26,"skewMatrix"],[325,18,383,36],[325,21,383,36,"_gramSchmidtAlgorithm"],[325,42,383,36],[325,43,383,26,"skewMatrix"],[325,53,383,36],[326,6,387,2],[326,13,387,9],[327,8,388,4,"translationMatrix"],[327,25,388,21],[328,8,389,4,"scaleMatrix"],[328,19,389,15],[329,8,390,4,"rotationMatrix"],[329,22,390,18],[330,8,391,4,"skewMatrix"],[331,6,392,2],[331,7,392,3],[332,4,393,0],[332,5,393,1],[333,4,393,1,"decomposeMatrix"],[333,19,393,1],[333,20,393,1,"__closure"],[333,29,393,1],[334,6,393,1,"maybeFlattenMatrix"],[334,24,393,1],[335,6,393,1,"norm3d"],[335,12,393,1],[336,6,393,1,"gramSchmidtAlgorithm"],[337,4,393,1],[338,4,393,1,"decomposeMatrix"],[338,19,393,1],[338,20,393,1,"__workletHash"],[338,33,393,1],[339,4,393,1,"decomposeMatrix"],[339,19,393,1],[339,20,393,1,"__initData"],[339,30,393,1],[339,33,393,1,"_worklet_2076609522926_init_data"],[339,65,393,1],[340,4,393,1],[340,11,393,1,"decomposeMatrix"],[340,26,393,1],[341,2,393,1],[341,3,346,7],[342,2,346,7],[342,6,346,7,"_worklet_14654446791686_init_data"],[342,39,346,7],[343,4,346,7,"code"],[343,8,346,7],[344,2,346,7],[345,2,346,7],[345,6,346,7,"decomposeMatrixIntoMatricesAndAngles"],[345,42,346,7],[345,45,346,7,"exports"],[345,52,346,7],[345,53,346,7,"decomposeMatrixIntoMatricesAndAngles"],[345,89,346,7],[345,92,395,7],[346,4,395,7],[346,8,395,7,"decomposeMatrixIntoMatricesAndAngles"],[346,44,395,7],[346,56,395,7,"decomposeMatrixIntoMatricesAndAngles"],[346,57,396,2,"matrix"],[346,63,396,41],[346,65,397,41],[347,6,399,2],[348,6,400,2],[348,10,400,2,"_decomposeMatrix"],[348,26,400,2],[348,29,401,4,"decomposeMatrix"],[348,44,401,19],[348,45,401,20,"matrix"],[348,51,401,26],[348,52,401,27],[349,8,400,10,"scaleMatrix"],[349,19,400,21],[349,22,400,21,"_decomposeMatrix"],[349,38,400,21],[349,39,400,10,"scaleMatrix"],[349,50,400,21],[350,8,400,23,"rotationMatrix"],[350,22,400,37],[350,25,400,37,"_decomposeMatrix"],[350,41,400,37],[350,42,400,23,"rotationMatrix"],[350,56,400,37],[351,8,400,39,"translationMatrix"],[351,25,400,56],[351,28,400,56,"_decomposeMatrix"],[351,44,400,56],[351,45,400,39,"translationMatrix"],[351,62,400,56],[352,8,400,58,"skewMatrix"],[352,18,400,68],[352,21,400,68,"_decomposeMatrix"],[352,37,400,68],[352,38,400,58,"skewMatrix"],[352,48,400,68],[353,6,403,2],[353,10,403,8,"sinRy"],[353,15,403,13],[353,18,403,16],[353,19,403,17,"rotationMatrix"],[353,33,403,31],[353,34,403,32],[353,35,403,33],[353,36,403,34],[353,37,403,35],[353,38,403,36],[353,39,403,37],[354,6,405,2],[354,10,405,8,"ry"],[354,12,405,10],[354,15,405,13,"Math"],[354,19,405,17],[354,20,405,18,"asin"],[354,24,405,22],[354,25,405,23,"sinRy"],[354,30,405,28],[354,31,405,29],[355,6,406,2],[355,10,406,6,"rx"],[355,12,406,8],[356,6,407,2],[356,10,407,6,"rz"],[356,12,407,8],[357,6,408,2],[357,10,408,6,"sinRy"],[357,15,408,11],[357,20,408,16],[357,21,408,17],[357,25,408,21,"sinRy"],[357,30,408,26],[357,37,408,33],[357,39,408,35],[358,8,409,4,"rz"],[358,10,409,6],[358,13,409,9],[358,14,409,10],[359,8,410,4,"rx"],[359,10,410,6],[359,13,410,9,"Math"],[359,17,410,13],[359,18,410,14,"atan2"],[359,23,410,19],[359,24,410,20,"sinRy"],[359,29,410,25],[359,32,410,28,"rotationMatrix"],[359,46,410,42],[359,47,410,43],[359,48,410,44],[359,49,410,45],[359,50,410,46],[359,51,410,47],[359,52,410,48],[359,54,410,50,"sinRy"],[359,59,410,55],[359,62,410,58,"rotationMatrix"],[359,76,410,72],[359,77,410,73],[359,78,410,74],[359,79,410,75],[359,80,410,76],[359,81,410,77],[359,82,410,78],[359,83,410,79],[360,6,411,2],[360,7,411,3],[360,13,411,9],[361,8,412,4,"rz"],[361,10,412,6],[361,13,412,9,"Math"],[361,17,412,13],[361,18,412,14,"atan2"],[361,23,412,19],[361,24,412,20,"rotationMatrix"],[361,38,412,34],[361,39,412,35],[361,40,412,36],[361,41,412,37],[361,42,412,38],[361,43,412,39],[361,44,412,40],[361,46,412,42,"rotationMatrix"],[361,60,412,56],[361,61,412,57],[361,62,412,58],[361,63,412,59],[361,64,412,60],[361,65,412,61],[361,66,412,62],[361,67,412,63],[362,8,413,4,"rx"],[362,10,413,6],[362,13,413,9,"Math"],[362,17,413,13],[362,18,413,14,"atan2"],[362,23,413,19],[362,24,413,20,"rotationMatrix"],[362,38,413,34],[362,39,413,35],[362,40,413,36],[362,41,413,37],[362,42,413,38],[362,43,413,39],[362,44,413,40],[362,46,413,42,"rotationMatrix"],[362,60,413,56],[362,61,413,57],[362,62,413,58],[362,63,413,59],[362,64,413,60],[362,65,413,61],[362,66,413,62],[362,67,413,63],[363,6,414,2],[364,6,416,2],[364,13,416,9],[365,8,417,4,"scaleMatrix"],[365,19,417,15],[366,8,418,4,"rotationMatrix"],[366,22,418,18],[367,8,419,4,"translationMatrix"],[367,25,419,21],[368,8,420,4,"skewMatrix"],[368,18,420,14],[369,8,421,4,"rx"],[369,10,421,6],[369,12,421,8,"rx"],[369,14,421,10],[369,18,421,14],[369,19,421,15],[370,8,422,4,"ry"],[370,10,422,6],[370,12,422,8,"ry"],[370,14,422,10],[370,18,422,14],[370,19,422,15],[371,8,423,4,"rz"],[371,10,423,6],[371,12,423,8,"rz"],[371,14,423,10],[371,18,423,14],[372,6,424,2],[372,7,424,3],[373,4,425,0],[373,5,425,1],[374,4,425,1,"decomposeMatrixIntoMatricesAndAngles"],[374,40,425,1],[374,41,425,1,"__closure"],[374,50,425,1],[375,6,425,1,"decomposeMatrix"],[376,4,425,1],[377,4,425,1,"decomposeMatrixIntoMatricesAndAngles"],[377,40,425,1],[377,41,425,1,"__workletHash"],[377,54,425,1],[378,4,425,1,"decomposeMatrixIntoMatricesAndAngles"],[378,40,425,1],[378,41,425,1,"__initData"],[378,51,425,1],[378,54,425,1,"_worklet_14654446791686_init_data"],[378,87,425,1],[379,4,425,1],[379,11,425,1,"decomposeMatrixIntoMatricesAndAngles"],[379,47,425,1],[380,2,425,1],[380,3,395,7],[381,0,395,7],[381,3]],"functionMap":{"names":["<global>","isAffineMatrixFlat","x.every$argument_0","isAffineMatrix","row.every$argument_0","flatten","unflatten","maybeFlattenMatrix","multiplyMatrices","subtractMatrices","a.map$argument_0","addMatrices","scaleMatrix","getRotationMatrix","norm3d","transposeMatrix","assertVectorsHaveEqualLengths","innerProduct","a.reduce$argument_0","projection","u.map$argument_0","subtractVectors","scaleVector","gramSchmidtAlgorithm","map$argument_0","decomposeMatrix","matrix.forEach$argument_0","decomposeMatrixIntoMatricesAndAngles"],"mappings":"AAA;OC+B;YCK,2DD;CDE;OGG;MDM;kBEG,2DF,CC;CHG;OKE;CLG;OMG;CNQ;AOE;CPK;OQE;CR2F;OSE;kBCS,qBD;CTE;OWE;kBDS,qBC;CXE;OYE;kBFQ,iBE;CZE;OaE;Cb8B;AcE;CdG;AeE;CfS;AgBE;ChBS;AiBE;kBCG,gCD;CjBC;AmBE;eCI,YD;CnBC;AqBE;eXG,qBW;CrBC;AsBE;eFE,YE;CtBC;AuBE;gDCwB;qDDC;CvByB;OyBG;iBCU,mCD;CzBqC;O2BE;C3B8B"}},"type":"js/module"}]}