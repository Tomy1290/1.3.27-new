{"dependencies":[{"name":"./isSharedValue","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":103},"end":{"line":7,"column":48,"index":151}}],"key":"4GvsAaNC2OU71XMPPfpzkxeW9tk=","exportNames":["*"]}},{"name":"./PlatformChecker","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":152},"end":{"line":8,"column":43,"index":195}}],"key":"O136KS8LvzB4pufOIvMCitL6KOc=","exportNames":["*"]}},{"name":"./threads","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":196},"end":{"line":9,"column":36,"index":232}}],"key":"ZuB0ICrjKM3htfPQkuonl9kPByQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.startMapper = startMapper;\n  exports.stopMapper = stopMapper;\n  var _isSharedValue = require(_dependencyMap[0]);\n  var _PlatformChecker = require(_dependencyMap[1]);\n  var _threads = require(_dependencyMap[2]);\n  var IS_JEST = (0, _PlatformChecker.isJest)();\n  var _worklet_6094846488348_init_data = {\n    code: \"function createMapperRegistry_reactNativeReanimated_mappersTs1(){const{IS_JEST,isSharedValue}=this.__closure;const mappers=new Map();let sortedMappers=[];let runRequested=false;let processingMappers=false;function updateMappersOrder(){const pre=new Map();mappers.forEach(function(mapper){if(mapper.outputs){for(const output of mapper.outputs){const preMappers=pre.get(output);if(preMappers===undefined){pre.set(output,[mapper]);}else{preMappers.push(mapper);}}}});const visited=new Set();const newOrder=[];function dfs(mapper){visited.add(mapper);for(const input of mapper.inputs){const preMappers=pre.get(input);if(preMappers){for(const preMapper of preMappers){if(!visited.has(preMapper)){dfs(preMapper);}}}}newOrder.push(mapper);}mappers.forEach(function(mapper){if(!visited.has(mapper)){dfs(mapper);}});sortedMappers=newOrder;}function mapperRun(){runRequested=false;if(processingMappers){return;}try{processingMappers=true;if(mappers.size!==sortedMappers.length){updateMappersOrder();}for(const mapper of sortedMappers){if(mapper.dirty){mapper.dirty=false;mapper.worklet();}}}finally{processingMappers=false;}}function maybeRequestUpdates(){if(IS_JEST){mapperRun();}else if(!runRequested){if(processingMappers){requestAnimationFrame(mapperRun);}else{queueMicrotask(mapperRun);}runRequested=true;}}function extractInputs(inputs,resultArray){if(Array.isArray(inputs)){for(const input of inputs){input&&extractInputs(input,resultArray);}}else if(isSharedValue(inputs)){resultArray.push(inputs);}else if(Object.getPrototypeOf(inputs)===Object.prototype){for(const element of Object.values(inputs)){element&&extractInputs(element,resultArray);}}return resultArray;}return{start:function(mapperID,worklet,inputs,outputs){const mapper={id:mapperID,dirty:true,worklet:worklet,inputs:extractInputs(inputs,[]),outputs:outputs};mappers.set(mapper.id,mapper);sortedMappers=[];for(const sv of mapper.inputs){sv.addListener(mapper.id,function(){mapper.dirty=true;maybeRequestUpdates();});}maybeRequestUpdates();},stop:function(mapperID){const mapper=mappers.get(mapperID);if(mapper){mappers.delete(mapper.id);sortedMappers=[];for(const sv of mapper.inputs){sv.removeListener(mapper.id);}}}};}\"\n  };\n  var createMapperRegistry = function () {\n    var createMapperRegistry = function () {\n      var mappers = new Map();\n      var sortedMappers = [];\n      var runRequested = false;\n      var processingMappers = false;\n      function updateMappersOrder() {\n        // sort mappers topologically\n        // the algorithm here takes adventage of a fact that the topological order\n        // of a transposed graph is a reverse topological order of the original graph\n        // The graph in our case consists of mappers and an edge between two mappers\n        // A and B exists if there is a shared value that's on A's output lists and on\n        // B's input list.\n        //\n        // We don't need however to calculate that graph as it is easier to work with\n        // the transposed version of it that can be calculated ad-hoc. For the transposed\n        // version to be traversed we use \"pre\" map that maps share value to mappers that\n        // output that shared value. Then we can infer all the outgoing edges for a given\n        // mapper simply by scanning it's input list and checking if any of the shared values\n        // from that list exists in the \"pre\" map. If they do, then we have an edge between\n        // that mapper and the mappers from the \"pre\" list for the given shared value.\n        //\n        // For topological sorting we use a dfs-based approach that requires the graph to\n        // be traversed in dfs order and each node after being processed lands at the\n        // beginning of the topological order list. Since we traverse a transposed graph,\n        // instead of reversing that order we can use a normal array and push processed\n        // mappers to the end. There is no need to reverse that array after we are done.\n        var pre = new Map(); // map from sv -> mapper that outputs that sv\n        mappers.forEach(mapper => {\n          if (mapper.outputs) {\n            for (var output of mapper.outputs) {\n              var preMappers = pre.get(output);\n              if (preMappers === undefined) {\n                pre.set(output, [mapper]);\n              } else {\n                preMappers.push(mapper);\n              }\n            }\n          }\n        });\n        var visited = new Set();\n        var newOrder = [];\n        function dfs(mapper) {\n          visited.add(mapper);\n          for (var input of mapper.inputs) {\n            var preMappers = pre.get(input);\n            if (preMappers) {\n              for (var preMapper of preMappers) {\n                if (!visited.has(preMapper)) {\n                  dfs(preMapper);\n                }\n              }\n            }\n          }\n          newOrder.push(mapper);\n        }\n        mappers.forEach(mapper => {\n          if (!visited.has(mapper)) {\n            dfs(mapper);\n          }\n        });\n        sortedMappers = newOrder;\n      }\n      function mapperRun() {\n        runRequested = false;\n        if (processingMappers) {\n          return;\n        }\n        try {\n          processingMappers = true;\n          if (mappers.size !== sortedMappers.length) {\n            updateMappersOrder();\n          }\n          for (var mapper of sortedMappers) {\n            if (mapper.dirty) {\n              mapper.dirty = false;\n              mapper.worklet();\n            }\n          }\n        } finally {\n          processingMappers = false;\n        }\n      }\n      function maybeRequestUpdates() {\n        if (IS_JEST) {\n          // On Jest environment we avoid using queueMicrotask as that'd require test\n          // to advance the clock manually. This on other hand would require tests\n          // to know how many times mappers need to run. As we don't want tests to\n          // make any assumptions on that number it is easier to execute mappers\n          // immediately for testing purposes and only expect test to advance timers\n          // if they want to make any assertions on the effects of animations being run.\n          mapperRun();\n        } else if (!runRequested) {\n          if (processingMappers) {\n            // In general, we should avoid having mappers trigger updates as this may\n            // result in unpredictable behavior. Specifically, the updated value can\n            // be read by mappers that run later in the same frame but previous mappers\n            // would access the old value. Updating mappers during the mapper-run phase\n            // breaks the order in which we should execute the mappers. However, doing\n            // that is still a possibility and there are some instances where people use\n            // the API in that way, hence we need to prevent mapper-run phase falling into\n            // an infinite loop. We do that by detecting when mapper-run is requested while\n            // we are already in mapper-run phase, and in that case we use `requestAnimationFrame`\n            // instead of `queueMicrotask` which will schedule mapper run for the next\n            // frame instead of queuing another set of updates in the same frame.\n            requestAnimationFrame(mapperRun);\n          } else {\n            queueMicrotask(mapperRun);\n          }\n          runRequested = true;\n        }\n      }\n      function extractInputs(inputs, resultArray) {\n        if (Array.isArray(inputs)) {\n          for (var input of inputs) {\n            input && extractInputs(input, resultArray);\n          }\n        } else if ((0, _isSharedValue.isSharedValue)(inputs)) {\n          resultArray.push(inputs);\n        } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n          // we only extract inputs recursively from \"plain\" objects here, if object\n          // is of a derivative class (e.g. HostObject on web, or Map) we don't scan\n          // it recursively\n          for (var element of Object.values(inputs)) {\n            element && extractInputs(element, resultArray);\n          }\n        }\n        return resultArray;\n      }\n      return {\n        start: (mapperID, worklet, inputs, outputs) => {\n          var mapper = {\n            id: mapperID,\n            dirty: true,\n            worklet,\n            inputs: extractInputs(inputs, []),\n            outputs\n          };\n          mappers.set(mapper.id, mapper);\n          sortedMappers = [];\n          for (var sv of mapper.inputs) {\n            sv.addListener(mapper.id, () => {\n              mapper.dirty = true;\n              maybeRequestUpdates();\n            });\n          }\n          maybeRequestUpdates();\n        },\n        stop: mapperID => {\n          var mapper = mappers.get(mapperID);\n          if (mapper) {\n            mappers.delete(mapper.id);\n            sortedMappers = [];\n            for (var sv of mapper.inputs) {\n              sv.removeListener(mapper.id);\n            }\n          }\n        }\n      };\n    };\n    createMapperRegistry.__closure = {\n      IS_JEST,\n      isSharedValue: _isSharedValue.isSharedValue\n    };\n    createMapperRegistry.__workletHash = 6094846488348;\n    createMapperRegistry.__initData = _worklet_6094846488348_init_data;\n    return createMapperRegistry;\n  }();\n  var MAPPER_ID = 9999;\n  var _worklet_9660765174658_init_data = {\n    code: \"function reactNativeReanimated_mappersTs2(){const{createMapperRegistry,mapperID,worklet,inputs,outputs}=this.__closure;let mapperRegistry=global.__mapperRegistry;if(mapperRegistry===undefined){mapperRegistry=global.__mapperRegistry=createMapperRegistry();}mapperRegistry.start(mapperID,worklet,inputs,outputs);}\"\n  };\n  function startMapper(worklet) {\n    var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var mapperID = MAPPER_ID += 1;\n    (0, _threads.runOnUI)(function () {\n      var reactNativeReanimated_mappersTs2 = function () {\n        var mapperRegistry = global.__mapperRegistry;\n        if (mapperRegistry === undefined) {\n          mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n        }\n        mapperRegistry.start(mapperID, worklet, inputs, outputs);\n      };\n      reactNativeReanimated_mappersTs2.__closure = {\n        createMapperRegistry,\n        mapperID,\n        worklet,\n        inputs,\n        outputs\n      };\n      reactNativeReanimated_mappersTs2.__workletHash = 9660765174658;\n      reactNativeReanimated_mappersTs2.__initData = _worklet_9660765174658_init_data;\n      return reactNativeReanimated_mappersTs2;\n    }())();\n    return mapperID;\n  }\n  var _worklet_7172044021294_init_data = {\n    code: \"function reactNativeReanimated_mappersTs3(){const{mapperID}=this.__closure;const mapperRegistry=global.__mapperRegistry;mapperRegistry===null||mapperRegistry===void 0||mapperRegistry.stop(mapperID);}\"\n  };\n  function stopMapper(mapperID) {\n    (0, _threads.runOnUI)(function () {\n      var reactNativeReanimated_mappersTs3 = function () {\n        var mapperRegistry = global.__mapperRegistry;\n        mapperRegistry?.stop(mapperID);\n      };\n      reactNativeReanimated_mappersTs3.__closure = {\n        mapperID\n      };\n      reactNativeReanimated_mappersTs3.__workletHash = 7172044021294;\n      reactNativeReanimated_mappersTs3.__initData = _worklet_7172044021294_init_data;\n      return reactNativeReanimated_mappersTs3;\n    }())();\n  }\n});","lineCount":230,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"startMapper"],[7,21,1,13],[7,24,1,13,"startMapper"],[7,35,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"stopMapper"],[8,20,1,13],[8,23,1,13,"stopMapper"],[8,33,1,13],[9,2,7,0],[9,6,7,0,"_isSharedValue"],[9,20,7,0],[9,23,7,0,"require"],[9,30,7,0],[9,31,7,0,"_dependencyMap"],[9,45,7,0],[10,2,8,0],[10,6,8,0,"_PlatformChecker"],[10,22,8,0],[10,25,8,0,"require"],[10,32,8,0],[10,33,8,0,"_dependencyMap"],[10,47,8,0],[11,2,9,0],[11,6,9,0,"_threads"],[11,14,9,0],[11,17,9,0,"require"],[11,24,9,0],[11,25,9,0,"_dependencyMap"],[11,39,9,0],[12,2,11,0],[12,6,11,6,"IS_JEST"],[12,13,11,13],[12,16,11,16],[12,20,11,16,"isJest"],[12,43,11,22],[12,45,11,23],[12,46,11,24],[13,2,11,25],[13,6,11,25,"_worklet_6094846488348_init_data"],[13,38,11,25],[14,4,11,25,"code"],[14,8,11,25],[15,2,11,25],[16,2,11,25],[16,6,11,25,"createMapperRegistry"],[16,26,11,25],[16,29,23,0],[17,4,23,0],[17,8,23,0,"createMapperRegistry"],[17,28,23,0],[17,40,23,0,"createMapperRegistry"],[17,41,23,0],[17,43,23,32],[18,6,25,2],[18,10,25,8,"mappers"],[18,17,25,15],[18,20,25,18],[18,24,25,22,"Map"],[18,27,25,25],[18,28,25,42],[18,29,25,43],[19,6,26,2],[19,10,26,6,"sortedMappers"],[19,23,26,29],[19,26,26,32],[19,28,26,34],[20,6,28,2],[20,10,28,6,"runRequested"],[20,22,28,18],[20,25,28,21],[20,30,28,26],[21,6,29,2],[21,10,29,6,"processingMappers"],[21,27,29,23],[21,30,29,26],[21,35,29,31],[22,6,31,2],[22,15,31,11,"updateMappersOrder"],[22,33,31,29,"updateMappersOrder"],[22,34,31,29],[22,36,31,32],[23,8,32,4],[24,8,33,4],[25,8,34,4],[26,8,35,4],[27,8,36,4],[28,8,37,4],[29,8,38,4],[30,8,39,4],[31,8,40,4],[32,8,41,4],[33,8,42,4],[34,8,43,4],[35,8,44,4],[36,8,45,4],[37,8,46,4],[38,8,47,4],[39,8,48,4],[40,8,49,4],[41,8,50,4],[42,8,51,4],[43,8,52,4],[43,12,52,10,"pre"],[43,15,52,13],[43,18,52,16],[43,22,52,20,"Map"],[43,25,52,23],[43,26,52,24],[43,27,52,25],[43,28,52,26],[43,29,52,27],[44,8,53,4,"mappers"],[44,15,53,11],[44,16,53,12,"forEach"],[44,23,53,19],[44,24,53,21,"mapper"],[44,30,53,27],[44,34,53,32],[45,10,54,6],[45,14,54,10,"mapper"],[45,20,54,16],[45,21,54,17,"outputs"],[45,28,54,24],[45,30,54,26],[46,12,55,8],[46,17,55,13],[46,21,55,19,"output"],[46,27,55,25],[46,31,55,29,"mapper"],[46,37,55,35],[46,38,55,36,"outputs"],[46,45,55,43],[46,47,55,45],[47,14,56,10],[47,18,56,16,"preMappers"],[47,28,56,26],[47,31,56,29,"pre"],[47,34,56,32],[47,35,56,33,"get"],[47,38,56,36],[47,39,56,37,"output"],[47,45,56,43],[47,46,56,44],[48,14,57,10],[48,18,57,14,"preMappers"],[48,28,57,24],[48,33,57,29,"undefined"],[48,42,57,38],[48,44,57,40],[49,16,58,12,"pre"],[49,19,58,15],[49,20,58,16,"set"],[49,23,58,19],[49,24,58,20,"output"],[49,30,58,26],[49,32,58,28],[49,33,58,29,"mapper"],[49,39,58,35],[49,40,58,36],[49,41,58,37],[50,14,59,10],[50,15,59,11],[50,21,59,17],[51,16,60,12,"preMappers"],[51,26,60,22],[51,27,60,23,"push"],[51,31,60,27],[51,32,60,28,"mapper"],[51,38,60,34],[51,39,60,35],[52,14,61,10],[53,12,62,8],[54,10,63,6],[55,8,64,4],[55,9,64,5],[55,10,64,6],[56,8,65,4],[56,12,65,10,"visited"],[56,19,65,17],[56,22,65,20],[56,26,65,24,"Set"],[56,29,65,27],[56,30,65,28],[56,31,65,29],[57,8,66,4],[57,12,66,10,"newOrder"],[57,20,66,28],[57,23,66,31],[57,25,66,33],[58,8,67,4],[58,17,67,13,"dfs"],[58,20,67,16,"dfs"],[58,21,67,17,"mapper"],[58,27,67,31],[58,29,67,33],[59,10,68,6,"visited"],[59,17,68,13],[59,18,68,14,"add"],[59,21,68,17],[59,22,68,18,"mapper"],[59,28,68,24],[59,29,68,25],[60,10,69,6],[60,15,69,11],[60,19,69,17,"input"],[60,24,69,22],[60,28,69,26,"mapper"],[60,34,69,32],[60,35,69,33,"inputs"],[60,41,69,39],[60,43,69,41],[61,12,70,8],[61,16,70,14,"preMappers"],[61,26,70,24],[61,29,70,27,"pre"],[61,32,70,30],[61,33,70,31,"get"],[61,36,70,34],[61,37,70,35,"input"],[61,42,70,40],[61,43,70,41],[62,12,71,8],[62,16,71,12,"preMappers"],[62,26,71,22],[62,28,71,24],[63,14,72,10],[63,19,72,15],[63,23,72,21,"preMapper"],[63,32,72,30],[63,36,72,34,"preMappers"],[63,46,72,44],[63,48,72,46],[64,16,73,12],[64,20,73,16],[64,21,73,17,"visited"],[64,28,73,24],[64,29,73,25,"has"],[64,32,73,28],[64,33,73,29,"preMapper"],[64,42,73,38],[64,43,73,39],[64,45,73,41],[65,18,74,14,"dfs"],[65,21,74,17],[65,22,74,18,"preMapper"],[65,31,74,27],[65,32,74,28],[66,16,75,12],[67,14,76,10],[68,12,77,8],[69,10,78,6],[70,10,79,6,"newOrder"],[70,18,79,14],[70,19,79,15,"push"],[70,23,79,19],[70,24,79,20,"mapper"],[70,30,79,26],[70,31,79,27],[71,8,80,4],[72,8,81,4,"mappers"],[72,15,81,11],[72,16,81,12,"forEach"],[72,23,81,19],[72,24,81,21,"mapper"],[72,30,81,27],[72,34,81,32],[73,10,82,6],[73,14,82,10],[73,15,82,11,"visited"],[73,22,82,18],[73,23,82,19,"has"],[73,26,82,22],[73,27,82,23,"mapper"],[73,33,82,29],[73,34,82,30],[73,36,82,32],[74,12,83,8,"dfs"],[74,15,83,11],[74,16,83,12,"mapper"],[74,22,83,18],[74,23,83,19],[75,10,84,6],[76,8,85,4],[76,9,85,5],[76,10,85,6],[77,8,86,4,"sortedMappers"],[77,21,86,17],[77,24,86,20,"newOrder"],[77,32,86,28],[78,6,87,2],[79,6,89,2],[79,15,89,11,"mapperRun"],[79,24,89,20,"mapperRun"],[79,25,89,20],[79,27,89,23],[80,8,90,4,"runRequested"],[80,20,90,16],[80,23,90,19],[80,28,90,24],[81,8,91,4],[81,12,91,8,"processingMappers"],[81,29,91,25],[81,31,91,27],[82,10,92,6],[83,8,93,4],[84,8,94,4],[84,12,94,8],[85,10,95,6,"processingMappers"],[85,27,95,23],[85,30,95,26],[85,34,95,30],[86,10,96,6],[86,14,96,10,"mappers"],[86,21,96,17],[86,22,96,18,"size"],[86,26,96,22],[86,31,96,27,"sortedMappers"],[86,44,96,40],[86,45,96,41,"length"],[86,51,96,47],[86,53,96,49],[87,12,97,8,"updateMappersOrder"],[87,30,97,26],[87,31,97,27],[87,32,97,28],[88,10,98,6],[89,10,99,6],[89,15,99,11],[89,19,99,17,"mapper"],[89,25,99,23],[89,29,99,27,"sortedMappers"],[89,42,99,40],[89,44,99,42],[90,12,100,8],[90,16,100,12,"mapper"],[90,22,100,18],[90,23,100,19,"dirty"],[90,28,100,24],[90,30,100,26],[91,14,101,10,"mapper"],[91,20,101,16],[91,21,101,17,"dirty"],[91,26,101,22],[91,29,101,25],[91,34,101,30],[92,14,102,10,"mapper"],[92,20,102,16],[92,21,102,17,"worklet"],[92,28,102,24],[92,29,102,25],[92,30,102,26],[93,12,103,8],[94,10,104,6],[95,8,105,4],[95,9,105,5],[95,18,105,14],[96,10,106,6,"processingMappers"],[96,27,106,23],[96,30,106,26],[96,35,106,31],[97,8,107,4],[98,6,108,2],[99,6,110,2],[99,15,110,11,"maybeRequestUpdates"],[99,34,110,30,"maybeRequestUpdates"],[99,35,110,30],[99,37,110,33],[100,8,111,4],[100,12,111,8,"IS_JEST"],[100,19,111,15],[100,21,111,17],[101,10,112,6],[102,10,113,6],[103,10,114,6],[104,10,115,6],[105,10,116,6],[106,10,117,6],[107,10,118,6,"mapperRun"],[107,19,118,15],[107,20,118,16],[107,21,118,17],[108,8,119,4],[108,9,119,5],[108,15,119,11],[108,19,119,15],[108,20,119,16,"runRequested"],[108,32,119,28],[108,34,119,30],[109,10,120,6],[109,14,120,10,"processingMappers"],[109,31,120,27],[109,33,120,29],[110,12,121,8],[111,12,122,8],[112,12,123,8],[113,12,124,8],[114,12,125,8],[115,12,126,8],[116,12,127,8],[117,12,128,8],[118,12,129,8],[119,12,130,8],[120,12,131,8],[121,12,132,8,"requestAnimationFrame"],[121,33,132,29],[121,34,132,30,"mapperRun"],[121,43,132,39],[121,44,132,40],[122,10,133,6],[122,11,133,7],[122,17,133,13],[123,12,134,8,"queueMicrotask"],[123,26,134,22],[123,27,134,23,"mapperRun"],[123,36,134,32],[123,37,134,33],[124,10,135,6],[125,10,136,6,"runRequested"],[125,22,136,18],[125,25,136,21],[125,29,136,25],[126,8,137,4],[127,6,138,2],[128,6,140,2],[128,15,140,11,"extractInputs"],[128,28,140,24,"extractInputs"],[128,29,141,4,"inputs"],[128,35,141,19],[128,37,142,4,"resultArray"],[128,48,142,38],[128,50,143,27],[129,8,144,4],[129,12,144,8,"Array"],[129,17,144,13],[129,18,144,14,"isArray"],[129,25,144,21],[129,26,144,22,"inputs"],[129,32,144,28],[129,33,144,29],[129,35,144,31],[130,10,145,6],[130,15,145,11],[130,19,145,17,"input"],[130,24,145,22],[130,28,145,26,"inputs"],[130,34,145,32],[130,36,145,34],[131,12,146,8,"input"],[131,17,146,13],[131,21,146,17,"extractInputs"],[131,34,146,30],[131,35,146,31,"input"],[131,40,146,36],[131,42,146,38,"resultArray"],[131,53,146,49],[131,54,146,50],[132,10,147,6],[133,8,148,4],[133,9,148,5],[133,15,148,11],[133,19,148,15],[133,23,148,15,"isSharedValue"],[133,51,148,28],[133,53,148,29,"inputs"],[133,59,148,35],[133,60,148,36],[133,62,148,38],[134,10,149,6,"resultArray"],[134,21,149,17],[134,22,149,18,"push"],[134,26,149,22],[134,27,149,23,"inputs"],[134,33,149,29],[134,34,149,30],[135,8,150,4],[135,9,150,5],[135,15,150,11],[135,19,150,15,"Object"],[135,25,150,21],[135,26,150,22,"getPrototypeOf"],[135,40,150,36],[135,41,150,37,"inputs"],[135,47,150,43],[135,48,150,44],[135,53,150,49,"Object"],[135,59,150,55],[135,60,150,56,"prototype"],[135,69,150,65],[135,71,150,67],[136,10,151,6],[137,10,152,6],[138,10,153,6],[139,10,154,6],[139,15,154,11],[139,19,154,17,"element"],[139,26,154,24],[139,30,154,28,"Object"],[139,36,154,34],[139,37,154,35,"values"],[139,43,154,41],[139,44,154,42,"inputs"],[139,50,154,75],[139,51,154,76],[139,53,154,78],[140,12,155,8,"element"],[140,19,155,15],[140,23,155,19,"extractInputs"],[140,36,155,32],[140,37,155,33,"element"],[140,44,155,40],[140,46,155,42,"resultArray"],[140,57,155,53],[140,58,155,54],[141,10,156,6],[142,8,157,4],[143,8,158,4],[143,15,158,11,"resultArray"],[143,26,158,22],[144,6,159,2],[145,6,161,2],[145,13,161,9],[146,8,162,4,"start"],[146,13,162,9],[146,15,162,11,"start"],[146,16,163,6,"mapperID"],[146,24,163,22],[146,26,164,6,"worklet"],[146,33,164,25],[146,35,165,6,"inputs"],[146,41,165,29],[146,43,166,6,"outputs"],[146,50,166,29],[146,55,167,9],[147,10,168,6],[147,14,168,12,"mapper"],[147,20,168,26],[147,23,168,29],[148,12,169,8,"id"],[148,14,169,10],[148,16,169,12,"mapperID"],[148,24,169,20],[149,12,170,8,"dirty"],[149,17,170,13],[149,19,170,15],[149,23,170,19],[150,12,171,8,"worklet"],[150,19,171,15],[151,12,172,8,"inputs"],[151,18,172,14],[151,20,172,16,"extractInputs"],[151,33,172,29],[151,34,172,30,"inputs"],[151,40,172,36],[151,42,172,38],[151,44,172,40],[151,45,172,41],[152,12,173,8,"outputs"],[153,10,174,6],[153,11,174,7],[154,10,175,6,"mappers"],[154,17,175,13],[154,18,175,14,"set"],[154,21,175,17],[154,22,175,18,"mapper"],[154,28,175,24],[154,29,175,25,"id"],[154,31,175,27],[154,33,175,29,"mapper"],[154,39,175,35],[154,40,175,36],[155,10,176,6,"sortedMappers"],[155,23,176,19],[155,26,176,22],[155,28,176,24],[156,10,177,6],[156,15,177,11],[156,19,177,17,"sv"],[156,21,177,19],[156,25,177,23,"mapper"],[156,31,177,29],[156,32,177,30,"inputs"],[156,38,177,36],[156,40,177,38],[157,12,178,8,"sv"],[157,14,178,10],[157,15,178,11,"addListener"],[157,26,178,22],[157,27,178,23,"mapper"],[157,33,178,29],[157,34,178,30,"id"],[157,36,178,32],[157,38,178,34],[157,44,178,40],[158,14,179,10,"mapper"],[158,20,179,16],[158,21,179,17,"dirty"],[158,26,179,22],[158,29,179,25],[158,33,179,29],[159,14,180,10,"maybeRequestUpdates"],[159,33,180,29],[159,34,180,30],[159,35,180,31],[160,12,181,8],[160,13,181,9],[160,14,181,10],[161,10,182,6],[162,10,183,6,"maybeRequestUpdates"],[162,29,183,25],[162,30,183,26],[162,31,183,27],[163,8,184,4],[163,9,184,5],[164,8,185,4,"stop"],[164,12,185,8],[164,14,185,11,"mapperID"],[164,22,185,27],[164,26,185,32],[165,10,186,6],[165,14,186,12,"mapper"],[165,20,186,18],[165,23,186,21,"mappers"],[165,30,186,28],[165,31,186,29,"get"],[165,34,186,32],[165,35,186,33,"mapperID"],[165,43,186,41],[165,44,186,42],[166,10,187,6],[166,14,187,10,"mapper"],[166,20,187,16],[166,22,187,18],[167,12,188,8,"mappers"],[167,19,188,15],[167,20,188,16,"delete"],[167,26,188,22],[167,27,188,23,"mapper"],[167,33,188,29],[167,34,188,30,"id"],[167,36,188,32],[167,37,188,33],[168,12,189,8,"sortedMappers"],[168,25,189,21],[168,28,189,24],[168,30,189,26],[169,12,190,8],[169,17,190,13],[169,21,190,19,"sv"],[169,23,190,21],[169,27,190,25,"mapper"],[169,33,190,31],[169,34,190,32,"inputs"],[169,40,190,38],[169,42,190,40],[170,14,191,10,"sv"],[170,16,191,12],[170,17,191,13,"removeListener"],[170,31,191,27],[170,32,191,28,"mapper"],[170,38,191,34],[170,39,191,35,"id"],[170,41,191,37],[170,42,191,38],[171,12,192,8],[172,10,193,6],[173,8,194,4],[174,6,195,2],[174,7,195,3],[175,4,196,0],[175,5,196,1],[176,4,196,1,"createMapperRegistry"],[176,24,196,1],[176,25,196,1,"__closure"],[176,34,196,1],[177,6,196,1,"IS_JEST"],[177,13,196,1],[178,6,196,1,"isSharedValue"],[178,19,196,1],[178,21,148,15,"isSharedValue"],[179,4,148,28],[180,4,148,28,"createMapperRegistry"],[180,24,148,28],[180,25,148,28,"__workletHash"],[180,38,148,28],[181,4,148,28,"createMapperRegistry"],[181,24,148,28],[181,25,148,28,"__initData"],[181,35,148,28],[181,38,148,28,"_worklet_6094846488348_init_data"],[181,70,148,28],[182,4,148,28],[182,11,148,28,"createMapperRegistry"],[182,31,148,28],[183,2,148,28],[183,3,23,0],[184,2,198,0],[184,6,198,4,"MAPPER_ID"],[184,15,198,13],[184,18,198,16],[184,22,198,20],[185,2,198,21],[185,6,198,21,"_worklet_9660765174658_init_data"],[185,38,198,21],[186,4,198,21,"code"],[186,8,198,21],[187,2,198,21],[188,2,200,7],[188,11,200,16,"startMapper"],[188,22,200,27,"startMapper"],[188,23,201,2,"worklet"],[188,30,201,21],[188,32,204,10],[189,4,204,10],[189,8,202,2,"inputs"],[189,14,202,25],[189,17,202,25,"arguments"],[189,26,202,25],[189,27,202,25,"length"],[189,33,202,25],[189,41,202,25,"arguments"],[189,50,202,25],[189,58,202,25,"undefined"],[189,67,202,25],[189,70,202,25,"arguments"],[189,79,202,25],[189,85,202,28],[189,87,202,30],[190,4,202,30],[190,8,203,2,"outputs"],[190,15,203,24],[190,18,203,24,"arguments"],[190,27,203,24],[190,28,203,24,"length"],[190,34,203,24],[190,42,203,24,"arguments"],[190,51,203,24],[190,59,203,24,"undefined"],[190,68,203,24],[190,71,203,24,"arguments"],[190,80,203,24],[190,86,203,27],[190,88,203,29],[191,4,205,2],[191,8,205,8,"mapperID"],[191,16,205,16],[191,19,205,20,"MAPPER_ID"],[191,28,205,29],[191,32,205,33],[191,33,205,35],[192,4,207,2],[192,8,207,2,"runOnUI"],[192,24,207,9],[192,26,207,10],[193,6,207,10],[193,10,207,10,"reactNativeReanimated_mappersTs2"],[193,42,207,10],[193,54,207,10,"reactNativeReanimated_mappersTs2"],[193,55,207,10],[193,57,207,16],[194,8,208,4],[194,12,208,8,"mapperRegistry"],[194,26,208,22],[194,29,208,25,"global"],[194,35,208,31],[194,36,208,32,"__mapperRegistry"],[194,52,208,48],[195,8,209,4],[195,12,209,8,"mapperRegistry"],[195,26,209,22],[195,31,209,27,"undefined"],[195,40,209,36],[195,42,209,38],[196,10,210,6,"mapperRegistry"],[196,24,210,20],[196,27,210,23,"global"],[196,33,210,29],[196,34,210,30,"__mapperRegistry"],[196,50,210,46],[196,53,210,49,"createMapperRegistry"],[196,73,210,69],[196,74,210,70],[196,75,210,71],[197,8,211,4],[198,8,212,4,"mapperRegistry"],[198,22,212,18],[198,23,212,19,"start"],[198,28,212,24],[198,29,212,25,"mapperID"],[198,37,212,33],[198,39,212,35,"worklet"],[198,46,212,42],[198,48,212,44,"inputs"],[198,54,212,50],[198,56,212,52,"outputs"],[198,63,212,59],[198,64,212,60],[199,6,213,2],[199,7,213,3],[200,6,213,3,"reactNativeReanimated_mappersTs2"],[200,38,213,3],[200,39,213,3,"__closure"],[200,48,213,3],[201,8,213,3,"createMapperRegistry"],[201,28,213,3],[202,8,213,3,"mapperID"],[202,16,213,3],[203,8,213,3,"worklet"],[203,15,213,3],[204,8,213,3,"inputs"],[204,14,213,3],[205,8,213,3,"outputs"],[206,6,213,3],[207,6,213,3,"reactNativeReanimated_mappersTs2"],[207,38,213,3],[207,39,213,3,"__workletHash"],[207,52,213,3],[208,6,213,3,"reactNativeReanimated_mappersTs2"],[208,38,213,3],[208,39,213,3,"__initData"],[208,49,213,3],[208,52,213,3,"_worklet_9660765174658_init_data"],[208,84,213,3],[209,6,213,3],[209,13,213,3,"reactNativeReanimated_mappersTs2"],[209,45,213,3],[210,4,213,3],[210,5,207,10],[210,7,213,3],[210,8,213,4],[210,9,213,5],[210,10,213,6],[211,4,215,2],[211,11,215,9,"mapperID"],[211,19,215,17],[212,2,216,0],[213,2,216,1],[213,6,216,1,"_worklet_7172044021294_init_data"],[213,38,216,1],[214,4,216,1,"code"],[214,8,216,1],[215,2,216,1],[216,2,218,7],[216,11,218,16,"stopMapper"],[216,21,218,26,"stopMapper"],[216,22,218,27,"mapperID"],[216,30,218,43],[216,32,218,51],[217,4,219,2],[217,8,219,2,"runOnUI"],[217,24,219,9],[217,26,219,10],[218,6,219,10],[218,10,219,10,"reactNativeReanimated_mappersTs3"],[218,42,219,10],[218,54,219,10,"reactNativeReanimated_mappersTs3"],[218,55,219,10],[218,57,219,16],[219,8,220,4],[219,12,220,10,"mapperRegistry"],[219,26,220,24],[219,29,220,27,"global"],[219,35,220,33],[219,36,220,34,"__mapperRegistry"],[219,52,220,50],[220,8,221,4,"mapperRegistry"],[220,22,221,18],[220,24,221,20,"stop"],[220,28,221,24],[220,29,221,25,"mapperID"],[220,37,221,33],[220,38,221,34],[221,6,222,2],[221,7,222,3],[222,6,222,3,"reactNativeReanimated_mappersTs3"],[222,38,222,3],[222,39,222,3,"__closure"],[222,48,222,3],[223,8,222,3,"mapperID"],[224,6,222,3],[225,6,222,3,"reactNativeReanimated_mappersTs3"],[225,38,222,3],[225,39,222,3,"__workletHash"],[225,52,222,3],[226,6,222,3,"reactNativeReanimated_mappersTs3"],[226,38,222,3],[226,39,222,3,"__initData"],[226,49,222,3],[226,52,222,3,"_worklet_7172044021294_init_data"],[226,84,222,3],[227,6,222,3],[227,13,222,3,"reactNativeReanimated_mappersTs3"],[227,45,222,3],[228,4,222,3],[228,5,219,10],[228,7,222,3],[228,8,222,4],[228,9,222,5],[228,10,222,6],[229,2,223,0],[230,0,223,1],[230,3]],"functionMap":{"names":["<global>","createMapperRegistry","updateMappersOrder","forEach$argument_0","dfs","mapperRun","maybeRequestUpdates","extractInputs","start","sv.addListener$argument_1","stop","startMapper","runOnUI$argument_0","stopMapper"],"mappings":"AAA;ACsB;ECQ;oBCsB;KDW;IEG;KFa;oBCC;KDI;GDE;EIE;GJmB;EKE;GL4B;EME;GNmB;WOG;kCCgB;SDG;KPG;USC;KTS;CDE;OWI;UCO;GDM;CXG;OaE;UDC;GCG;CbC"}},"type":"js/module"}]}