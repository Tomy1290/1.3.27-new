{"dependencies":[{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.interpolate = exports.clamp = exports.Extrapolation = undefined;\n  var _errors = require(_dependencyMap[0]);\n  /**\n   * Extrapolation type.\n   *\n   * @param IDENTITY - Returns the provided value as is.\n   * @param CLAMP - Clamps the value to the edge of the output range.\n   * @param EXTEND - Predicts the values beyond the output range.\n   */\n  var Extrapolation = exports.Extrapolation = /*#__PURE__*/function (Extrapolation) {\n    Extrapolation[\"IDENTITY\"] = \"identity\";\n    Extrapolation[\"CLAMP\"] = \"clamp\";\n    Extrapolation[\"EXTEND\"] = \"extend\";\n    return Extrapolation;\n  }({});\n  /** Represents the possible values for extrapolation as a string. */\n  /** Allows to specify extrapolation for left and right edge of the interpolation. */\n  /** Configuration options for extrapolation. */\n  var _worklet_4679268814955_init_data = {\n    code: \"function getVal_reactNativeReanimated_interpolationTs1(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){const{Extrapolation}=this.__closure;switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}\"\n  };\n  var getVal = function () {\n    var getVal = function (type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n      switch (type) {\n        case Extrapolation.IDENTITY:\n          return x;\n        case Extrapolation.CLAMP:\n          if (coef * val < coef * leftEdgeOutput) {\n            return leftEdgeOutput;\n          }\n          return rightEdgeOutput;\n        case Extrapolation.EXTEND:\n        default:\n          return val;\n      }\n    };\n    getVal.__closure = {\n      Extrapolation\n    };\n    getVal.__workletHash = 4679268814955;\n    getVal.__initData = _worklet_4679268814955_init_data;\n    return getVal;\n  }();\n  var _worklet_16339866960971_init_data = {\n    code: \"function isExtrapolate_reactNativeReanimated_interpolationTs2(value){const{Extrapolation}=this.__closure;return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}\"\n  };\n  var isExtrapolate = function () {\n    var isExtrapolate = function (value) {\n      return /* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY\n      /* eslint-enable @typescript-eslint/no-unsafe-enum-comparison */;\n    };\n    isExtrapolate.__closure = {\n      Extrapolation\n    };\n    isExtrapolate.__workletHash = 16339866960971;\n    isExtrapolate.__initData = _worklet_16339866960971_init_data;\n    return isExtrapolate;\n  }(); // validates extrapolations type\n  // if type is correct, converts it to ExtrapolationConfig\n  var _worklet_10282335606444_init_data = {\n    code: \"function validateType_reactNativeReanimated_interpolationTs3(type){const{Extrapolation,isExtrapolate}=this.__closure;const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new ReanimatedError(\\\"Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new ReanimatedError(\\\"Unsupported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");}Object.assign(extrapolationConfig,type);return extrapolationConfig;}\"\n  };\n  var validateType = function () {\n    var validateType = function (type) {\n      // initialize extrapolationConfig with default extrapolation\n      var extrapolationConfig = {\n        extrapolateLeft: Extrapolation.EXTEND,\n        extrapolateRight: Extrapolation.EXTEND\n      };\n      if (!type) {\n        return extrapolationConfig;\n      }\n      if (typeof type === 'string') {\n        if (!isExtrapolate(type)) {\n          throw new _errors.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n        }\n        extrapolationConfig.extrapolateLeft = type;\n        extrapolationConfig.extrapolateRight = type;\n        return extrapolationConfig;\n      }\n\n      // otherwise type is extrapolation config object\n      if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n        throw new _errors.ReanimatedError(`Unsupported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);\n      }\n      Object.assign(extrapolationConfig, type);\n      return extrapolationConfig;\n    };\n    validateType.__closure = {\n      Extrapolation,\n      isExtrapolate\n    };\n    validateType.__workletHash = 10282335606444;\n    validateType.__initData = _worklet_10282335606444_init_data;\n    return validateType;\n  }();\n  var _worklet_7727686385963_init_data = {\n    code: \"function internalInterpolate_reactNativeReanimated_interpolationTs4(x,narrowedInput,extrapolationConfig){const{getVal}=this.__closure;const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput===0){return leftEdgeOutput;}const progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);const val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);const coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}\"\n  };\n  var internalInterpolate = function () {\n    var internalInterpolate = function (x, narrowedInput, extrapolationConfig) {\n      var leftEdgeInput = narrowedInput.leftEdgeInput,\n        rightEdgeInput = narrowedInput.rightEdgeInput,\n        leftEdgeOutput = narrowedInput.leftEdgeOutput,\n        rightEdgeOutput = narrowedInput.rightEdgeOutput;\n      if (rightEdgeInput - leftEdgeInput === 0) {\n        return leftEdgeOutput;\n      }\n      var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n      var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n      var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n      if (coef * val < coef * leftEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n      } else if (coef * val > coef * rightEdgeOutput) {\n        return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n      }\n      return val;\n    };\n    internalInterpolate.__closure = {\n      getVal\n    };\n    internalInterpolate.__workletHash = 7727686385963;\n    internalInterpolate.__initData = _worklet_7727686385963_init_data;\n    return internalInterpolate;\n  }();\n  /**\n   * Lets you map a value from one range to another using linear interpolation.\n   *\n   * @param value - A number from the `input` range that is going to be mapped to\n   *   the `output` range.\n   * @param inputRange - An array of numbers specifying the input range of the\n   *   interpolation.\n   * @param outputRange - An array of numbers specifying the output range of the\n   *   interpolation.\n   * @param extrapolate - Determines what happens when the `value` goes beyond the\n   *   `input` range. Defaults to `Extrapolation.EXTEND` -\n   *   {@link ExtrapolationType}.\n   * @returns A mapped value within the output range.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate\n   */\n  var _worklet_3100536766164_init_data = {\n    code: \"function interpolate_reactNativeReanimated_interpolationTs5(x,inputRange,outputRange,type){const{validateType,internalInterpolate}=this.__closure;if(inputRange.length<2||outputRange.length<2){throw new ReanimatedError('Interpolation input and output ranges should contain at least two values.');}const extrapolationConfig=validateType(type);const length=inputRange.length;const narrowedInput={leftEdgeInput:inputRange[0],rightEdgeInput:inputRange[1],leftEdgeOutput:outputRange[0],rightEdgeOutput:outputRange[1]};if(length>2){if(x>inputRange[length-1]){narrowedInput.leftEdgeInput=inputRange[length-2];narrowedInput.rightEdgeInput=inputRange[length-1];narrowedInput.leftEdgeOutput=outputRange[length-2];narrowedInput.rightEdgeOutput=outputRange[length-1];}else{for(let i=1;i<length;++i){if(x<=inputRange[i]){narrowedInput.leftEdgeInput=inputRange[i-1];narrowedInput.rightEdgeInput=inputRange[i];narrowedInput.leftEdgeOutput=outputRange[i-1];narrowedInput.rightEdgeOutput=outputRange[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}\"\n  };\n  var interpolate = exports.interpolate = function () {\n    var interpolate = function (x, inputRange, outputRange, type) {\n      if (inputRange.length < 2 || outputRange.length < 2) {\n        throw new _errors.ReanimatedError('Interpolation input and output ranges should contain at least two values.');\n      }\n      var extrapolationConfig = validateType(type);\n      var length = inputRange.length;\n      var narrowedInput = {\n        leftEdgeInput: inputRange[0],\n        rightEdgeInput: inputRange[1],\n        leftEdgeOutput: outputRange[0],\n        rightEdgeOutput: outputRange[1]\n      };\n      if (length > 2) {\n        if (x > inputRange[length - 1]) {\n          narrowedInput.leftEdgeInput = inputRange[length - 2];\n          narrowedInput.rightEdgeInput = inputRange[length - 1];\n          narrowedInput.leftEdgeOutput = outputRange[length - 2];\n          narrowedInput.rightEdgeOutput = outputRange[length - 1];\n        } else {\n          for (var i = 1; i < length; ++i) {\n            if (x <= inputRange[i]) {\n              narrowedInput.leftEdgeInput = inputRange[i - 1];\n              narrowedInput.rightEdgeInput = inputRange[i];\n              narrowedInput.leftEdgeOutput = outputRange[i - 1];\n              narrowedInput.rightEdgeOutput = outputRange[i];\n              break;\n            }\n          }\n        }\n      }\n      return internalInterpolate(x, narrowedInput, extrapolationConfig);\n    };\n    interpolate.__closure = {\n      validateType,\n      internalInterpolate\n    };\n    interpolate.__workletHash = 3100536766164;\n    interpolate.__initData = _worklet_3100536766164_init_data;\n    return interpolate;\n  }();\n  /**\n   * Lets you limit a value within a specified range.\n   *\n   * @param value - A number that will be returned as long as the provided value\n   *   is in range between `min` and `max`.\n   * @param min - A number which will be returned when provided `value` is lower\n   *   than `min`.\n   * @param max - A number which will be returned when provided `value` is higher\n   *   than `max`.\n   * @returns A number between min and max bounds.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/\n   */\n  var _worklet_12385095133997_init_data = {\n    code: \"function clamp_reactNativeReanimated_interpolationTs6(value,min,max){return Math.min(Math.max(value,min),max);}\"\n  };\n  var clamp = exports.clamp = function () {\n    var clamp = function (value, min, max) {\n      return Math.min(Math.max(value, min), max);\n    };\n    clamp.__closure = {};\n    clamp.__workletHash = 12385095133997;\n    clamp.__initData = _worklet_12385095133997_init_data;\n    return clamp;\n  }();\n});","lineCount":220,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"interpolate"],[7,21,1,13],[7,24,1,13,"exports"],[7,31,1,13],[7,32,1,13,"clamp"],[7,37,1,13],[7,40,1,13,"exports"],[7,47,1,13],[7,48,1,13,"Extrapolation"],[7,61,1,13],[7,64,1,13,"undefined"],[7,73,1,13],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,2,5,0],[16,6,12,12,"Extrapolation"],[16,19,12,25],[16,22,12,25,"exports"],[16,29,12,25],[16,30,12,25,"Extrapolation"],[16,43,12,25],[16,69,12,12,"Extrapolation"],[16,82,12,25],[17,4,12,12,"Extrapolation"],[17,17,12,25],[18,4,12,12,"Extrapolation"],[18,17,12,25],[19,4,12,12,"Extrapolation"],[19,17,12,25],[20,4,12,25],[20,11,12,12,"Extrapolation"],[20,24,12,25],[21,2,12,25],[22,2,18,0],[23,2,28,0],[24,2,39,0],[25,2,39,0],[25,6,39,0,"_worklet_4679268814955_init_data"],[25,38,39,0],[26,4,39,0,"code"],[26,8,39,0],[27,2,39,0],[28,2,39,0],[28,6,39,0,"getVal"],[28,12,39,0],[28,15,46,0],[29,4,46,0],[29,8,46,0,"getVal"],[29,14,46,0],[29,26,46,0,"getVal"],[29,27,47,2,"type"],[29,31,47,21],[29,33,48,2,"coef"],[29,37,48,14],[29,39,49,2,"val"],[29,42,49,13],[29,44,50,2,"leftEdgeOutput"],[29,58,50,24],[29,60,51,2,"rightEdgeOutput"],[29,75,51,25],[29,77,52,2,"x"],[29,78,52,11],[29,80,53,10],[30,6,56,2],[30,14,56,10,"type"],[30,18,56,14],[31,8,57,4],[31,13,57,9,"Extrapolation"],[31,26,57,22],[31,27,57,23,"IDENTITY"],[31,35,57,31],[32,10,58,6],[32,17,58,13,"x"],[32,18,58,14],[33,8,59,4],[33,13,59,9,"Extrapolation"],[33,26,59,22],[33,27,59,23,"CLAMP"],[33,32,59,28],[34,10,60,6],[34,14,60,10,"coef"],[34,18,60,14],[34,21,60,17,"val"],[34,24,60,20],[34,27,60,23,"coef"],[34,31,60,27],[34,34,60,30,"leftEdgeOutput"],[34,48,60,44],[34,50,60,46],[35,12,61,8],[35,19,61,15,"leftEdgeOutput"],[35,33,61,29],[36,10,62,6],[37,10,63,6],[37,17,63,13,"rightEdgeOutput"],[37,32,63,28],[38,8,64,4],[38,13,64,9,"Extrapolation"],[38,26,64,22],[38,27,64,23,"EXTEND"],[38,33,64,29],[39,8,65,4],[40,10,66,6],[40,17,66,13,"val"],[40,20,66,16],[41,6,67,2],[42,4,68,0],[42,5,68,1],[43,4,68,1,"getVal"],[43,10,68,1],[43,11,68,1,"__closure"],[43,20,68,1],[44,6,68,1,"Extrapolation"],[45,4,68,1],[46,4,68,1,"getVal"],[46,10,68,1],[46,11,68,1,"__workletHash"],[46,24,68,1],[47,4,68,1,"getVal"],[47,10,68,1],[47,11,68,1,"__initData"],[47,21,68,1],[47,24,68,1,"_worklet_4679268814955_init_data"],[47,56,68,1],[48,4,68,1],[48,11,68,1,"getVal"],[48,17,68,1],[49,2,68,1],[49,3,46,0],[50,2,46,0],[50,6,46,0,"_worklet_16339866960971_init_data"],[50,39,46,0],[51,4,46,0,"code"],[51,8,46,0],[52,2,46,0],[53,2,46,0],[53,6,46,0,"isExtrapolate"],[53,19,46,0],[53,22,70,0],[54,4,70,0],[54,8,70,0,"isExtrapolate"],[54,21,70,0],[54,33,70,0,"isExtrapolate"],[54,34,70,23,"value"],[54,39,70,36],[54,41,70,62],[55,6,73,2],[55,13,74,4],[55,78,75,4,"value"],[55,83,75,9],[55,88,75,14,"Extrapolation"],[55,101,75,27],[55,102,75,28,"EXTEND"],[55,108,75,34],[55,112,76,4,"value"],[55,117,76,9],[55,122,76,14,"Extrapolation"],[55,135,76,27],[55,136,76,28,"CLAMP"],[55,141,76,33],[55,145,77,4,"value"],[55,150,77,9],[55,155,77,14,"Extrapolation"],[55,168,77,27],[55,169,77,28,"IDENTITY"],[56,6,78,4],[57,4,80,0],[57,5,80,1],[58,4,80,1,"isExtrapolate"],[58,17,80,1],[58,18,80,1,"__closure"],[58,27,80,1],[59,6,80,1,"Extrapolation"],[60,4,80,1],[61,4,80,1,"isExtrapolate"],[61,17,80,1],[61,18,80,1,"__workletHash"],[61,31,80,1],[62,4,80,1,"isExtrapolate"],[62,17,80,1],[62,18,80,1,"__initData"],[62,28,80,1],[62,31,80,1,"_worklet_16339866960971_init_data"],[62,64,80,1],[63,4,80,1],[63,11,80,1,"isExtrapolate"],[63,24,80,1],[64,2,80,1],[64,3,70,0],[64,7,82,0],[65,2,83,0],[66,2,83,0],[66,6,83,0,"_worklet_10282335606444_init_data"],[66,39,83,0],[67,4,83,0,"code"],[67,8,83,0],[68,2,83,0],[69,2,83,0],[69,6,83,0,"validateType"],[69,18,83,0],[69,21,84,0],[70,4,84,0],[70,8,84,0,"validateType"],[70,20,84,0],[70,32,84,0,"validateType"],[70,33,84,22,"type"],[70,37,84,45],[70,39,84,76],[71,6,86,2],[72,6,87,2],[72,10,87,8,"extrapolationConfig"],[72,29,87,56],[72,32,87,59],[73,8,88,4,"extrapolateLeft"],[73,23,88,19],[73,25,88,21,"Extrapolation"],[73,38,88,34],[73,39,88,35,"EXTEND"],[73,45,88,41],[74,8,89,4,"extrapolateRight"],[74,24,89,20],[74,26,89,22,"Extrapolation"],[74,39,89,35],[74,40,89,36,"EXTEND"],[75,6,90,2],[75,7,90,3],[76,6,92,2],[76,10,92,6],[76,11,92,7,"type"],[76,15,92,11],[76,17,92,13],[77,8,93,4],[77,15,93,11,"extrapolationConfig"],[77,34,93,30],[78,6,94,2],[79,6,96,2],[79,10,96,6],[79,17,96,13,"type"],[79,21,96,17],[79,26,96,22],[79,34,96,30],[79,36,96,32],[80,8,97,4],[80,12,97,8],[80,13,97,9,"isExtrapolate"],[80,26,97,22],[80,27,97,23,"type"],[80,31,97,27],[80,32,97,28],[80,34,97,30],[81,10,98,6],[81,16,98,12],[81,20,98,16,"ReanimatedError"],[81,43,98,31],[81,44,99,8],[82,0,100,0],[82,65,101,6],[82,66,101,7],[83,8,102,4],[84,8,103,4,"extrapolationConfig"],[84,27,103,23],[84,28,103,24,"extrapolateLeft"],[84,43,103,39],[84,46,103,42,"type"],[84,50,103,46],[85,8,104,4,"extrapolationConfig"],[85,27,104,23],[85,28,104,24,"extrapolateRight"],[85,44,104,40],[85,47,104,43,"type"],[85,51,104,47],[86,8,105,4],[86,15,105,11,"extrapolationConfig"],[86,34,105,30],[87,6,106,2],[89,6,108,2],[90,6,109,2],[90,10,110,5,"type"],[90,14,110,9],[90,15,110,10,"extrapolateLeft"],[90,30,110,25],[90,34,110,29],[90,35,110,30,"isExtrapolate"],[90,48,110,43],[90,49,110,44,"type"],[90,53,110,48],[90,54,110,49,"extrapolateLeft"],[90,69,110,64],[90,70,110,65],[90,74,111,5,"type"],[90,78,111,9],[90,79,111,10,"extrapolateRight"],[90,95,111,26],[90,99,111,30],[90,100,111,31,"isExtrapolate"],[90,113,111,44],[90,114,111,45,"type"],[90,118,111,49],[90,119,111,50,"extrapolateRight"],[90,135,111,66],[90,136,111,68],[90,138,112,4],[91,8,113,4],[91,14,113,10],[91,18,113,14,"ReanimatedError"],[91,41,113,29],[91,42,114,6],[92,0,115,0],[93,0,116,0],[94,0,117,0],[95,0,118,0],[95,10,119,4],[95,11,119,5],[96,6,120,2],[97,6,122,2,"Object"],[97,12,122,8],[97,13,122,9,"assign"],[97,19,122,15],[97,20,122,16,"extrapolationConfig"],[97,39,122,35],[97,41,122,37,"type"],[97,45,122,41],[97,46,122,42],[98,6,123,2],[98,13,123,9,"extrapolationConfig"],[98,32,123,28],[99,4,124,0],[99,5,124,1],[100,4,124,1,"validateType"],[100,16,124,1],[100,17,124,1,"__closure"],[100,26,124,1],[101,6,124,1,"Extrapolation"],[101,19,124,1],[102,6,124,1,"isExtrapolate"],[103,4,124,1],[104,4,124,1,"validateType"],[104,16,124,1],[104,17,124,1,"__workletHash"],[104,30,124,1],[105,4,124,1,"validateType"],[105,16,124,1],[105,17,124,1,"__initData"],[105,27,124,1],[105,30,124,1,"_worklet_10282335606444_init_data"],[105,63,124,1],[106,4,124,1],[106,11,124,1,"validateType"],[106,23,124,1],[107,2,124,1],[107,3,84,0],[108,2,84,0],[108,6,84,0,"_worklet_7727686385963_init_data"],[108,38,84,0],[109,4,84,0,"code"],[109,8,84,0],[110,2,84,0],[111,2,84,0],[111,6,84,0,"internalInterpolate"],[111,25,84,0],[111,28,126,0],[112,4,126,0],[112,8,126,0,"internalInterpolate"],[112,27,126,0],[112,39,126,0,"internalInterpolate"],[112,40,127,2,"x"],[112,41,127,11],[112,43,128,2,"narrowedInput"],[112,56,128,43],[112,58,129,2,"extrapolationConfig"],[112,77,129,50],[112,79,130,2],[113,6,132,2],[113,10,132,10,"leftEdgeInput"],[113,23,132,23],[113,26,133,4,"narrowedInput"],[113,39,133,17],[113,40,132,10,"leftEdgeInput"],[113,53,132,23],[114,8,132,25,"rightEdgeInput"],[114,22,132,39],[114,25,133,4,"narrowedInput"],[114,38,133,17],[114,39,132,25,"rightEdgeInput"],[114,53,132,39],[115,8,132,41,"leftEdgeOutput"],[115,22,132,55],[115,25,133,4,"narrowedInput"],[115,38,133,17],[115,39,132,41,"leftEdgeOutput"],[115,53,132,55],[116,8,132,57,"rightEdgeOutput"],[116,23,132,72],[116,26,133,4,"narrowedInput"],[116,39,133,17],[116,40,132,57,"rightEdgeOutput"],[116,55,132,72],[117,6,134,2],[117,10,134,6,"rightEdgeInput"],[117,24,134,20],[117,27,134,23,"leftEdgeInput"],[117,40,134,36],[117,45,134,41],[117,46,134,42],[117,48,134,44],[118,8,135,4],[118,15,135,11,"leftEdgeOutput"],[118,29,135,25],[119,6,136,2],[120,6,137,2],[120,10,137,8,"progress"],[120,18,137,16],[120,21,137,19],[120,22,137,20,"x"],[120,23,137,21],[120,26,137,24,"leftEdgeInput"],[120,39,137,37],[120,44,137,42,"rightEdgeInput"],[120,58,137,56],[120,61,137,59,"leftEdgeInput"],[120,74,137,72],[120,75,137,73],[121,6,138,2],[121,10,138,8,"val"],[121,13,138,11],[121,16,138,14,"leftEdgeOutput"],[121,30,138,28],[121,33,138,31,"progress"],[121,41,138,39],[121,45,138,43,"rightEdgeOutput"],[121,60,138,58],[121,63,138,61,"leftEdgeOutput"],[121,77,138,75],[121,78,138,76],[122,6,139,2],[122,10,139,8,"coef"],[122,14,139,12],[122,17,139,15,"rightEdgeOutput"],[122,32,139,30],[122,36,139,34,"leftEdgeOutput"],[122,50,139,48],[122,53,139,51],[122,54,139,52],[122,59,139,57],[123,6,141,2],[123,10,141,6,"coef"],[123,14,141,10],[123,17,141,13,"val"],[123,20,141,16],[123,23,141,19,"coef"],[123,27,141,23],[123,30,141,26,"leftEdgeOutput"],[123,44,141,40],[123,46,141,42],[124,8,142,4],[124,15,142,11,"getVal"],[124,21,142,17],[124,22,143,6,"extrapolationConfig"],[124,41,143,25],[124,42,143,26,"extrapolateLeft"],[124,57,143,41],[124,59,144,6,"coef"],[124,63,144,10],[124,65,145,6,"val"],[124,68,145,9],[124,70,146,6,"leftEdgeOutput"],[124,84,146,20],[124,86,147,6,"rightEdgeOutput"],[124,101,147,21],[124,103,148,6,"x"],[124,104,149,4],[124,105,149,5],[125,6,150,2],[125,7,150,3],[125,13,150,9],[125,17,150,13,"coef"],[125,21,150,17],[125,24,150,20,"val"],[125,27,150,23],[125,30,150,26,"coef"],[125,34,150,30],[125,37,150,33,"rightEdgeOutput"],[125,52,150,48],[125,54,150,50],[126,8,151,4],[126,15,151,11,"getVal"],[126,21,151,17],[126,22,152,6,"extrapolationConfig"],[126,41,152,25],[126,42,152,26,"extrapolateRight"],[126,58,152,42],[126,60,153,6,"coef"],[126,64,153,10],[126,66,154,6,"val"],[126,69,154,9],[126,71,155,6,"leftEdgeOutput"],[126,85,155,20],[126,87,156,6,"rightEdgeOutput"],[126,102,156,21],[126,104,157,6,"x"],[126,105,158,4],[126,106,158,5],[127,6,159,2],[128,6,161,2],[128,13,161,9,"val"],[128,16,161,12],[129,4,162,0],[129,5,162,1],[130,4,162,1,"internalInterpolate"],[130,23,162,1],[130,24,162,1,"__closure"],[130,33,162,1],[131,6,162,1,"getVal"],[132,4,162,1],[133,4,162,1,"internalInterpolate"],[133,23,162,1],[133,24,162,1,"__workletHash"],[133,37,162,1],[134,4,162,1,"internalInterpolate"],[134,23,162,1],[134,24,162,1,"__initData"],[134,34,162,1],[134,37,162,1,"_worklet_7727686385963_init_data"],[134,69,162,1],[135,4,162,1],[135,11,162,1,"internalInterpolate"],[135,30,162,1],[136,2,162,1],[136,3,126,0],[137,2,164,0],[138,0,165,0],[139,0,166,0],[140,0,167,0],[141,0,168,0],[142,0,169,0],[143,0,170,0],[144,0,171,0],[145,0,172,0],[146,0,173,0],[147,0,174,0],[148,0,175,0],[149,0,176,0],[150,0,177,0],[151,0,178,0],[152,2,164,0],[152,6,164,0,"_worklet_3100536766164_init_data"],[152,38,164,0],[153,4,164,0,"code"],[153,8,164,0],[154,2,164,0],[155,2,164,0],[155,6,164,0,"interpolate"],[155,17,164,0],[155,20,164,0,"exports"],[155,27,164,0],[155,28,164,0,"interpolate"],[155,39,164,0],[155,42,179,7],[156,4,179,7],[156,8,179,7,"interpolate"],[156,19,179,7],[156,31,179,7,"interpolate"],[156,32,180,2,"x"],[156,33,180,11],[156,35,181,2,"inputRange"],[156,45,181,31],[156,47,182,2,"outputRange"],[156,58,182,32],[156,60,183,2,"type"],[156,64,183,26],[156,66,184,10],[157,6,186,2],[157,10,186,6,"inputRange"],[157,20,186,16],[157,21,186,17,"length"],[157,27,186,23],[157,30,186,26],[157,31,186,27],[157,35,186,31,"outputRange"],[157,46,186,42],[157,47,186,43,"length"],[157,53,186,49],[157,56,186,52],[157,57,186,53],[157,59,186,55],[158,8,187,4],[158,14,187,10],[158,18,187,14,"ReanimatedError"],[158,41,187,29],[158,42,188,6],[158,117,189,4],[158,118,189,5],[159,6,190,2],[160,6,192,2],[160,10,192,8,"extrapolationConfig"],[160,29,192,27],[160,32,192,30,"validateType"],[160,44,192,42],[160,45,192,43,"type"],[160,49,192,47],[160,50,192,48],[161,6,193,2],[161,10,193,8,"length"],[161,16,193,14],[161,19,193,17,"inputRange"],[161,29,193,27],[161,30,193,28,"length"],[161,36,193,34],[162,6,194,2],[162,10,194,8,"narrowedInput"],[162,23,194,49],[162,26,194,52],[163,8,195,4,"leftEdgeInput"],[163,21,195,17],[163,23,195,19,"inputRange"],[163,33,195,29],[163,34,195,30],[163,35,195,31],[163,36,195,32],[164,8,196,4,"rightEdgeInput"],[164,22,196,18],[164,24,196,20,"inputRange"],[164,34,196,30],[164,35,196,31],[164,36,196,32],[164,37,196,33],[165,8,197,4,"leftEdgeOutput"],[165,22,197,18],[165,24,197,20,"outputRange"],[165,35,197,31],[165,36,197,32],[165,37,197,33],[165,38,197,34],[166,8,198,4,"rightEdgeOutput"],[166,23,198,19],[166,25,198,21,"outputRange"],[166,36,198,32],[166,37,198,33],[166,38,198,34],[167,6,199,2],[167,7,199,3],[168,6,200,2],[168,10,200,6,"length"],[168,16,200,12],[168,19,200,15],[168,20,200,16],[168,22,200,18],[169,8,201,4],[169,12,201,8,"x"],[169,13,201,9],[169,16,201,12,"inputRange"],[169,26,201,22],[169,27,201,23,"length"],[169,33,201,29],[169,36,201,32],[169,37,201,33],[169,38,201,34],[169,40,201,36],[170,10,202,6,"narrowedInput"],[170,23,202,19],[170,24,202,20,"leftEdgeInput"],[170,37,202,33],[170,40,202,36,"inputRange"],[170,50,202,46],[170,51,202,47,"length"],[170,57,202,53],[170,60,202,56],[170,61,202,57],[170,62,202,58],[171,10,203,6,"narrowedInput"],[171,23,203,19],[171,24,203,20,"rightEdgeInput"],[171,38,203,34],[171,41,203,37,"inputRange"],[171,51,203,47],[171,52,203,48,"length"],[171,58,203,54],[171,61,203,57],[171,62,203,58],[171,63,203,59],[172,10,204,6,"narrowedInput"],[172,23,204,19],[172,24,204,20,"leftEdgeOutput"],[172,38,204,34],[172,41,204,37,"outputRange"],[172,52,204,48],[172,53,204,49,"length"],[172,59,204,55],[172,62,204,58],[172,63,204,59],[172,64,204,60],[173,10,205,6,"narrowedInput"],[173,23,205,19],[173,24,205,20,"rightEdgeOutput"],[173,39,205,35],[173,42,205,38,"outputRange"],[173,53,205,49],[173,54,205,50,"length"],[173,60,205,56],[173,63,205,59],[173,64,205,60],[173,65,205,61],[174,8,206,4],[174,9,206,5],[174,15,206,11],[175,10,207,6],[175,15,207,11],[175,19,207,15,"i"],[175,20,207,16],[175,23,207,19],[175,24,207,20],[175,26,207,22,"i"],[175,27,207,23],[175,30,207,26,"length"],[175,36,207,32],[175,38,207,34],[175,40,207,36,"i"],[175,41,207,37],[175,43,207,39],[176,12,208,8],[176,16,208,12,"x"],[176,17,208,13],[176,21,208,17,"inputRange"],[176,31,208,27],[176,32,208,28,"i"],[176,33,208,29],[176,34,208,30],[176,36,208,32],[177,14,209,10,"narrowedInput"],[177,27,209,23],[177,28,209,24,"leftEdgeInput"],[177,41,209,37],[177,44,209,40,"inputRange"],[177,54,209,50],[177,55,209,51,"i"],[177,56,209,52],[177,59,209,55],[177,60,209,56],[177,61,209,57],[178,14,210,10,"narrowedInput"],[178,27,210,23],[178,28,210,24,"rightEdgeInput"],[178,42,210,38],[178,45,210,41,"inputRange"],[178,55,210,51],[178,56,210,52,"i"],[178,57,210,53],[178,58,210,54],[179,14,211,10,"narrowedInput"],[179,27,211,23],[179,28,211,24,"leftEdgeOutput"],[179,42,211,38],[179,45,211,41,"outputRange"],[179,56,211,52],[179,57,211,53,"i"],[179,58,211,54],[179,61,211,57],[179,62,211,58],[179,63,211,59],[180,14,212,10,"narrowedInput"],[180,27,212,23],[180,28,212,24,"rightEdgeOutput"],[180,43,212,39],[180,46,212,42,"outputRange"],[180,57,212,53],[180,58,212,54,"i"],[180,59,212,55],[180,60,212,56],[181,14,213,10],[182,12,214,8],[183,10,215,6],[184,8,216,4],[185,6,217,2],[186,6,219,2],[186,13,219,9,"internalInterpolate"],[186,32,219,28],[186,33,219,29,"x"],[186,34,219,30],[186,36,219,32,"narrowedInput"],[186,49,219,45],[186,51,219,47,"extrapolationConfig"],[186,70,219,66],[186,71,219,67],[187,4,220,0],[187,5,220,1],[188,4,220,1,"interpolate"],[188,15,220,1],[188,16,220,1,"__closure"],[188,25,220,1],[189,6,220,1,"validateType"],[189,18,220,1],[190,6,220,1,"internalInterpolate"],[191,4,220,1],[192,4,220,1,"interpolate"],[192,15,220,1],[192,16,220,1,"__workletHash"],[192,29,220,1],[193,4,220,1,"interpolate"],[193,15,220,1],[193,16,220,1,"__initData"],[193,26,220,1],[193,29,220,1,"_worklet_3100536766164_init_data"],[193,61,220,1],[194,4,220,1],[194,11,220,1,"interpolate"],[194,22,220,1],[195,2,220,1],[195,3,179,7],[196,2,222,0],[197,0,223,0],[198,0,224,0],[199,0,225,0],[200,0,226,0],[201,0,227,0],[202,0,228,0],[203,0,229,0],[204,0,230,0],[205,0,231,0],[206,0,232,0],[207,0,233,0],[208,2,222,0],[208,6,222,0,"_worklet_12385095133997_init_data"],[208,39,222,0],[209,4,222,0,"code"],[209,8,222,0],[210,2,222,0],[211,2,222,0],[211,6,222,0,"clamp"],[211,11,222,0],[211,14,222,0,"exports"],[211,21,222,0],[211,22,222,0,"clamp"],[211,27,222,0],[211,30,234,7],[212,4,234,7],[212,8,234,7,"clamp"],[212,13,234,7],[212,25,234,7,"clamp"],[212,26,234,22,"value"],[212,31,234,35],[212,33,234,37,"min"],[212,36,234,48],[212,38,234,50,"max"],[212,41,234,61],[212,43,234,63],[213,6,236,2],[213,13,236,9,"Math"],[213,17,236,13],[213,18,236,14,"min"],[213,21,236,17],[213,22,236,18,"Math"],[213,26,236,22],[213,27,236,23,"max"],[213,30,236,26],[213,31,236,27,"value"],[213,36,236,32],[213,38,236,34,"min"],[213,41,236,37],[213,42,236,38],[213,44,236,40,"max"],[213,47,236,43],[213,48,236,44],[214,4,237,0],[214,5,237,1],[215,4,237,1,"clamp"],[215,9,237,1],[215,10,237,1,"__closure"],[215,19,237,1],[216,4,237,1,"clamp"],[216,9,237,1],[216,10,237,1,"__workletHash"],[216,23,237,1],[217,4,237,1,"clamp"],[217,9,237,1],[217,10,237,1,"__initData"],[217,20,237,1],[217,23,237,1,"_worklet_12385095133997_init_data"],[217,56,237,1],[218,4,237,1],[218,11,237,1,"clamp"],[218,16,237,1],[219,2,237,1],[219,3,234,7],[220,0,234,7],[220,3]],"functionMap":{"names":["<global>","getVal","isExtrapolate","validateType","internalInterpolate","interpolate","clamp"],"mappings":"AAA;AC6C;CDsB;AEE;CFU;AGI;CHwC;AIE;CJoC;OKiB;CLyC;OMc;CNG"}},"type":"js/module"}]}