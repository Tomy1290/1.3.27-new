{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"]}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"]}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"]}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"]}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _expoModulesCore = require(_dependencyMap[2]);\n  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[3]));\n  var _Font = require(_dependencyMap[4]);\n  var _FontLoader = require(_dependencyMap[5]);\n  var _memory = require(_dependencyMap[6]);\n  var _server = require(_dependencyMap[7]);\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return _ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = false;\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":188,"map":[[19,2,1,0],[19,6,1,0,"_expoModulesCore"],[19,22,1,0],[19,25,1,0,"require"],[19,32,1,0],[19,33,1,0,"_dependencyMap"],[19,47,1,0],[20,2,2,0],[20,6,2,0,"_ExpoFontLoader"],[20,21,2,0],[20,24,2,0,"_interopRequireDefault"],[20,46,2,0],[20,47,2,0,"require"],[20,54,2,0],[20,55,2,0,"_dependencyMap"],[20,69,2,0],[21,2,3,0],[21,6,3,0,"_Font"],[21,11,3,0],[21,14,3,0,"require"],[21,21,3,0],[21,22,3,0,"_dependencyMap"],[21,36,3,0],[22,2,4,0],[22,6,4,0,"_FontLoader"],[22,17,4,0],[22,20,4,0,"require"],[22,27,4,0],[22,28,4,0,"_dependencyMap"],[22,42,4,0],[23,2,5,0],[23,6,5,0,"_memory"],[23,13,5,0],[23,16,5,0,"require"],[23,23,5,0],[23,24,5,0,"_dependencyMap"],[23,38,5,0],[24,2,6,0],[24,6,6,0,"_server"],[24,13,6,0],[24,16,6,0,"require"],[24,23,6,0],[24,24,6,0,"_dependencyMap"],[24,38,6,0],[25,2,7,0],[26,2,8,0],[27,0,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,0,13,0],[32,2,14,7],[32,11,14,16,"isLoaded"],[32,19,14,24,"isLoaded"],[32,20,14,25,"fontFamily"],[32,30,14,35],[32,32,14,37],[33,4,18,4],[33,11,18,11],[33,15,18,11,"isLoadedNative"],[33,37,18,25],[33,39,18,26,"fontFamily"],[33,49,18,36],[33,50,18,37],[34,2,19,0],[35,2,20,0],[36,0,21,0],[37,0,22,0],[38,0,23,0],[39,0,24,0],[40,0,25,0],[41,2,26,7],[41,11,26,16,"getLoadedFonts"],[41,25,26,30,"getLoadedFonts"],[41,26,26,30],[41,28,26,33],[42,4,27,4],[42,11,27,11,"ExpoFontLoader"],[42,34,27,25],[42,35,27,26,"getLoadedFonts"],[42,49,27,40],[42,50,27,41],[42,51,27,42],[43,2,28,0],[44,2,29,0],[45,2,30,0],[46,0,31,0],[47,0,32,0],[48,0,33,0],[49,0,34,0],[50,0,35,0],[51,2,36,7],[51,11,36,16,"isLoading"],[51,20,36,25,"isLoading"],[51,21,36,26,"fontFamily"],[51,31,36,36],[51,33,36,38],[52,4,37,4],[52,11,37,11,"fontFamily"],[52,21,37,21],[52,25,37,25,"loadPromises"],[52,45,37,37],[53,2,38,0],[54,2,39,0],[55,2,40,0],[56,0,41,0],[57,0,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,0,48,0],[64,0,49,0],[65,0,50,0],[66,0,51,0],[67,0,52,0],[68,0,53,0],[69,2,54,7],[69,11,54,16,"loadAsync"],[69,20,54,25,"loadAsync"],[69,21,54,26,"fontFamilyOrFontMap"],[69,40,54,45],[69,42,54,47,"source"],[69,48,54,53],[69,50,54,55],[70,4,55,4],[71,4,56,4],[72,4,57,4],[73,4,58,4],[73,8,58,10,"isServer"],[73,16,58,18],[73,24,58,75],[74,4,59,4],[74,8,59,8],[74,15,59,15,"fontFamilyOrFontMap"],[74,34,59,34],[74,39,59,39],[74,47,59,47],[74,49,59,49],[75,6,60,8],[75,10,60,12,"source"],[75,16,60,18],[75,18,60,20],[76,8,61,12],[76,15,61,19,"Promise"],[76,22,61,26],[76,23,61,27,"reject"],[76,29,61,33],[76,30,61,34],[76,34,61,38,"CodedError"],[76,61,61,48],[76,62,61,49],[76,76,61,63],[76,78,61,65],[76,132,61,119,"source"],[76,138,61,125],[76,244,61,231],[76,245,61,232],[76,246,61,233],[77,6,62,8],[78,6,63,8],[78,10,63,14,"fontMap"],[78,17,63,21],[78,20,63,24,"fontFamilyOrFontMap"],[78,39,63,43],[79,6,64,8],[79,10,64,14,"names"],[79,15,64,19],[79,18,64,22,"Object"],[79,24,64,28],[79,25,64,29,"keys"],[79,29,64,33],[79,30,64,34,"fontMap"],[79,37,64,41],[79,38,64,42],[80,6,69,8],[80,13,69,15,"Promise"],[80,20,69,22],[80,21,69,23,"all"],[80,24,69,26],[80,25,69,27,"names"],[80,30,69,32],[80,31,69,33,"map"],[80,34,69,36],[80,35,69,38,"name"],[80,39,69,42],[80,43,69,47,"loadFontInNamespaceAsync"],[80,67,69,71],[80,68,69,72,"name"],[80,72,69,76],[80,74,69,78,"fontMap"],[80,81,69,85],[80,82,69,86,"name"],[80,86,69,90],[80,87,69,91],[80,88,69,92],[80,89,69,93],[80,90,69,94],[80,91,69,95,"then"],[80,95,69,99],[80,96,69,100],[80,102,69,106],[80,103,69,108],[80,104,69,109],[80,105,69,110],[81,4,70,4],[82,4,75,4],[82,11,75,11,"loadFontInNamespaceAsync"],[82,35,75,35],[82,36,75,36,"fontFamilyOrFontMap"],[82,55,75,55],[82,57,75,57,"source"],[82,63,75,63],[82,64,75,64],[83,2,76,0],[84,2,76,1],[84,11,77,15,"loadFontInNamespaceAsync"],[84,35,77,39,"loadFontInNamespaceAsync"],[84,36,77,39,"_x"],[84,38,77,39],[84,40,77,39,"_x2"],[84,43,77,39],[85,4,77,39],[85,11,77,39,"_loadFontInNamespaceAsync"],[85,36,77,39],[85,37,77,39,"apply"],[85,42,77,39],[85,49,77,39,"arguments"],[85,58,77,39],[86,2,77,39],[86,4,105,0],[87,2,106,0],[88,0,107,0],[89,0,108,0],[90,0,109,0],[91,2,106,0],[91,11,106,0,"_loadFontInNamespaceAsync"],[91,37,106,0],[92,4,106,0,"_loadFontInNamespaceAsync"],[92,29,106,0],[92,36,106,0,"_asyncToGenerator2"],[92,54,106,0],[92,55,106,0,"default"],[92,62,106,0],[92,64,77,0],[92,75,77,40,"fontFamily"],[92,85,77,50],[92,87,77,52,"source"],[92,93,77,58],[92,95,77,60],[93,6,78,4],[93,10,78,8],[93,11,78,9,"source"],[93,17,78,15],[93,19,78,17],[94,8,79,8],[94,14,79,14],[94,18,79,18,"CodedError"],[94,45,79,28],[94,46,79,29],[94,63,79,46],[94,65,79,48],[94,114,79,97,"fontFamily"],[94,124,79,107],[94,130,79,113,"source"],[94,136,79,119],[94,206,79,189,"fontFamily"],[94,216,79,199],[94,219,79,202],[94,220,79,203],[95,6,80,4],[96,6,81,4],[97,6,82,4],[98,6,83,4],[98,10,83,8,"isLoaded"],[98,18,83,16],[98,19,83,17,"fontFamily"],[98,29,83,27],[98,30,83,28],[98,32,83,30],[99,8,84,8],[100,6,85,4],[101,6,86,4],[101,10,86,8,"loadPromises"],[101,30,86,20],[101,31,86,21,"hasOwnProperty"],[101,45,86,35],[101,46,86,36,"fontFamily"],[101,56,86,46],[101,57,86,47],[101,59,86,49],[102,8,87,8],[102,15,87,15,"loadPromises"],[102,35,87,27],[102,36,87,28,"fontFamily"],[102,46,87,38],[102,47,87,39],[103,6,88,4],[104,6,89,4],[105,6,90,4],[106,6,91,4],[107,6,92,4],[108,6,93,4],[108,10,93,10,"asset"],[108,15,93,15],[108,18,93,18],[108,22,93,18,"getAssetForSource"],[108,51,93,35],[108,53,93,36,"source"],[108,59,93,42],[108,60,93,43],[109,6,94,4,"loadPromises"],[109,26,94,16],[109,27,94,17,"fontFamily"],[109,37,94,27],[109,38,94,28],[109,41,94,31],[109,45,94,31,"_asyncToGenerator2"],[109,63,94,31],[109,64,94,31,"default"],[109,71,94,31],[109,73,94,32],[109,86,94,44],[110,8,95,8],[110,12,95,12],[111,10,96,12],[111,16,96,18],[111,20,96,18,"loadSingleFontAsync"],[111,51,96,37],[111,53,96,38,"fontFamily"],[111,63,96,48],[111,65,96,50,"asset"],[111,70,96,55],[111,71,96,56],[112,10,97,12],[112,14,97,12,"markLoaded"],[112,32,97,22],[112,34,97,23,"fontFamily"],[112,44,97,33],[112,45,97,34],[113,8,98,8],[113,9,98,9],[113,18,99,16],[114,10,100,12],[114,17,100,19,"loadPromises"],[114,37,100,31],[114,38,100,32,"fontFamily"],[114,48,100,42],[114,49,100,43],[115,8,101,8],[116,6,102,4],[116,7,102,5],[116,9,102,7],[116,10,102,8],[117,6,103,4],[117,12,103,10,"loadPromises"],[117,32,103,22],[117,33,103,23,"fontFamily"],[117,43,103,33],[117,44,103,34],[118,4,104,0],[118,5,104,1],[119,4,104,1],[119,11,104,1,"_loadFontInNamespaceAsync"],[119,36,104,1],[119,37,104,1,"apply"],[119,42,104,1],[119,49,104,1,"arguments"],[119,58,104,1],[120,2,104,1],[121,2,104,1],[121,11,110,22,"unloadAllAsync"],[121,25,110,36,"unloadAllAsync"],[121,26,110,36],[122,4,110,36],[122,11,110,36,"_unloadAllAsync"],[122,26,110,36],[122,27,110,36,"apply"],[122,32,110,36],[122,39,110,36,"arguments"],[122,48,110,36],[123,2,110,36],[123,4,120,0],[124,2,121,0],[125,0,122,0],[126,0,123,0],[127,0,124,0],[128,0,125,0],[129,0,126,0],[130,0,127,0],[131,0,128,0],[132,0,129,0],[133,2,121,0],[133,11,121,0,"_unloadAllAsync"],[133,27,121,0],[134,4,121,0,"_unloadAllAsync"],[134,19,121,0],[134,26,121,0,"_asyncToGenerator2"],[134,44,121,0],[134,45,121,0,"default"],[134,52,121,0],[134,54,110,7],[134,67,110,39],[135,6,111,4],[135,10,111,8],[135,11,111,9,"ExpoFontLoader"],[135,34,111,23],[135,35,111,24,"unloadAllAsync"],[135,49,111,38],[135,51,111,40],[136,8,112,8],[136,14,112,14],[136,18,112,18,"UnavailabilityError"],[136,54,112,37],[136,55,112,38],[136,66,112,49],[136,68,112,51],[136,84,112,67],[136,85,112,68],[137,6,113,4],[138,6,114,4],[138,10,114,8,"Object"],[138,16,114,14],[138,17,114,15,"keys"],[138,21,114,19],[138,22,114,20,"loadPromises"],[138,42,114,32],[138,43,114,33],[138,44,114,34,"length"],[138,50,114,40],[138,52,114,42],[139,8,115,8],[139,14,115,14],[139,18,115,18,"CodedError"],[139,45,115,28],[139,46,115,29],[139,58,115,41],[139,60,115,43],[139,112,115,95,"Object"],[139,118,115,101],[139,119,115,102,"keys"],[139,123,115,106],[139,124,115,107,"loadPromises"],[139,144,115,119],[139,145,115,120],[139,146,115,121,"join"],[139,150,115,125],[139,151,115,126],[139,155,115,130],[139,156,115,131],[139,158,115,133],[139,159,115,134],[140,6,116,4],[141,6,117,4],[141,10,117,4,"purgeCache"],[141,28,117,14],[141,30,117,15],[141,31,117,16],[142,6,118,4],[142,12,118,10,"ExpoFontLoader"],[142,35,118,24],[142,36,118,25,"unloadAllAsync"],[142,50,118,39],[142,51,118,40],[142,52,118,41],[143,4,119,0],[143,5,119,1],[144,4,119,1],[144,11,119,1,"_unloadAllAsync"],[144,26,119,1],[144,27,119,1,"apply"],[144,32,119,1],[144,39,119,1,"arguments"],[144,48,119,1],[145,2,119,1],[146,2,119,1],[146,11,130,22,"unloadAsync"],[146,22,130,33,"unloadAsync"],[146,23,130,33,"_x3"],[146,26,130,33],[146,28,130,33,"_x4"],[146,31,130,33],[147,4,130,33],[147,11,130,33,"_unloadAsync"],[147,23,130,33],[147,24,130,33,"apply"],[147,29,130,33],[147,36,130,33,"arguments"],[147,45,130,33],[148,2,130,33],[149,2,130,33],[149,11,130,33,"_unloadAsync"],[149,24,130,33],[150,4,130,33,"_unloadAsync"],[150,16,130,33],[150,23,130,33,"_asyncToGenerator2"],[150,41,130,33],[150,42,130,33,"default"],[150,49,130,33],[150,51,130,7],[150,62,130,34,"fontFamilyOrFontMap"],[150,81,130,53],[150,83,130,55,"options"],[150,90,130,62],[150,92,130,64],[151,6,131,4],[151,10,131,8],[151,11,131,9,"ExpoFontLoader"],[151,34,131,23],[151,35,131,24,"unloadAsync"],[151,46,131,35],[151,48,131,37],[152,8,132,8],[152,14,132,14],[152,18,132,18,"UnavailabilityError"],[152,54,132,37],[152,55,132,38],[152,66,132,49],[152,68,132,51],[152,81,132,64],[152,82,132,65],[153,6,133,4],[154,6,134,4],[154,10,134,8],[154,17,134,15,"fontFamilyOrFontMap"],[154,36,134,34],[154,41,134,39],[154,49,134,47],[154,51,134,49],[155,8,135,8],[155,12,135,12,"options"],[155,19,135,19],[155,21,135,21],[156,10,136,12],[156,16,136,18],[156,20,136,22,"CodedError"],[156,47,136,32],[156,48,136,33],[156,62,136,47],[156,64,136,49],[156,119,136,104,"options"],[156,126,136,111],[156,234,136,219],[156,235,136,220],[157,8,137,8],[158,8,138,8],[158,12,138,14,"fontMap"],[158,19,138,21],[158,22,138,24,"fontFamilyOrFontMap"],[158,41,138,43],[159,8,139,8],[159,12,139,14,"names"],[159,17,139,19],[159,20,139,22,"Object"],[159,26,139,28],[159,27,139,29,"keys"],[159,31,139,33],[159,32,139,34,"fontMap"],[159,39,139,41],[159,40,139,42],[160,8,140,8],[160,14,140,14,"Promise"],[160,21,140,21],[160,22,140,22,"all"],[160,25,140,25],[160,26,140,26,"names"],[160,31,140,31],[160,32,140,32,"map"],[160,35,140,35],[160,36,140,37,"name"],[160,40,140,41],[160,44,140,46,"unloadFontInNamespaceAsync"],[160,70,140,72],[160,71,140,73,"name"],[160,75,140,77],[160,77,140,79,"fontMap"],[160,84,140,86],[160,85,140,87,"name"],[160,89,140,91],[160,90,140,92],[160,91,140,93],[160,92,140,94],[160,93,140,95],[161,8,141,8],[162,6,142,4],[163,6,143,4],[163,19,143,17,"unloadFontInNamespaceAsync"],[163,45,143,43],[163,46,143,44,"fontFamilyOrFontMap"],[163,65,143,63],[163,67,143,65,"options"],[163,74,143,72],[163,75,143,73],[164,4,144,0],[164,5,144,1],[165,4,144,1],[165,11,144,1,"_unloadAsync"],[165,23,144,1],[165,24,144,1,"apply"],[165,29,144,1],[165,36,144,1,"arguments"],[165,45,144,1],[166,2,144,1],[167,2,144,1],[167,11,145,15,"unloadFontInNamespaceAsync"],[167,37,145,41,"unloadFontInNamespaceAsync"],[167,38,145,41,"_x5"],[167,41,145,41],[167,43,145,41,"_x6"],[167,46,145,41],[168,4,145,41],[168,11,145,41,"_unloadFontInNamespaceAsync"],[168,38,145,41],[168,39,145,41,"apply"],[168,44,145,41],[168,51,145,41,"arguments"],[168,60,145,41],[169,2,145,41],[170,2,145,41],[170,11,145,41,"_unloadFontInNamespaceAsync"],[170,39,145,41],[171,4,145,41,"_unloadFontInNamespaceAsync"],[171,31,145,41],[171,38,145,41,"_asyncToGenerator2"],[171,56,145,41],[171,57,145,41,"default"],[171,64,145,41],[171,66,145,0],[171,77,145,42,"fontFamily"],[171,87,145,52],[171,89,145,54,"options"],[171,96,145,61],[171,98,145,63],[172,6,146,4],[172,10,146,8],[172,11,146,9,"isLoaded"],[172,19,146,17],[172,20,146,18,"fontFamily"],[172,30,146,28],[172,31,146,29],[172,33,146,31],[173,8,147,8],[174,6,148,4],[174,7,148,5],[174,13,149,9],[175,8,150,8],[175,12,150,8,"purgeFontFamilyFromCache"],[175,44,150,32],[175,46,150,33,"fontFamily"],[175,56,150,43],[175,57,150,44],[176,6,151,4],[177,6,152,4],[178,6,153,4],[179,6,154,4],[180,6,155,4],[181,6,156,4],[181,10,156,8],[181,11,156,9,"fontFamily"],[181,21,156,19],[181,23,156,21],[182,8,157,8],[182,14,157,14],[182,18,157,18,"CodedError"],[182,45,157,28],[182,46,157,29],[182,63,157,46],[182,65,157,48],[182,94,157,77],[182,95,157,78],[183,6,158,4],[184,6,159,4],[184,12,159,10,"ExpoFontLoader"],[184,35,159,24],[184,36,159,25,"unloadAsync"],[184,47,159,36],[184,48,159,37,"fontFamily"],[184,58,159,47],[184,60,159,49,"options"],[184,67,159,56],[184,68,159,57],[185,4,160,0],[185,5,160,1],[186,4,160,1],[186,11,160,1,"_unloadFontInNamespaceAsync"],[186,38,160,1],[186,39,160,1,"apply"],[186,44,160,1],[186,51,160,1,"arguments"],[186,60,160,1],[187,2,160,1],[188,0,160,1],[188,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"}},"type":"js/module"}]}