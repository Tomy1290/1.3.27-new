{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./Colors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":14},"end":{"line":11,"column":18,"index":131}}],"key":"zR6Hzer+l+w/2Wpfyy2UztSb1Pk=","exportNames":["*"]}},{"name":"./core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":182},"end":{"line":13,"column":37,"index":219}}],"key":"0ONCEUiDM4TuRiJMnypk4k7v4nE=","exportNames":["*"]}},{"name":"./culori","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":220},"end":{"line":14,"column":30,"index":250}}],"key":"4qS0vmAbB8g1HsXN+jyiAPHnocA=","exportNames":["*"]}},{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":251},"end":{"line":15,"column":43,"index":294}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./hook/useSharedValue","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":295},"end":{"line":16,"column":55,"index":350}}],"key":"i4Ic8zb0vc+XX5SmwW/ZGhEhmb4=","exportNames":["*"]}},{"name":"./interpolation","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":351},"end":{"line":17,"column":61,"index":412}}],"key":"Sh+s0sg7+1xEfnYiVkwzHVXvd5Q=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.interpolateColor = exports.Extrapolate = exports.ColorSpace = undefined;\n  exports.useInterpolateConfig = useInterpolateConfig;\n  var _Colors = require(_dependencyMap[1]);\n  var _core = require(_dependencyMap[2]);\n  var _culori = _interopRequireDefault(require(_dependencyMap[3]));\n  var _errors = require(_dependencyMap[4]);\n  var _useSharedValue = require(_dependencyMap[5]);\n  var _interpolation = require(_dependencyMap[6]);\n  /** @deprecated Please use Extrapolation instead */\n  var Extrapolate = exports.Extrapolate = _interpolation.Extrapolation;\n\n  /**\n   * Options for color interpolation.\n   *\n   * @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.\n   * @param useCorrectedHSVInterpolation - Whether to reduce the number of colors\n   *   the interpolation has to go through. Defaults to `true`.\n   */\n  var _worklet_8351409175469_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs1(value,inputRange,colors,options){const{interpolate,Extrapolation,hsvToColor}=this.__closure;let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolation.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolation.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolation.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);return hsvToColor(h,s,v,a);}\"\n  };\n  var interpolateColorsHSV = function () {\n    var reactNativeReanimated_interpolateColorTs1 = function (value, inputRange, colors, options) {\n      var h = 0;\n      var _options$useCorrected = options.useCorrectedHSVInterpolation,\n        useCorrectedHSVInterpolation = _options$useCorrected === undefined ? true : _options$useCorrected;\n      if (useCorrectedHSVInterpolation) {\n        // if the difference between hues in a range is > 180 deg\n        // then move the hue at the right end of the range +/- 360 deg\n        // and add the next point in the original place + 0.00001 with original hue\n        // to not break the next range\n        var correctedInputRange = [inputRange[0]];\n        var originalH = colors.h;\n        var correctedH = [originalH[0]];\n        for (var i = 1; i < originalH.length; ++i) {\n          var d = originalH[i] - originalH[i - 1];\n          if (originalH[i] > originalH[i - 1] && d > 0.5) {\n            correctedInputRange.push(inputRange[i]);\n            correctedInputRange.push(inputRange[i] + 0.00001);\n            correctedH.push(originalH[i] - 1);\n            correctedH.push(originalH[i]);\n          } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n            correctedInputRange.push(inputRange[i]);\n            correctedInputRange.push(inputRange[i] + 0.00001);\n            correctedH.push(originalH[i] + 1);\n            correctedH.push(originalH[i]);\n          } else {\n            correctedInputRange.push(inputRange[i]);\n            correctedH.push(originalH[i]);\n          }\n        }\n        h = ((0, _interpolation.interpolate)(value, correctedInputRange, correctedH, _interpolation.Extrapolation.CLAMP) + 1) % 1;\n      } else {\n        h = (0, _interpolation.interpolate)(value, inputRange, colors.h, _interpolation.Extrapolation.CLAMP);\n      }\n      var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, _interpolation.Extrapolation.CLAMP);\n      var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, _interpolation.Extrapolation.CLAMP);\n      var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);\n      return (0, _Colors.hsvToColor)(h, s, v, a);\n    };\n    reactNativeReanimated_interpolateColorTs1.__closure = {\n      interpolate: _interpolation.interpolate,\n      Extrapolation: _interpolation.Extrapolation,\n      hsvToColor: _Colors.hsvToColor\n    };\n    reactNativeReanimated_interpolateColorTs1.__workletHash = 8351409175469;\n    reactNativeReanimated_interpolateColorTs1.__initData = _worklet_8351409175469_init_data;\n    return reactNativeReanimated_interpolateColorTs1;\n  }();\n  var _worklet_4368433701766_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs2(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\"\n  };\n  var toLinearSpace = function () {\n    var reactNativeReanimated_interpolateColorTs2 = function (x, gamma) {\n      return x.map(v => Math.pow(v / 255, gamma));\n    };\n    reactNativeReanimated_interpolateColorTs2.__closure = {};\n    reactNativeReanimated_interpolateColorTs2.__workletHash = 4368433701766;\n    reactNativeReanimated_interpolateColorTs2.__initData = _worklet_4368433701766_init_data;\n    return reactNativeReanimated_interpolateColorTs2;\n  }();\n  var _worklet_6610343372134_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs3(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\"\n  };\n  var toGammaSpace = function () {\n    var reactNativeReanimated_interpolateColorTs3 = function (x, gamma) {\n      return Math.round(Math.pow(x, 1 / gamma) * 255);\n    };\n    reactNativeReanimated_interpolateColorTs3.__closure = {};\n    reactNativeReanimated_interpolateColorTs3.__workletHash = 6610343372134;\n    reactNativeReanimated_interpolateColorTs3.__initData = _worklet_6610343372134_init_data;\n    return reactNativeReanimated_interpolateColorTs3;\n  }();\n  var _worklet_4309093770970_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs4(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolation,rgbaColor,toGammaSpace}=this.__closure;const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolation.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolation.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}\"\n  };\n  var interpolateColorsRGB = function () {\n    var reactNativeReanimated_interpolateColorTs4 = function (value, inputRange, colors, options) {\n      var _options$gamma = options.gamma,\n        gamma = _options$gamma === undefined ? 2.2 : _options$gamma;\n      var outputR = colors.r,\n        outputG = colors.g,\n        outputB = colors.b;\n      if (gamma !== 1) {\n        outputR = toLinearSpace(outputR, gamma);\n        outputG = toLinearSpace(outputG, gamma);\n        outputB = toLinearSpace(outputB, gamma);\n      }\n      var r = (0, _interpolation.interpolate)(value, inputRange, outputR, _interpolation.Extrapolation.CLAMP);\n      var g = (0, _interpolation.interpolate)(value, inputRange, outputG, _interpolation.Extrapolation.CLAMP);\n      var b = (0, _interpolation.interpolate)(value, inputRange, outputB, _interpolation.Extrapolation.CLAMP);\n      var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);\n      if (gamma === 1) {\n        return (0, _Colors.rgbaColor)(r, g, b, a);\n      }\n      return (0, _Colors.rgbaColor)(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n    };\n    reactNativeReanimated_interpolateColorTs4.__closure = {\n      toLinearSpace,\n      interpolate: _interpolation.interpolate,\n      Extrapolation: _interpolation.Extrapolation,\n      rgbaColor: _Colors.rgbaColor,\n      toGammaSpace\n    };\n    reactNativeReanimated_interpolateColorTs4.__workletHash = 4309093770970;\n    reactNativeReanimated_interpolateColorTs4.__initData = _worklet_4309093770970_init_data;\n    return reactNativeReanimated_interpolateColorTs4;\n  }();\n  var _worklet_12431767338194_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs5(value,inputRange,colors,_options){const{interpolate,Extrapolation,culori,rgbaColor}=this.__closure;const l=interpolate(value,inputRange,colors.l,Extrapolation.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolation.CLAMP);const b=interpolate(value,inputRange,colors.b,Extrapolation.CLAMP);const alpha=interpolate(value,inputRange,colors.alpha,Extrapolation.CLAMP);const{r:_r,g:_g,b:_b,alpha:_alpha}=culori.oklab.convert.toRgb({l:l,a:a,b:b,alpha:alpha});return rgbaColor(_r,_g,_b,_alpha);}\"\n  };\n  var interpolateColorsLAB = function () {\n    var reactNativeReanimated_interpolateColorTs5 = function (value, inputRange, colors, _options) {\n      var l = (0, _interpolation.interpolate)(value, inputRange, colors.l, _interpolation.Extrapolation.CLAMP);\n      var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);\n      var b = (0, _interpolation.interpolate)(value, inputRange, colors.b, _interpolation.Extrapolation.CLAMP);\n      var alpha = (0, _interpolation.interpolate)(value, inputRange, colors.alpha, _interpolation.Extrapolation.CLAMP);\n      var _culori$oklab$convert = _culori.default.oklab.convert.toRgb({\n          l,\n          a,\n          b,\n          alpha\n        }),\n        _r = _culori$oklab$convert.r,\n        _g = _culori$oklab$convert.g,\n        _b = _culori$oklab$convert.b,\n        _alpha = _culori$oklab$convert.alpha;\n      return (0, _Colors.rgbaColor)(_r, _g, _b, _alpha);\n    };\n    reactNativeReanimated_interpolateColorTs5.__closure = {\n      interpolate: _interpolation.interpolate,\n      Extrapolation: _interpolation.Extrapolation,\n      culori: _culori.default,\n      rgbaColor: _Colors.rgbaColor\n    };\n    reactNativeReanimated_interpolateColorTs5.__workletHash = 12431767338194;\n    reactNativeReanimated_interpolateColorTs5.__initData = _worklet_12431767338194_init_data;\n    return reactNativeReanimated_interpolateColorTs5;\n  }();\n  var _worklet_14521513267525_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs6(colors,convFromRgb){const{processColor,red,green,blue,opacity}=this.__closure;const ch1=[];const ch2=[];const ch3=[];const alpha=[];for(let i=0;i<colors.length;i++){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const convertedColor=convFromRgb({r:red(processedColor),g:green(processedColor),b:blue(processedColor)});ch1.push(convertedColor.ch1);ch2.push(convertedColor.ch2);ch3.push(convertedColor.ch3);alpha.push(opacity(processedColor));}}return{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha};}\"\n  };\n  var _splitColorsIntoChannels = function () {\n    var reactNativeReanimated_interpolateColorTs6 = function (colors, convFromRgb) {\n      var ch1 = [];\n      var ch2 = [];\n      var ch3 = [];\n      var alpha = [];\n      for (var i = 0; i < colors.length; i++) {\n        var color = colors[i];\n        var processedColor = (0, _Colors.processColor)(color);\n        if (typeof processedColor === 'number') {\n          var convertedColor = convFromRgb({\n            r: (0, _Colors.red)(processedColor),\n            g: (0, _Colors.green)(processedColor),\n            b: (0, _Colors.blue)(processedColor)\n          });\n          ch1.push(convertedColor.ch1);\n          ch2.push(convertedColor.ch2);\n          ch3.push(convertedColor.ch3);\n          alpha.push((0, _Colors.opacity)(processedColor));\n        }\n      }\n      return {\n        ch1,\n        ch2,\n        ch3,\n        alpha\n      };\n    };\n    reactNativeReanimated_interpolateColorTs6.__closure = {\n      processColor: _Colors.processColor,\n      red: _Colors.red,\n      green: _Colors.green,\n      blue: _Colors.blue,\n      opacity: _Colors.opacity\n    };\n    reactNativeReanimated_interpolateColorTs6.__workletHash = 14521513267525;\n    reactNativeReanimated_interpolateColorTs6.__initData = _worklet_14521513267525_init_data;\n    return reactNativeReanimated_interpolateColorTs6;\n  }();\n  var _worklet_8624448141679_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs7(colors){const{_splitColorsIntoChannels}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){return{ch1:color.r,ch2:color.g,ch3:color.b};});return{r:ch1,g:ch2,b:ch3,a:alpha};}\"\n  };\n  var getInterpolateRGB = function () {\n    var reactNativeReanimated_interpolateColorTs7 = function (colors) {\n      var _splitColorsIntoChann = _splitColorsIntoChannels(colors, color => ({\n          ch1: color.r,\n          ch2: color.g,\n          ch3: color.b\n        })),\n        ch1 = _splitColorsIntoChann.ch1,\n        ch2 = _splitColorsIntoChann.ch2,\n        ch3 = _splitColorsIntoChann.ch3,\n        alpha = _splitColorsIntoChann.alpha;\n      return {\n        r: ch1,\n        g: ch2,\n        b: ch3,\n        a: alpha\n      };\n    };\n    reactNativeReanimated_interpolateColorTs7.__closure = {\n      _splitColorsIntoChannels\n    };\n    reactNativeReanimated_interpolateColorTs7.__workletHash = 8624448141679;\n    reactNativeReanimated_interpolateColorTs7.__initData = _worklet_8624448141679_init_data;\n    return reactNativeReanimated_interpolateColorTs7;\n  }();\n  var _worklet_16817866662391_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs8(colors){const{_splitColorsIntoChannels,RGBtoHSV}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){const hsvColor=RGBtoHSV(color.r,color.g,color.b);return{ch1:hsvColor.h,ch2:hsvColor.s,ch3:hsvColor.v};});return{h:ch1,s:ch2,v:ch3,a:alpha};}\"\n  };\n  var getInterpolateHSV = function () {\n    var reactNativeReanimated_interpolateColorTs8 = function (colors) {\n      var _splitColorsIntoChann2 = _splitColorsIntoChannels(colors, color => {\n          var hsvColor = (0, _Colors.RGBtoHSV)(color.r, color.g, color.b);\n          return {\n            ch1: hsvColor.h,\n            ch2: hsvColor.s,\n            ch3: hsvColor.v\n          };\n        }),\n        ch1 = _splitColorsIntoChann2.ch1,\n        ch2 = _splitColorsIntoChann2.ch2,\n        ch3 = _splitColorsIntoChann2.ch3,\n        alpha = _splitColorsIntoChann2.alpha;\n      return {\n        h: ch1,\n        s: ch2,\n        v: ch3,\n        a: alpha\n      };\n    };\n    reactNativeReanimated_interpolateColorTs8.__closure = {\n      _splitColorsIntoChannels,\n      RGBtoHSV: _Colors.RGBtoHSV\n    };\n    reactNativeReanimated_interpolateColorTs8.__workletHash = 16817866662391;\n    reactNativeReanimated_interpolateColorTs8.__initData = _worklet_16817866662391_init_data;\n    return reactNativeReanimated_interpolateColorTs8;\n  }();\n  var _worklet_4292020092329_init_data = {\n    code: \"function reactNativeReanimated_interpolateColorTs9(colors){const{_splitColorsIntoChannels,culori}=this.__closure;const{ch1:ch1,ch2:ch2,ch3:ch3,alpha:alpha}=_splitColorsIntoChannels(colors,function(color){const labColor=culori.oklab.convert.fromRgb(color);return{ch1:labColor.l,ch2:labColor.a,ch3:labColor.b};});return{l:ch1,a:ch2,b:ch3,alpha:alpha};}\"\n  };\n  var getInterpolateLAB = function () {\n    var reactNativeReanimated_interpolateColorTs9 = function (colors) {\n      var _splitColorsIntoChann3 = _splitColorsIntoChannels(colors, color => {\n          var labColor = _culori.default.oklab.convert.fromRgb(color);\n          return {\n            ch1: labColor.l,\n            ch2: labColor.a,\n            ch3: labColor.b\n          };\n        }),\n        ch1 = _splitColorsIntoChann3.ch1,\n        ch2 = _splitColorsIntoChann3.ch2,\n        ch3 = _splitColorsIntoChann3.ch3,\n        alpha = _splitColorsIntoChann3.alpha;\n      return {\n        l: ch1,\n        a: ch2,\n        b: ch3,\n        alpha\n      };\n    };\n    reactNativeReanimated_interpolateColorTs9.__closure = {\n      _splitColorsIntoChannels,\n      culori: _culori.default\n    };\n    reactNativeReanimated_interpolateColorTs9.__workletHash = 4292020092329;\n    reactNativeReanimated_interpolateColorTs9.__initData = _worklet_4292020092329_init_data;\n    return reactNativeReanimated_interpolateColorTs9;\n  }();\n\n  /**\n   * Lets you map a value from a range of numbers to a range of colors using\n   * linear interpolation.\n   *\n   * @param value - A number from the `input` range that is going to be mapped to\n   *   the color in the `output` range.\n   * @param inputRange - An array of numbers specifying the input range of the\n   *   interpolation.\n   * @param outputRange - An array of output colors values (eg. \"red\", \"#00FFCC\",\n   *   \"rgba(255, 0, 0, 0.5)\").\n   * @param colorSpace - The color space to use for interpolation. Defaults to\n   *   'RGB'.\n   * @param options - Additional options for interpolation -\n   *   {@link InterpolationOptions}.\n   * @returns The color after interpolation from within the output range in\n   *   rgba(r, g, b, a) format.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor\n   */\n  var _worklet_7877560832453_init_data = {\n    code: \"function interpolateColor_reactNativeReanimated_interpolateColorTs10(value,inputRange,outputRange,colorSpace='RGB',options={}){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB,interpolateColorsLAB,getInterpolateLAB}=this.__closure;if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}else if(colorSpace==='LAB'){return interpolateColorsLAB(value,inputRange,getInterpolateLAB(outputRange),options);}throw new ReanimatedError(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV', 'LAB'].\\\");}\"\n  };\n  var interpolateColor = exports.interpolateColor = function () {\n    var interpolateColor = function (value, inputRange, outputRange) {\n      var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n      } else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n      } else if (colorSpace === 'LAB') {\n        return interpolateColorsLAB(value, inputRange, getInterpolateLAB(outputRange), options);\n      }\n      throw new _errors.ReanimatedError(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV', 'LAB'].`);\n    };\n    interpolateColor.__closure = {\n      interpolateColorsHSV,\n      getInterpolateHSV,\n      interpolateColorsRGB,\n      getInterpolateRGB,\n      interpolateColorsLAB,\n      getInterpolateLAB\n    };\n    interpolateColor.__workletHash = 7877560832453;\n    interpolateColor.__initData = _worklet_7877560832453_init_data;\n    return interpolateColor;\n  }();\n  var ColorSpace = exports.ColorSpace = /*#__PURE__*/function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n    ColorSpace[ColorSpace[\"LAB\"] = 2] = \"LAB\";\n    return ColorSpace;\n  }({});\n  function useInterpolateConfig(inputRange, outputRange) {\n    var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return (0, _useSharedValue.useSharedValue)({\n      inputRange,\n      outputRange,\n      colorSpace,\n      cache: (0, _core.makeMutable)(null),\n      options\n    });\n  }\n});","lineCount":365,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"interpolateColor"],[8,26,1,13],[8,29,1,13,"exports"],[8,36,1,13],[8,37,1,13,"Extrapolate"],[8,48,1,13],[8,51,1,13,"exports"],[8,58,1,13],[8,59,1,13,"ColorSpace"],[8,69,1,13],[8,72,1,13,"undefined"],[8,81,1,13],[9,2,1,13,"exports"],[9,9,1,13],[9,10,1,13,"useInterpolateConfig"],[9,30,1,13],[9,33,1,13,"useInterpolateConfig"],[9,53,1,13],[10,2,2,0],[10,6,2,0,"_Colors"],[10,13,2,0],[10,16,2,0,"require"],[10,23,2,0],[10,24,2,0,"_dependencyMap"],[10,38,2,0],[11,2,13,0],[11,6,13,0,"_core"],[11,11,13,0],[11,14,13,0,"require"],[11,21,13,0],[11,22,13,0,"_dependencyMap"],[11,36,13,0],[12,2,14,0],[12,6,14,0,"_culori"],[12,13,14,0],[12,16,14,0,"_interopRequireDefault"],[12,38,14,0],[12,39,14,0,"require"],[12,46,14,0],[12,47,14,0,"_dependencyMap"],[12,61,14,0],[13,2,15,0],[13,6,15,0,"_errors"],[13,13,15,0],[13,16,15,0,"require"],[13,23,15,0],[13,24,15,0,"_dependencyMap"],[13,38,15,0],[14,2,16,0],[14,6,16,0,"_useSharedValue"],[14,21,16,0],[14,24,16,0,"require"],[14,31,16,0],[14,32,16,0,"_dependencyMap"],[14,46,16,0],[15,2,17,0],[15,6,17,0,"_interpolation"],[15,20,17,0],[15,23,17,0,"require"],[15,30,17,0],[15,31,17,0,"_dependencyMap"],[15,45,17,0],[16,2,19,0],[17,2,20,7],[17,6,20,13,"Extrapolate"],[17,17,20,24],[17,20,20,24,"exports"],[17,27,20,24],[17,28,20,24,"Extrapolate"],[17,39,20,24],[17,42,20,27,"Extrapolation"],[17,70,20,40],[19,2,22,0],[20,0,23,0],[21,0,24,0],[22,0,25,0],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,2,22,0],[26,6,22,0,"_worklet_8351409175469_init_data"],[26,38,22,0],[27,4,22,0,"code"],[27,8,22,0],[28,2,22,0],[29,2,34,0],[29,6,34,6,"interpolateColorsHSV"],[29,26,34,26],[29,29,34,29],[30,4,34,29],[30,8,34,29,"reactNativeReanimated_interpolateColorTs1"],[30,49,34,29],[30,61,34,29,"reactNativeReanimated_interpolateColorTs1"],[30,62,35,2,"value"],[30,67,35,15],[30,69,36,2,"inputRange"],[30,79,36,31],[30,81,37,2,"colors"],[30,87,37,24],[30,89,38,2,"options"],[30,96,38,31],[30,98,39,5],[31,6,41,2],[31,10,41,6,"h"],[31,11,41,7],[31,14,41,10],[31,15,41,11],[32,6,42,2],[32,10,42,2,"_options$useCorrected"],[32,31,42,2],[32,34,42,50,"options"],[32,41,42,57],[32,42,42,10,"useCorrectedHSVInterpolation"],[32,70,42,38],[33,8,42,10,"useCorrectedHSVInterpolation"],[33,36,42,38],[33,39,42,38,"_options$useCorrected"],[33,60,42,38],[33,65,42,38,"undefined"],[33,74,42,38],[33,77,42,41],[33,81,42,45],[33,84,42,45,"_options$useCorrected"],[33,105,42,45],[34,6,43,2],[34,10,43,6,"useCorrectedHSVInterpolation"],[34,38,43,34],[34,40,43,36],[35,8,44,4],[36,8,45,4],[37,8,46,4],[38,8,47,4],[39,8,48,4],[39,12,48,10,"correctedInputRange"],[39,31,48,29],[39,34,48,32],[39,35,48,33,"inputRange"],[39,45,48,43],[39,46,48,44],[39,47,48,45],[39,48,48,46],[39,49,48,47],[40,8,49,4],[40,12,49,10,"originalH"],[40,21,49,19],[40,24,49,22,"colors"],[40,30,49,28],[40,31,49,29,"h"],[40,32,49,30],[41,8,50,4],[41,12,50,10,"correctedH"],[41,22,50,20],[41,25,50,23],[41,26,50,24,"originalH"],[41,35,50,33],[41,36,50,34],[41,37,50,35],[41,38,50,36],[41,39,50,37],[42,8,52,4],[42,13,52,9],[42,17,52,13,"i"],[42,18,52,14],[42,21,52,17],[42,22,52,18],[42,24,52,20,"i"],[42,25,52,21],[42,28,52,24,"originalH"],[42,37,52,33],[42,38,52,34,"length"],[42,44,52,40],[42,46,52,42],[42,48,52,44,"i"],[42,49,52,45],[42,51,52,47],[43,10,53,6],[43,14,53,12,"d"],[43,15,53,13],[43,18,53,16,"originalH"],[43,27,53,25],[43,28,53,26,"i"],[43,29,53,27],[43,30,53,28],[43,33,53,31,"originalH"],[43,42,53,40],[43,43,53,41,"i"],[43,44,53,42],[43,47,53,45],[43,48,53,46],[43,49,53,47],[44,10,54,6],[44,14,54,10,"originalH"],[44,23,54,19],[44,24,54,20,"i"],[44,25,54,21],[44,26,54,22],[44,29,54,25,"originalH"],[44,38,54,34],[44,39,54,35,"i"],[44,40,54,36],[44,43,54,39],[44,44,54,40],[44,45,54,41],[44,49,54,45,"d"],[44,50,54,46],[44,53,54,49],[44,56,54,52],[44,58,54,54],[45,12,55,8,"correctedInputRange"],[45,31,55,27],[45,32,55,28,"push"],[45,36,55,32],[45,37,55,33,"inputRange"],[45,47,55,43],[45,48,55,44,"i"],[45,49,55,45],[45,50,55,46],[45,51,55,47],[46,12,56,8,"correctedInputRange"],[46,31,56,27],[46,32,56,28,"push"],[46,36,56,32],[46,37,56,33,"inputRange"],[46,47,56,43],[46,48,56,44,"i"],[46,49,56,45],[46,50,56,46],[46,53,56,49],[46,60,56,56],[46,61,56,57],[47,12,57,8,"correctedH"],[47,22,57,18],[47,23,57,19,"push"],[47,27,57,23],[47,28,57,24,"originalH"],[47,37,57,33],[47,38,57,34,"i"],[47,39,57,35],[47,40,57,36],[47,43,57,39],[47,44,57,40],[47,45,57,41],[48,12,58,8,"correctedH"],[48,22,58,18],[48,23,58,19,"push"],[48,27,58,23],[48,28,58,24,"originalH"],[48,37,58,33],[48,38,58,34,"i"],[48,39,58,35],[48,40,58,36],[48,41,58,37],[49,10,59,6],[49,11,59,7],[49,17,59,13],[49,21,59,17,"originalH"],[49,30,59,26],[49,31,59,27,"i"],[49,32,59,28],[49,33,59,29],[49,36,59,32,"originalH"],[49,45,59,41],[49,46,59,42,"i"],[49,47,59,43],[49,50,59,46],[49,51,59,47],[49,52,59,48],[49,56,59,52,"d"],[49,57,59,53],[49,64,59,60],[49,66,59,62],[50,12,60,8,"correctedInputRange"],[50,31,60,27],[50,32,60,28,"push"],[50,36,60,32],[50,37,60,33,"inputRange"],[50,47,60,43],[50,48,60,44,"i"],[50,49,60,45],[50,50,60,46],[50,51,60,47],[51,12,61,8,"correctedInputRange"],[51,31,61,27],[51,32,61,28,"push"],[51,36,61,32],[51,37,61,33,"inputRange"],[51,47,61,43],[51,48,61,44,"i"],[51,49,61,45],[51,50,61,46],[51,53,61,49],[51,60,61,56],[51,61,61,57],[52,12,62,8,"correctedH"],[52,22,62,18],[52,23,62,19,"push"],[52,27,62,23],[52,28,62,24,"originalH"],[52,37,62,33],[52,38,62,34,"i"],[52,39,62,35],[52,40,62,36],[52,43,62,39],[52,44,62,40],[52,45,62,41],[53,12,63,8,"correctedH"],[53,22,63,18],[53,23,63,19,"push"],[53,27,63,23],[53,28,63,24,"originalH"],[53,37,63,33],[53,38,63,34,"i"],[53,39,63,35],[53,40,63,36],[53,41,63,37],[54,10,64,6],[54,11,64,7],[54,17,64,13],[55,12,65,8,"correctedInputRange"],[55,31,65,27],[55,32,65,28,"push"],[55,36,65,32],[55,37,65,33,"inputRange"],[55,47,65,43],[55,48,65,44,"i"],[55,49,65,45],[55,50,65,46],[55,51,65,47],[56,12,66,8,"correctedH"],[56,22,66,18],[56,23,66,19,"push"],[56,27,66,23],[56,28,66,24,"originalH"],[56,37,66,33],[56,38,66,34,"i"],[56,39,66,35],[56,40,66,36],[56,41,66,37],[57,10,67,6],[58,8,68,4],[59,8,69,4,"h"],[59,9,69,5],[59,12,70,6],[59,13,70,7],[59,17,70,7,"interpolate"],[59,43,70,18],[59,45,71,8,"value"],[59,50,71,13],[59,52,72,8,"correctedInputRange"],[59,71,72,27],[59,73,73,8,"correctedH"],[59,83,73,18],[59,85,74,8,"Extrapolation"],[59,113,74,21],[59,114,74,22,"CLAMP"],[59,119,75,6],[59,120,75,7],[59,123,76,8],[59,124,76,9],[59,128,77,6],[59,129,77,7],[60,6,78,2],[60,7,78,3],[60,13,78,9],[61,8,79,4,"h"],[61,9,79,5],[61,12,79,8],[61,16,79,8,"interpolate"],[61,42,79,19],[61,44,79,20,"value"],[61,49,79,25],[61,51,79,27,"inputRange"],[61,61,79,37],[61,63,79,39,"colors"],[61,69,79,45],[61,70,79,46,"h"],[61,71,79,47],[61,73,79,49,"Extrapolation"],[61,101,79,62],[61,102,79,63,"CLAMP"],[61,107,79,68],[61,108,79,69],[62,6,80,2],[63,6,81,2],[63,10,81,8,"s"],[63,11,81,9],[63,14,81,12],[63,18,81,12,"interpolate"],[63,44,81,23],[63,46,81,24,"value"],[63,51,81,29],[63,53,81,31,"inputRange"],[63,63,81,41],[63,65,81,43,"colors"],[63,71,81,49],[63,72,81,50,"s"],[63,73,81,51],[63,75,81,53,"Extrapolation"],[63,103,81,66],[63,104,81,67,"CLAMP"],[63,109,81,72],[63,110,81,73],[64,6,82,2],[64,10,82,8,"v"],[64,11,82,9],[64,14,82,12],[64,18,82,12,"interpolate"],[64,44,82,23],[64,46,82,24,"value"],[64,51,82,29],[64,53,82,31,"inputRange"],[64,63,82,41],[64,65,82,43,"colors"],[64,71,82,49],[64,72,82,50,"v"],[64,73,82,51],[64,75,82,53,"Extrapolation"],[64,103,82,66],[64,104,82,67,"CLAMP"],[64,109,82,72],[64,110,82,73],[65,6,83,2],[65,10,83,8,"a"],[65,11,83,9],[65,14,83,12],[65,18,83,12,"interpolate"],[65,44,83,23],[65,46,83,24,"value"],[65,51,83,29],[65,53,83,31,"inputRange"],[65,63,83,41],[65,65,83,43,"colors"],[65,71,83,49],[65,72,83,50,"a"],[65,73,83,51],[65,75,83,53,"Extrapolation"],[65,103,83,66],[65,104,83,67,"CLAMP"],[65,109,83,72],[65,110,83,73],[66,6,84,2],[66,13,84,9],[66,17,84,9,"hsvToColor"],[66,35,84,19],[66,37,84,20,"h"],[66,38,84,21],[66,40,84,23,"s"],[66,41,84,24],[66,43,84,26,"v"],[66,44,84,27],[66,46,84,29,"a"],[66,47,84,30],[66,48,84,31],[67,4,85,0],[67,5,85,1],[68,4,85,1,"reactNativeReanimated_interpolateColorTs1"],[68,45,85,1],[68,46,85,1,"__closure"],[68,55,85,1],[69,6,85,1,"interpolate"],[69,17,85,1],[69,19,70,7,"interpolate"],[69,45,70,18],[70,6,70,18,"Extrapolation"],[70,19,70,18],[70,21,74,8,"Extrapolation"],[70,49,74,21],[71,6,74,21,"hsvToColor"],[71,16,74,21],[71,18,84,9,"hsvToColor"],[72,4,84,19],[73,4,84,19,"reactNativeReanimated_interpolateColorTs1"],[73,45,84,19],[73,46,84,19,"__workletHash"],[73,59,84,19],[74,4,84,19,"reactNativeReanimated_interpolateColorTs1"],[74,45,84,19],[74,46,84,19,"__initData"],[74,56,84,19],[74,59,84,19,"_worklet_8351409175469_init_data"],[74,91,84,19],[75,4,84,19],[75,11,84,19,"reactNativeReanimated_interpolateColorTs1"],[75,52,84,19],[76,2,84,19],[76,3,34,29],[76,5,85,1],[77,2,85,2],[77,6,85,2,"_worklet_4368433701766_init_data"],[77,38,85,2],[78,4,85,2,"code"],[78,8,85,2],[79,2,85,2],[80,2,87,0],[80,6,87,6,"toLinearSpace"],[80,19,87,19],[80,22,87,22],[81,4,87,22],[81,8,87,22,"reactNativeReanimated_interpolateColorTs2"],[81,49,87,22],[81,61,87,22,"reactNativeReanimated_interpolateColorTs2"],[81,62,87,23,"x"],[81,63,87,34],[81,65,87,36,"gamma"],[81,70,87,49],[81,72,87,64],[82,6,89,2],[82,13,89,9,"x"],[82,14,89,10],[82,15,89,11,"map"],[82,18,89,14],[82,19,89,16,"v"],[82,20,89,17],[82,24,89,22,"Math"],[82,28,89,26],[82,29,89,27,"pow"],[82,32,89,30],[82,33,89,31,"v"],[82,34,89,32],[82,37,89,35],[82,40,89,38],[82,42,89,40,"gamma"],[82,47,89,45],[82,48,89,46],[82,49,89,47],[83,4,90,0],[83,5,90,1],[84,4,90,1,"reactNativeReanimated_interpolateColorTs2"],[84,45,90,1],[84,46,90,1,"__closure"],[84,55,90,1],[85,4,90,1,"reactNativeReanimated_interpolateColorTs2"],[85,45,90,1],[85,46,90,1,"__workletHash"],[85,59,90,1],[86,4,90,1,"reactNativeReanimated_interpolateColorTs2"],[86,45,90,1],[86,46,90,1,"__initData"],[86,56,90,1],[86,59,90,1,"_worklet_4368433701766_init_data"],[86,91,90,1],[87,4,90,1],[87,11,90,1,"reactNativeReanimated_interpolateColorTs2"],[87,52,90,1],[88,2,90,1],[88,3,87,22],[88,5,90,1],[89,2,90,2],[89,6,90,2,"_worklet_6610343372134_init_data"],[89,38,90,2],[90,4,90,2,"code"],[90,8,90,2],[91,2,90,2],[92,2,92,0],[92,6,92,6,"toGammaSpace"],[92,18,92,18],[92,21,92,21],[93,4,92,21],[93,8,92,21,"reactNativeReanimated_interpolateColorTs3"],[93,49,92,21],[93,61,92,21,"reactNativeReanimated_interpolateColorTs3"],[93,62,92,22,"x"],[93,63,92,31],[93,65,92,33,"gamma"],[93,70,92,46],[93,72,92,59],[94,6,94,2],[94,13,94,9,"Math"],[94,17,94,13],[94,18,94,14,"round"],[94,23,94,19],[94,24,94,20,"Math"],[94,28,94,24],[94,29,94,25,"pow"],[94,32,94,28],[94,33,94,29,"x"],[94,34,94,30],[94,36,94,32],[94,37,94,33],[94,40,94,36,"gamma"],[94,45,94,41],[94,46,94,42],[94,49,94,45],[94,52,94,48],[94,53,94,49],[95,4,95,0],[95,5,95,1],[96,4,95,1,"reactNativeReanimated_interpolateColorTs3"],[96,45,95,1],[96,46,95,1,"__closure"],[96,55,95,1],[97,4,95,1,"reactNativeReanimated_interpolateColorTs3"],[97,45,95,1],[97,46,95,1,"__workletHash"],[97,59,95,1],[98,4,95,1,"reactNativeReanimated_interpolateColorTs3"],[98,45,95,1],[98,46,95,1,"__initData"],[98,56,95,1],[98,59,95,1,"_worklet_6610343372134_init_data"],[98,91,95,1],[99,4,95,1],[99,11,95,1,"reactNativeReanimated_interpolateColorTs3"],[99,52,95,1],[100,2,95,1],[100,3,92,21],[100,5,95,1],[101,2,95,2],[101,6,95,2,"_worklet_4309093770970_init_data"],[101,38,95,2],[102,4,95,2,"code"],[102,8,95,2],[103,2,95,2],[104,2,97,0],[104,6,97,6,"interpolateColorsRGB"],[104,26,97,26],[104,29,97,29],[105,4,97,29],[105,8,97,29,"reactNativeReanimated_interpolateColorTs4"],[105,49,97,29],[105,61,97,29,"reactNativeReanimated_interpolateColorTs4"],[105,62,98,2,"value"],[105,67,98,15],[105,69,99,2,"inputRange"],[105,79,99,31],[105,81,100,2,"colors"],[105,87,100,24],[105,89,101,2,"options"],[105,96,101,31],[105,98,102,5],[106,6,104,2],[106,10,104,2,"_options$gamma"],[106,24,104,2],[106,27,104,26,"options"],[106,34,104,33],[106,35,104,10,"gamma"],[106,40,104,15],[107,8,104,10,"gamma"],[107,13,104,15],[107,16,104,15,"_options$gamma"],[107,30,104,15],[107,35,104,15,"undefined"],[107,44,104,15],[107,47,104,18],[107,50,104,21],[107,53,104,21,"_options$gamma"],[107,67,104,21],[108,6,105,2],[108,10,105,11,"outputR"],[108,17,105,18],[108,20,105,47,"colors"],[108,26,105,53],[108,27,105,8,"r"],[108,28,105,9],[109,8,105,23,"outputG"],[109,15,105,30],[109,18,105,47,"colors"],[109,24,105,53],[109,25,105,20,"g"],[109,26,105,21],[110,8,105,35,"outputB"],[110,15,105,42],[110,18,105,47,"colors"],[110,24,105,53],[110,25,105,32,"b"],[110,26,105,33],[111,6,106,2],[111,10,106,6,"gamma"],[111,15,106,11],[111,20,106,16],[111,21,106,17],[111,23,106,19],[112,8,107,4,"outputR"],[112,15,107,11],[112,18,107,14,"toLinearSpace"],[112,31,107,27],[112,32,107,28,"outputR"],[112,39,107,35],[112,41,107,37,"gamma"],[112,46,107,42],[112,47,107,43],[113,8,108,4,"outputG"],[113,15,108,11],[113,18,108,14,"toLinearSpace"],[113,31,108,27],[113,32,108,28,"outputG"],[113,39,108,35],[113,41,108,37,"gamma"],[113,46,108,42],[113,47,108,43],[114,8,109,4,"outputB"],[114,15,109,11],[114,18,109,14,"toLinearSpace"],[114,31,109,27],[114,32,109,28,"outputB"],[114,39,109,35],[114,41,109,37,"gamma"],[114,46,109,42],[114,47,109,43],[115,6,110,2],[116,6,111,2],[116,10,111,8,"r"],[116,11,111,9],[116,14,111,12],[116,18,111,12,"interpolate"],[116,44,111,23],[116,46,111,24,"value"],[116,51,111,29],[116,53,111,31,"inputRange"],[116,63,111,41],[116,65,111,43,"outputR"],[116,72,111,50],[116,74,111,52,"Extrapolation"],[116,102,111,65],[116,103,111,66,"CLAMP"],[116,108,111,71],[116,109,111,72],[117,6,112,2],[117,10,112,8,"g"],[117,11,112,9],[117,14,112,12],[117,18,112,12,"interpolate"],[117,44,112,23],[117,46,112,24,"value"],[117,51,112,29],[117,53,112,31,"inputRange"],[117,63,112,41],[117,65,112,43,"outputG"],[117,72,112,50],[117,74,112,52,"Extrapolation"],[117,102,112,65],[117,103,112,66,"CLAMP"],[117,108,112,71],[117,109,112,72],[118,6,113,2],[118,10,113,8,"b"],[118,11,113,9],[118,14,113,12],[118,18,113,12,"interpolate"],[118,44,113,23],[118,46,113,24,"value"],[118,51,113,29],[118,53,113,31,"inputRange"],[118,63,113,41],[118,65,113,43,"outputB"],[118,72,113,50],[118,74,113,52,"Extrapolation"],[118,102,113,65],[118,103,113,66,"CLAMP"],[118,108,113,71],[118,109,113,72],[119,6,114,2],[119,10,114,8,"a"],[119,11,114,9],[119,14,114,12],[119,18,114,12,"interpolate"],[119,44,114,23],[119,46,114,24,"value"],[119,51,114,29],[119,53,114,31,"inputRange"],[119,63,114,41],[119,65,114,43,"colors"],[119,71,114,49],[119,72,114,50,"a"],[119,73,114,51],[119,75,114,53,"Extrapolation"],[119,103,114,66],[119,104,114,67,"CLAMP"],[119,109,114,72],[119,110,114,73],[120,6,115,2],[120,10,115,6,"gamma"],[120,15,115,11],[120,20,115,16],[120,21,115,17],[120,23,115,19],[121,8,116,4],[121,15,116,11],[121,19,116,11,"rgbaColor"],[121,36,116,20],[121,38,116,21,"r"],[121,39,116,22],[121,41,116,24,"g"],[121,42,116,25],[121,44,116,27,"b"],[121,45,116,28],[121,47,116,30,"a"],[121,48,116,31],[121,49,116,32],[122,6,117,2],[123,6,118,2],[123,13,118,9],[123,17,118,9,"rgbaColor"],[123,34,118,18],[123,36,119,4,"toGammaSpace"],[123,48,119,16],[123,49,119,17,"r"],[123,50,119,18],[123,52,119,20,"gamma"],[123,57,119,25],[123,58,119,26],[123,60,120,4,"toGammaSpace"],[123,72,120,16],[123,73,120,17,"g"],[123,74,120,18],[123,76,120,20,"gamma"],[123,81,120,25],[123,82,120,26],[123,84,121,4,"toGammaSpace"],[123,96,121,16],[123,97,121,17,"b"],[123,98,121,18],[123,100,121,20,"gamma"],[123,105,121,25],[123,106,121,26],[123,108,122,4,"a"],[123,109,123,2],[123,110,123,3],[124,4,124,0],[124,5,124,1],[125,4,124,1,"reactNativeReanimated_interpolateColorTs4"],[125,45,124,1],[125,46,124,1,"__closure"],[125,55,124,1],[126,6,124,1,"toLinearSpace"],[126,19,124,1],[127,6,124,1,"interpolate"],[127,17,124,1],[127,19,111,12,"interpolate"],[127,45,111,23],[128,6,111,23,"Extrapolation"],[128,19,111,23],[128,21,111,52,"Extrapolation"],[128,49,111,65],[129,6,111,65,"rgbaColor"],[129,15,111,65],[129,17,116,11,"rgbaColor"],[129,34,116,20],[130,6,116,20,"toGammaSpace"],[131,4,116,20],[132,4,116,20,"reactNativeReanimated_interpolateColorTs4"],[132,45,116,20],[132,46,116,20,"__workletHash"],[132,59,116,20],[133,4,116,20,"reactNativeReanimated_interpolateColorTs4"],[133,45,116,20],[133,46,116,20,"__initData"],[133,56,116,20],[133,59,116,20,"_worklet_4309093770970_init_data"],[133,91,116,20],[134,4,116,20],[134,11,116,20,"reactNativeReanimated_interpolateColorTs4"],[134,52,116,20],[135,2,116,20],[135,3,97,29],[135,5,124,1],[136,2,124,2],[136,6,124,2,"_worklet_12431767338194_init_data"],[136,39,124,2],[137,4,124,2,"code"],[137,8,124,2],[138,2,124,2],[139,2,126,0],[139,6,126,6,"interpolateColorsLAB"],[139,26,126,26],[139,29,126,29],[140,4,126,29],[140,8,126,29,"reactNativeReanimated_interpolateColorTs5"],[140,49,126,29],[140,61,126,29,"reactNativeReanimated_interpolateColorTs5"],[140,62,127,2,"value"],[140,67,127,15],[140,69,128,2,"inputRange"],[140,79,128,31],[140,81,129,2,"colors"],[140,87,129,24],[140,89,130,2,"_options"],[140,97,130,32],[140,99,131,5],[141,6,133,2],[141,10,133,8,"l"],[141,11,133,9],[141,14,133,12],[141,18,133,12,"interpolate"],[141,44,133,23],[141,46,133,24,"value"],[141,51,133,29],[141,53,133,31,"inputRange"],[141,63,133,41],[141,65,133,43,"colors"],[141,71,133,49],[141,72,133,50,"l"],[141,73,133,51],[141,75,133,53,"Extrapolation"],[141,103,133,66],[141,104,133,67,"CLAMP"],[141,109,133,72],[141,110,133,73],[142,6,134,2],[142,10,134,8,"a"],[142,11,134,9],[142,14,134,12],[142,18,134,12,"interpolate"],[142,44,134,23],[142,46,134,24,"value"],[142,51,134,29],[142,53,134,31,"inputRange"],[142,63,134,41],[142,65,134,43,"colors"],[142,71,134,49],[142,72,134,50,"a"],[142,73,134,51],[142,75,134,53,"Extrapolation"],[142,103,134,66],[142,104,134,67,"CLAMP"],[142,109,134,72],[142,110,134,73],[143,6,135,2],[143,10,135,8,"b"],[143,11,135,9],[143,14,135,12],[143,18,135,12,"interpolate"],[143,44,135,23],[143,46,135,24,"value"],[143,51,135,29],[143,53,135,31,"inputRange"],[143,63,135,41],[143,65,135,43,"colors"],[143,71,135,49],[143,72,135,50,"b"],[143,73,135,51],[143,75,135,53,"Extrapolation"],[143,103,135,66],[143,104,135,67,"CLAMP"],[143,109,135,72],[143,110,135,73],[144,6,136,2],[144,10,136,8,"alpha"],[144,15,136,13],[144,18,136,16],[144,22,136,16,"interpolate"],[144,48,136,27],[144,50,137,4,"value"],[144,55,137,9],[144,57,138,4,"inputRange"],[144,67,138,14],[144,69,139,4,"colors"],[144,75,139,10],[144,76,139,11,"alpha"],[144,81,139,16],[144,83,140,4,"Extrapolation"],[144,111,140,17],[144,112,140,18,"CLAMP"],[144,117,141,2],[144,118,141,3],[145,6,142,2],[145,10,142,2,"_culori$oklab$convert"],[145,31,142,2],[145,34,147,6,"culori"],[145,49,147,12],[145,50,147,13,"oklab"],[145,55,147,18],[145,56,147,19,"convert"],[145,63,147,26],[145,64,147,27,"toRgb"],[145,69,147,32],[145,70,147,33],[146,10,147,35,"l"],[146,11,147,36],[147,10,147,38,"a"],[147,11,147,39],[148,10,147,41,"b"],[148,11,147,42],[149,10,147,44,"alpha"],[150,8,147,50],[150,9,147,51],[150,10,147,52],[151,8,143,7,"_r"],[151,10,143,9],[151,13,143,9,"_culori$oklab$convert"],[151,34,143,9],[151,35,143,4,"r"],[151,36,143,5],[152,8,144,7,"_g"],[152,10,144,9],[152,13,144,9,"_culori$oklab$convert"],[152,34,144,9],[152,35,144,4,"g"],[152,36,144,5],[153,8,145,7,"_b"],[153,10,145,9],[153,13,145,9,"_culori$oklab$convert"],[153,34,145,9],[153,35,145,4,"b"],[153,36,145,5],[154,8,146,11,"_alpha"],[154,14,146,17],[154,17,146,17,"_culori$oklab$convert"],[154,38,146,17],[154,39,146,4,"alpha"],[154,44,146,9],[155,6,148,2],[155,13,148,9],[155,17,148,9,"rgbaColor"],[155,34,148,18],[155,36,148,19,"_r"],[155,38,148,21],[155,40,148,23,"_g"],[155,42,148,25],[155,44,148,27,"_b"],[155,46,148,29],[155,48,148,31,"_alpha"],[155,54,148,37],[155,55,148,38],[156,4,149,0],[156,5,149,1],[157,4,149,1,"reactNativeReanimated_interpolateColorTs5"],[157,45,149,1],[157,46,149,1,"__closure"],[157,55,149,1],[158,6,149,1,"interpolate"],[158,17,149,1],[158,19,133,12,"interpolate"],[158,45,133,23],[159,6,133,23,"Extrapolation"],[159,19,133,23],[159,21,133,53,"Extrapolation"],[159,49,133,66],[160,6,133,66,"culori"],[160,12,133,66],[160,14,147,6,"culori"],[160,29,147,12],[161,6,147,12,"rgbaColor"],[161,15,147,12],[161,17,148,9,"rgbaColor"],[162,4,148,18],[163,4,148,18,"reactNativeReanimated_interpolateColorTs5"],[163,45,148,18],[163,46,148,18,"__workletHash"],[163,59,148,18],[164,4,148,18,"reactNativeReanimated_interpolateColorTs5"],[164,45,148,18],[164,46,148,18,"__initData"],[164,56,148,18],[164,59,148,18,"_worklet_12431767338194_init_data"],[164,92,148,18],[165,4,148,18],[165,11,148,18,"reactNativeReanimated_interpolateColorTs5"],[165,52,148,18],[166,2,148,18],[166,3,126,29],[166,5,149,1],[167,2,149,2],[167,6,149,2,"_worklet_14521513267525_init_data"],[167,39,149,2],[168,4,149,2,"code"],[168,8,149,2],[169,2,149,2],[170,2,151,0],[170,6,151,6,"_splitColorsIntoChannels"],[170,30,151,30],[170,33,151,33],[171,4,151,33],[171,8,151,33,"reactNativeReanimated_interpolateColorTs6"],[171,49,151,33],[171,61,151,33,"reactNativeReanimated_interpolateColorTs6"],[171,62,152,2,"colors"],[171,68,152,38],[171,70,153,2,"convFromRgb"],[171,81,157,3],[171,83,163,5],[172,6,165,2],[172,10,165,8,"ch1"],[172,13,165,21],[172,16,165,24],[172,18,165,26],[173,6,166,2],[173,10,166,8,"ch2"],[173,13,166,21],[173,16,166,24],[173,18,166,26],[174,6,167,2],[174,10,167,8,"ch3"],[174,13,167,21],[174,16,167,24],[174,18,167,26],[175,6,168,2],[175,10,168,8,"alpha"],[175,15,168,23],[175,18,168,26],[175,20,168,28],[176,6,170,2],[176,11,170,7],[176,15,170,11,"i"],[176,16,170,12],[176,19,170,15],[176,20,170,16],[176,22,170,18,"i"],[176,23,170,19],[176,26,170,22,"colors"],[176,32,170,28],[176,33,170,29,"length"],[176,39,170,35],[176,41,170,37,"i"],[176,42,170,38],[176,44,170,40],[176,46,170,42],[177,8,171,4],[177,12,171,10,"color"],[177,17,171,15],[177,20,171,18,"colors"],[177,26,171,24],[177,27,171,25,"i"],[177,28,171,26],[177,29,171,27],[178,8,172,4],[178,12,172,10,"processedColor"],[178,26,172,24],[178,29,172,27],[178,33,172,27,"processColor"],[178,53,172,39],[178,55,172,40,"color"],[178,60,172,45],[178,61,172,46],[179,8,173,4],[179,12,173,8],[179,19,173,15,"processedColor"],[179,33,173,29],[179,38,173,34],[179,46,173,42],[179,48,173,44],[180,10,174,6],[180,14,174,12,"convertedColor"],[180,28,174,26],[180,31,174,29,"convFromRgb"],[180,42,174,40],[180,43,174,41],[181,12,175,8,"r"],[181,13,175,9],[181,15,175,11],[181,19,175,11,"red"],[181,30,175,14],[181,32,175,15,"processedColor"],[181,46,175,29],[181,47,175,30],[182,12,176,8,"g"],[182,13,176,9],[182,15,176,11],[182,19,176,11,"green"],[182,32,176,16],[182,34,176,17,"processedColor"],[182,48,176,31],[182,49,176,32],[183,12,177,8,"b"],[183,13,177,9],[183,15,177,11],[183,19,177,11,"blue"],[183,31,177,15],[183,33,177,16,"processedColor"],[183,47,177,30],[184,10,178,6],[184,11,178,7],[184,12,178,8],[185,10,180,6,"ch1"],[185,13,180,9],[185,14,180,10,"push"],[185,18,180,14],[185,19,180,15,"convertedColor"],[185,33,180,29],[185,34,180,30,"ch1"],[185,37,180,33],[185,38,180,34],[186,10,181,6,"ch2"],[186,13,181,9],[186,14,181,10,"push"],[186,18,181,14],[186,19,181,15,"convertedColor"],[186,33,181,29],[186,34,181,30,"ch2"],[186,37,181,33],[186,38,181,34],[187,10,182,6,"ch3"],[187,13,182,9],[187,14,182,10,"push"],[187,18,182,14],[187,19,182,15,"convertedColor"],[187,33,182,29],[187,34,182,30,"ch3"],[187,37,182,33],[187,38,182,34],[188,10,183,6,"alpha"],[188,15,183,11],[188,16,183,12,"push"],[188,20,183,16],[188,21,183,17],[188,25,183,17,"opacity"],[188,40,183,24],[188,42,183,25,"processedColor"],[188,56,183,39],[188,57,183,40],[188,58,183,41],[189,8,184,4],[190,6,185,2],[191,6,187,2],[191,13,187,9],[192,8,188,4,"ch1"],[192,11,188,7],[193,8,189,4,"ch2"],[193,11,189,7],[194,8,190,4,"ch3"],[194,11,190,7],[195,8,191,4,"alpha"],[196,6,192,2],[196,7,192,3],[197,4,193,0],[197,5,193,1],[198,4,193,1,"reactNativeReanimated_interpolateColorTs6"],[198,45,193,1],[198,46,193,1,"__closure"],[198,55,193,1],[199,6,193,1,"processColor"],[199,18,193,1],[199,20,172,27,"processColor"],[199,40,172,39],[200,6,172,39,"red"],[200,9,172,39],[200,11,175,11,"red"],[200,22,175,14],[201,6,175,14,"green"],[201,11,175,14],[201,13,176,11,"green"],[201,26,176,16],[202,6,176,16,"blue"],[202,10,176,16],[202,12,177,11,"blue"],[202,24,177,15],[203,6,177,15,"opacity"],[203,13,177,15],[203,15,183,17,"opacity"],[204,4,183,24],[205,4,183,24,"reactNativeReanimated_interpolateColorTs6"],[205,45,183,24],[205,46,183,24,"__workletHash"],[205,59,183,24],[206,4,183,24,"reactNativeReanimated_interpolateColorTs6"],[206,45,183,24],[206,46,183,24,"__initData"],[206,56,183,24],[206,59,183,24,"_worklet_14521513267525_init_data"],[206,92,183,24],[207,4,183,24],[207,11,183,24,"reactNativeReanimated_interpolateColorTs6"],[207,52,183,24],[208,2,183,24],[208,3,151,33],[208,5,193,1],[209,2,193,2],[209,6,193,2,"_worklet_8624448141679_init_data"],[209,38,193,2],[210,4,193,2,"code"],[210,8,193,2],[211,2,193,2],[212,2,202,0],[212,6,202,6,"getInterpolateRGB"],[212,23,202,23],[212,26,202,26],[213,4,202,26],[213,8,202,26,"reactNativeReanimated_interpolateColorTs7"],[213,49,202,26],[213,61,202,26,"reactNativeReanimated_interpolateColorTs7"],[213,62,203,2,"colors"],[213,68,203,38],[213,70,204,21],[214,6,206,2],[214,10,206,2,"_splitColorsIntoChann"],[214,31,206,2],[214,34,206,35,"_splitColorsIntoChannels"],[214,58,206,59],[214,59,207,4,"colors"],[214,65,207,10],[214,67,208,5,"color"],[214,72,208,10],[214,77,208,16],[215,10,209,6,"ch1"],[215,13,209,9],[215,15,209,11,"color"],[215,20,209,16],[215,21,209,17,"r"],[215,22,209,18],[216,10,210,6,"ch2"],[216,13,210,9],[216,15,210,11,"color"],[216,20,210,16],[216,21,210,17,"g"],[216,22,210,18],[217,10,211,6,"ch3"],[217,13,211,9],[217,15,211,11,"color"],[217,20,211,16],[217,21,211,17,"b"],[218,8,212,4],[218,9,212,5],[218,10,213,2],[218,11,213,3],[219,8,206,10,"ch1"],[219,11,206,13],[219,14,206,13,"_splitColorsIntoChann"],[219,35,206,13],[219,36,206,10,"ch1"],[219,39,206,13],[220,8,206,15,"ch2"],[220,11,206,18],[220,14,206,18,"_splitColorsIntoChann"],[220,35,206,18],[220,36,206,15,"ch2"],[220,39,206,18],[221,8,206,20,"ch3"],[221,11,206,23],[221,14,206,23,"_splitColorsIntoChann"],[221,35,206,23],[221,36,206,20,"ch3"],[221,39,206,23],[222,8,206,25,"alpha"],[222,13,206,30],[222,16,206,30,"_splitColorsIntoChann"],[222,37,206,30],[222,38,206,25,"alpha"],[222,43,206,30],[223,6,215,2],[223,13,215,9],[224,8,216,4,"r"],[224,9,216,5],[224,11,216,7,"ch1"],[224,14,216,10],[225,8,217,4,"g"],[225,9,217,5],[225,11,217,7,"ch2"],[225,14,217,10],[226,8,218,4,"b"],[226,9,218,5],[226,11,218,7,"ch3"],[226,14,218,10],[227,8,219,4,"a"],[227,9,219,5],[227,11,219,7,"alpha"],[228,6,220,2],[228,7,220,3],[229,4,221,0],[229,5,221,1],[230,4,221,1,"reactNativeReanimated_interpolateColorTs7"],[230,45,221,1],[230,46,221,1,"__closure"],[230,55,221,1],[231,6,221,1,"_splitColorsIntoChannels"],[232,4,221,1],[233,4,221,1,"reactNativeReanimated_interpolateColorTs7"],[233,45,221,1],[233,46,221,1,"__workletHash"],[233,59,221,1],[234,4,221,1,"reactNativeReanimated_interpolateColorTs7"],[234,45,221,1],[234,46,221,1,"__initData"],[234,56,221,1],[234,59,221,1,"_worklet_8624448141679_init_data"],[234,91,221,1],[235,4,221,1],[235,11,221,1,"reactNativeReanimated_interpolateColorTs7"],[235,52,221,1],[236,2,221,1],[236,3,202,26],[236,5,221,1],[237,2,221,2],[237,6,221,2,"_worklet_16817866662391_init_data"],[237,39,221,2],[238,4,221,2,"code"],[238,8,221,2],[239,2,221,2],[240,2,230,0],[240,6,230,6,"getInterpolateHSV"],[240,23,230,23],[240,26,230,26],[241,4,230,26],[241,8,230,26,"reactNativeReanimated_interpolateColorTs8"],[241,49,230,26],[241,61,230,26,"reactNativeReanimated_interpolateColorTs8"],[241,62,231,2,"colors"],[241,68,231,38],[241,70,232,21],[242,6,234,2],[242,10,234,2,"_splitColorsIntoChann2"],[242,32,234,2],[242,35,234,35,"_splitColorsIntoChannels"],[242,59,234,59],[242,60,234,60,"colors"],[242,66,234,66],[242,68,234,69,"color"],[242,73,234,74],[242,77,234,79],[243,10,235,4],[243,14,235,10,"hsvColor"],[243,22,235,18],[243,25,235,21],[243,29,235,21,"RGBtoHSV"],[243,45,235,29],[243,47,235,30,"color"],[243,52,235,35],[243,53,235,36,"r"],[243,54,235,37],[243,56,235,39,"color"],[243,61,235,44],[243,62,235,45,"g"],[243,63,235,46],[243,65,235,48,"color"],[243,70,235,53],[243,71,235,54,"b"],[243,72,235,55],[243,73,235,56],[244,10,236,4],[244,17,236,11],[245,12,237,6,"ch1"],[245,15,237,9],[245,17,237,11,"hsvColor"],[245,25,237,19],[245,26,237,20,"h"],[245,27,237,21],[246,12,238,6,"ch2"],[246,15,238,9],[246,17,238,11,"hsvColor"],[246,25,238,19],[246,26,238,20,"s"],[246,27,238,21],[247,12,239,6,"ch3"],[247,15,239,9],[247,17,239,11,"hsvColor"],[247,25,239,19],[247,26,239,20,"v"],[248,10,240,4],[248,11,240,5],[249,8,241,2],[249,9,241,3],[249,10,241,4],[250,8,234,10,"ch1"],[250,11,234,13],[250,14,234,13,"_splitColorsIntoChann2"],[250,36,234,13],[250,37,234,10,"ch1"],[250,40,234,13],[251,8,234,15,"ch2"],[251,11,234,18],[251,14,234,18,"_splitColorsIntoChann2"],[251,36,234,18],[251,37,234,15,"ch2"],[251,40,234,18],[252,8,234,20,"ch3"],[252,11,234,23],[252,14,234,23,"_splitColorsIntoChann2"],[252,36,234,23],[252,37,234,20,"ch3"],[252,40,234,23],[253,8,234,25,"alpha"],[253,13,234,30],[253,16,234,30,"_splitColorsIntoChann2"],[253,38,234,30],[253,39,234,25,"alpha"],[253,44,234,30],[254,6,243,2],[254,13,243,9],[255,8,244,4,"h"],[255,9,244,5],[255,11,244,7,"ch1"],[255,14,244,10],[256,8,245,4,"s"],[256,9,245,5],[256,11,245,7,"ch2"],[256,14,245,10],[257,8,246,4,"v"],[257,9,246,5],[257,11,246,7,"ch3"],[257,14,246,10],[258,8,247,4,"a"],[258,9,247,5],[258,11,247,7,"alpha"],[259,6,248,2],[259,7,248,3],[260,4,249,0],[260,5,249,1],[261,4,249,1,"reactNativeReanimated_interpolateColorTs8"],[261,45,249,1],[261,46,249,1,"__closure"],[261,55,249,1],[262,6,249,1,"_splitColorsIntoChannels"],[262,30,249,1],[263,6,249,1,"RGBtoHSV"],[263,14,249,1],[263,16,235,21,"RGBtoHSV"],[264,4,235,29],[265,4,235,29,"reactNativeReanimated_interpolateColorTs8"],[265,45,235,29],[265,46,235,29,"__workletHash"],[265,59,235,29],[266,4,235,29,"reactNativeReanimated_interpolateColorTs8"],[266,45,235,29],[266,46,235,29,"__initData"],[266,56,235,29],[266,59,235,29,"_worklet_16817866662391_init_data"],[266,92,235,29],[267,4,235,29],[267,11,235,29,"reactNativeReanimated_interpolateColorTs8"],[267,52,235,29],[268,2,235,29],[268,3,230,26],[268,5,249,1],[269,2,249,2],[269,6,249,2,"_worklet_4292020092329_init_data"],[269,38,249,2],[270,4,249,2,"code"],[270,8,249,2],[271,2,249,2],[272,2,258,0],[272,6,258,6,"getInterpolateLAB"],[272,23,258,23],[272,26,258,26],[273,4,258,26],[273,8,258,26,"reactNativeReanimated_interpolateColorTs9"],[273,49,258,26],[273,61,258,26,"reactNativeReanimated_interpolateColorTs9"],[273,62,259,2,"colors"],[273,68,259,38],[273,70,260,21],[274,6,263,2],[274,10,263,2,"_splitColorsIntoChann3"],[274,32,263,2],[274,35,263,35,"_splitColorsIntoChannels"],[274,59,263,59],[274,60,263,60,"colors"],[274,66,263,66],[274,68,263,69,"color"],[274,73,263,74],[274,77,263,79],[275,10,264,4],[275,14,264,10,"labColor"],[275,22,264,18],[275,25,264,21,"culori"],[275,40,264,27],[275,41,264,28,"oklab"],[275,46,264,33],[275,47,264,34,"convert"],[275,54,264,41],[275,55,264,42,"fromRgb"],[275,62,264,49],[275,63,264,50,"color"],[275,68,264,55],[275,69,264,56],[276,10,265,4],[276,17,265,11],[277,12,266,6,"ch1"],[277,15,266,9],[277,17,266,11,"labColor"],[277,25,266,19],[277,26,266,20,"l"],[277,27,266,21],[278,12,267,6,"ch2"],[278,15,267,9],[278,17,267,11,"labColor"],[278,25,267,19],[278,26,267,20,"a"],[278,27,267,21],[279,12,268,6,"ch3"],[279,15,268,9],[279,17,268,11,"labColor"],[279,25,268,19],[279,26,268,20,"b"],[280,10,269,4],[280,11,269,5],[281,8,270,2],[281,9,270,3],[281,10,270,4],[282,8,263,10,"ch1"],[282,11,263,13],[282,14,263,13,"_splitColorsIntoChann3"],[282,36,263,13],[282,37,263,10,"ch1"],[282,40,263,13],[283,8,263,15,"ch2"],[283,11,263,18],[283,14,263,18,"_splitColorsIntoChann3"],[283,36,263,18],[283,37,263,15,"ch2"],[283,40,263,18],[284,8,263,20,"ch3"],[284,11,263,23],[284,14,263,23,"_splitColorsIntoChann3"],[284,36,263,23],[284,37,263,20,"ch3"],[284,40,263,23],[285,8,263,25,"alpha"],[285,13,263,30],[285,16,263,30,"_splitColorsIntoChann3"],[285,38,263,30],[285,39,263,25,"alpha"],[285,44,263,30],[286,6,272,2],[286,13,272,9],[287,8,273,4,"l"],[287,9,273,5],[287,11,273,7,"ch1"],[287,14,273,10],[288,8,274,4,"a"],[288,9,274,5],[288,11,274,7,"ch2"],[288,14,274,10],[289,8,275,4,"b"],[289,9,275,5],[289,11,275,7,"ch3"],[289,14,275,10],[290,8,276,4,"alpha"],[291,6,277,2],[291,7,277,3],[292,4,278,0],[292,5,278,1],[293,4,278,1,"reactNativeReanimated_interpolateColorTs9"],[293,45,278,1],[293,46,278,1,"__closure"],[293,55,278,1],[294,6,278,1,"_splitColorsIntoChannels"],[294,30,278,1],[295,6,278,1,"culori"],[295,12,278,1],[295,14,264,21,"culori"],[296,4,264,27],[297,4,264,27,"reactNativeReanimated_interpolateColorTs9"],[297,45,264,27],[297,46,264,27,"__workletHash"],[297,59,264,27],[298,4,264,27,"reactNativeReanimated_interpolateColorTs9"],[298,45,264,27],[298,46,264,27,"__initData"],[298,56,264,27],[298,59,264,27,"_worklet_4292020092329_init_data"],[298,91,264,27],[299,4,264,27],[299,11,264,27,"reactNativeReanimated_interpolateColorTs9"],[299,52,264,27],[300,2,264,27],[300,3,258,26],[300,5,278,1],[302,2,280,0],[303,0,281,0],[304,0,282,0],[305,0,283,0],[306,0,284,0],[307,0,285,0],[308,0,286,0],[309,0,287,0],[310,0,288,0],[311,0,289,0],[312,0,290,0],[313,0,291,0],[314,0,292,0],[315,0,293,0],[316,0,294,0],[317,0,295,0],[318,0,296,0],[319,0,297,0],[320,2,280,0],[320,6,280,0,"_worklet_7877560832453_init_data"],[320,38,280,0],[321,4,280,0,"code"],[321,8,280,0],[322,2,280,0],[323,2,280,0],[323,6,280,0,"interpolateColor"],[323,22,280,0],[323,25,280,0,"exports"],[323,32,280,0],[323,33,280,0,"interpolateColor"],[323,49,280,0],[323,52,314,7],[324,4,314,7],[324,8,314,7,"interpolateColor"],[324,24,314,7],[324,36,314,7,"interpolateColor"],[324,37,315,2,"value"],[324,42,315,15],[324,44,316,2,"inputRange"],[324,54,316,31],[324,56,317,2,"outputRange"],[324,67,317,43],[324,69,320,19],[325,6,320,19],[325,10,318,2,"colorSpace"],[325,20,318,35],[325,23,318,35,"arguments"],[325,32,318,35],[325,33,318,35,"length"],[325,39,318,35],[325,47,318,35,"arguments"],[325,56,318,35],[325,64,318,35,"undefined"],[325,73,318,35],[325,76,318,35,"arguments"],[325,85,318,35],[325,91,318,38],[325,96,318,43],[326,6,318,43],[326,10,319,2,"options"],[326,17,319,31],[326,20,319,31,"arguments"],[326,29,319,31],[326,30,319,31,"length"],[326,36,319,31],[326,44,319,31,"arguments"],[326,53,319,31],[326,61,319,31,"undefined"],[326,70,319,31],[326,73,319,31,"arguments"],[326,82,319,31],[326,88,319,34],[326,89,319,35],[326,90,319,36],[327,6,322,2],[327,10,322,6,"colorSpace"],[327,20,322,16],[327,25,322,21],[327,30,322,26],[327,32,322,28],[328,8,323,4],[328,15,323,11,"interpolateColorsHSV"],[328,35,323,31],[328,36,324,6,"value"],[328,41,324,11],[328,43,325,6,"inputRange"],[328,53,325,16],[328,55,326,6,"getInterpolateHSV"],[328,72,326,23],[328,73,326,24,"outputRange"],[328,84,326,35],[328,85,326,36],[328,87,327,6,"options"],[328,94,328,4],[328,95,328,5],[329,6,329,2],[329,7,329,3],[329,13,329,9],[329,17,329,13,"colorSpace"],[329,27,329,23],[329,32,329,28],[329,37,329,33],[329,39,329,35],[330,8,330,4],[330,15,330,11,"interpolateColorsRGB"],[330,35,330,31],[330,36,331,6,"value"],[330,41,331,11],[330,43,332,6,"inputRange"],[330,53,332,16],[330,55,333,6,"getInterpolateRGB"],[330,72,333,23],[330,73,333,24,"outputRange"],[330,84,333,35],[330,85,333,36],[330,87,334,6,"options"],[330,94,335,4],[330,95,335,5],[331,6,336,2],[331,7,336,3],[331,13,336,9],[331,17,336,13,"colorSpace"],[331,27,336,23],[331,32,336,28],[331,37,336,33],[331,39,336,35],[332,8,337,4],[332,15,337,11,"interpolateColorsLAB"],[332,35,337,31],[332,36,338,6,"value"],[332,41,338,11],[332,43,339,6,"inputRange"],[332,53,339,16],[332,55,340,6,"getInterpolateLAB"],[332,72,340,23],[332,73,340,24,"outputRange"],[332,84,340,35],[332,85,340,36],[332,87,341,6,"options"],[332,94,342,4],[332,95,342,5],[333,6,343,2],[334,6,345,2],[334,12,345,8],[334,16,345,12,"ReanimatedError"],[334,39,345,27],[334,40,346,4],[334,73,347,6,"colorSpace"],[334,83,347,16],[334,131,349,2],[334,132,349,3],[335,4,350,0],[335,5,350,1],[336,4,350,1,"interpolateColor"],[336,20,350,1],[336,21,350,1,"__closure"],[336,30,350,1],[337,6,350,1,"interpolateColorsHSV"],[337,26,350,1],[338,6,350,1,"getInterpolateHSV"],[338,23,350,1],[339,6,350,1,"interpolateColorsRGB"],[339,26,350,1],[340,6,350,1,"getInterpolateRGB"],[340,23,350,1],[341,6,350,1,"interpolateColorsLAB"],[341,26,350,1],[342,6,350,1,"getInterpolateLAB"],[343,4,350,1],[344,4,350,1,"interpolateColor"],[344,20,350,1],[344,21,350,1,"__workletHash"],[344,34,350,1],[345,4,350,1,"interpolateColor"],[345,20,350,1],[345,21,350,1,"__initData"],[345,31,350,1],[345,34,350,1,"_worklet_7877560832453_init_data"],[345,66,350,1],[346,4,350,1],[346,11,350,1,"interpolateColor"],[346,27,350,1],[347,2,350,1],[347,3,314,7],[348,2,314,7],[348,6,352,12,"ColorSpace"],[348,16,352,22],[348,19,352,22,"exports"],[348,26,352,22],[348,27,352,22,"ColorSpace"],[348,37,352,22],[348,63,352,12,"ColorSpace"],[348,73,352,22],[349,4,352,12,"ColorSpace"],[349,14,352,22],[349,15,352,12,"ColorSpace"],[349,25,352,22],[350,4,352,12,"ColorSpace"],[350,14,352,22],[350,15,352,12,"ColorSpace"],[350,25,352,22],[351,4,352,12,"ColorSpace"],[351,14,352,22],[351,15,352,12,"ColorSpace"],[351,25,352,22],[352,4,352,22],[352,11,352,12,"ColorSpace"],[352,21,352,22],[353,2,352,22],[354,2,366,7],[354,11,366,16,"useInterpolateConfig"],[354,31,366,36,"useInterpolateConfig"],[354,32,367,2,"inputRange"],[354,42,367,31],[354,44,368,2,"outputRange"],[354,55,368,43],[354,57,371,34],[355,4,371,34],[355,8,369,2,"colorSpace"],[355,18,369,12],[355,21,369,12,"arguments"],[355,30,369,12],[355,31,369,12,"length"],[355,37,369,12],[355,45,369,12,"arguments"],[355,54,369,12],[355,62,369,12,"undefined"],[355,71,369,12],[355,74,369,12,"arguments"],[355,83,369,12],[355,89,369,15,"ColorSpace"],[355,99,369,25],[355,100,369,26,"RGB"],[355,103,369,29],[356,4,369,29],[356,8,370,2,"options"],[356,15,370,31],[356,18,370,31,"arguments"],[356,27,370,31],[356,28,370,31,"length"],[356,34,370,31],[356,42,370,31,"arguments"],[356,51,370,31],[356,59,370,31,"undefined"],[356,68,370,31],[356,71,370,31,"arguments"],[356,80,370,31],[356,86,370,34],[356,87,370,35],[356,88,370,36],[357,4,372,2],[357,11,372,9],[357,15,372,9,"useSharedValue"],[357,45,372,23],[357,47,372,43],[358,6,373,4,"inputRange"],[358,16,373,14],[359,6,374,4,"outputRange"],[359,17,374,15],[360,6,375,4,"colorSpace"],[360,16,375,14],[361,6,376,4,"cache"],[361,11,376,9],[361,13,376,11],[361,17,376,11,"makeMutable"],[361,34,376,22],[361,36,376,63],[361,40,376,67],[361,41,376,68],[362,6,377,4,"options"],[363,4,378,2],[363,5,378,3],[363,6,378,4],[364,2,379,0],[365,0,379,1],[365,3]],"functionMap":{"names":["<global>","interpolateColorsHSV","toLinearSpace","x.map$argument_0","toGammaSpace","interpolateColorsRGB","interpolateColorsLAB","_splitColorsIntoChannels","getInterpolateRGB","_splitColorsIntoChannels$argument_1","getInterpolateHSV","getInterpolateLAB","interpolateColor","useInterpolateConfig"],"mappings":"AAA;6BCiC;CDmD;sBEE;eCE,+BD;CFC;qBIE;CJG;6BKE;CL2B;6BME;CNuB;iCOE;CP0C;0BQS;ICM;MDI;CRS;0BUS;oEDI;GCO;CVQ;0BWS;oEFK;GEO;CXQ;OYoC;CZoC;OagB;Cba"}},"type":"js/module"}]}