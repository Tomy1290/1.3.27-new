{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"../logger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":114},"end":{"line":8,"column":35,"index":149}}],"key":"6mnFiA+8QMwCo5SHGzE3xLi0NTk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.underDampedSpringCalculations = exports.scaleZetaToMatchClamps = exports.isAnimationTerminatingCalculation = exports.initialCalculations = exports.criticallyDampedSpringCalculations = exports.checkIfConfigIsValid = exports.calculateNewMassToMatchDuration = exports.bisectRoot = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _logger = require(_dependencyMap[2]);\n  /**\n   * Spring animation configuration.\n   *\n   * @param mass - The weight of the spring. Reducing this value makes the\n   *   animation faster. Defaults to 1.\n   * @param damping - How quickly a spring slows down. Higher damping means the\n   *   spring will come to rest faster. Defaults to 10.\n   * @param duration - Length of the animation (in milliseconds). Defaults to\n   *   2000.\n   * @param dampingRatio - How damped the spring is. Value 1 means the spring is\n   *   critically damped, and value `>`1 means the spring is overdamped. Defaults\n   *   to 0.5.\n   * @param stiffness - How bouncy the spring is. Defaults to 100.\n   * @param velocity - Initial velocity applied to the spring equation. Defaults\n   *   to 0.\n   * @param overshootClamping - Whether a spring can bounce over the `toValue`.\n   *   Defaults to false.\n   * @param restDisplacementThreshold - The displacement below which the spring\n   *   will snap to toValue without further oscillations. Defaults to 0.01.\n   * @param restSpeedThreshold - The speed in pixels per second from which the\n   *   spring will snap to toValue without further oscillations. Defaults to 2.\n   * @param reduceMotion - Determines how the animation responds to the device's\n   *   reduced motion accessibility setting. Default to `ReduceMotion.System` -\n   *   {@link ReduceMotion}.\n   * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withSpring/#config-\n   */\n  // This type contains all the properties from SpringConfig, which are changed to be required,\n  // except for optional 'reduceMotion' and 'clamp'\n  var _worklet_10144589963488_init_data = {\n    code: \"function checkIfConfigIsValid_reactNativeReanimated_springUtilsTs1(config){const{logger}=this.__closure;var _config$clamp,_config$clamp2;let errorMessage='';['stiffness','damping','dampingRatio','restDisplacementThreshold','restSpeedThreshold','mass'].forEach(function(prop){const value=config[prop];if(value<=0){errorMessage+=\\\", \\\"+prop+\\\" must be grater than zero but got \\\"+value;}});if(config.duration<0){errorMessage+=\\\", duration can't be negative, got \\\"+config.duration;}if((_config$clamp=config.clamp)!==null&&_config$clamp!==void 0&&_config$clamp.min&&(_config$clamp2=config.clamp)!==null&&_config$clamp2!==void 0&&_config$clamp2.max&&config.clamp.min>config.clamp.max){errorMessage+=\\\", clamp.min should be lower than clamp.max, got clamp: {min: \\\"+config.clamp.min+\\\", max: \\\"+config.clamp.max+\\\"} \\\";}if(errorMessage!==''){logger.warn('Invalid spring config'+errorMessage);}return errorMessage==='';}\"\n  };\n  var checkIfConfigIsValid = exports.checkIfConfigIsValid = function () {\n    var checkIfConfigIsValid = function (config) {\n      var errorMessage = '';\n      ['stiffness', 'damping', 'dampingRatio', 'restDisplacementThreshold', 'restSpeedThreshold', 'mass'].forEach(prop => {\n        var value = config[prop];\n        if (value <= 0) {\n          errorMessage += `, ${prop} must be grater than zero but got ${value}`;\n        }\n      });\n      if (config.duration < 0) {\n        errorMessage += `, duration can't be negative, got ${config.duration}`;\n      }\n      if (config.clamp?.min && config.clamp?.max && config.clamp.min > config.clamp.max) {\n        errorMessage += `, clamp.min should be lower than clamp.max, got clamp: {min: ${config.clamp.min}, max: ${config.clamp.max}} `;\n      }\n      if (errorMessage !== '') {\n        _logger.logger.warn('Invalid spring config' + errorMessage);\n      }\n      return errorMessage === '';\n    };\n    checkIfConfigIsValid.__closure = {\n      logger: _logger.logger\n    };\n    checkIfConfigIsValid.__workletHash = 10144589963488;\n    checkIfConfigIsValid.__initData = _worklet_10144589963488_init_data;\n    return checkIfConfigIsValid;\n  }(); // ts-prune-ignore-next This function is exported to be tested\n  var _worklet_5648054256871_init_data = {\n    code: \"function bisectRoot_reactNativeReanimated_springUtilsTs2({min:min,max:max,func:func,maxIterations=20}){const ACCURACY=0.00005;let idx=maxIterations;let current=(max+min)/2;while(Math.abs(func(current))>ACCURACY&&idx>0){idx-=1;if(func(current)<0){min=current;}else{max=current;}current=(min+max)/2;}return current;}\"\n  };\n  var bisectRoot = exports.bisectRoot = function () {\n    var bisectRoot = function (_ref) {\n      var min = _ref.min,\n        max = _ref.max,\n        func = _ref.func,\n        _ref$maxIterations = _ref.maxIterations,\n        maxIterations = _ref$maxIterations === undefined ? 20 : _ref$maxIterations;\n      var ACCURACY = 0.00005;\n      var idx = maxIterations;\n      var current = (max + min) / 2;\n      while (Math.abs(func(current)) > ACCURACY && idx > 0) {\n        idx -= 1;\n        if (func(current) < 0) {\n          min = current;\n        } else {\n          max = current;\n        }\n        current = (min + max) / 2;\n      }\n      return current;\n    };\n    bisectRoot.__closure = {};\n    bisectRoot.__workletHash = 5648054256871;\n    bisectRoot.__initData = _worklet_5648054256871_init_data;\n    return bisectRoot;\n  }();\n  var _worklet_4157634151051_init_data = {\n    code: \"function initialCalculations_reactNativeReanimated_springUtilsTs3(mass=0,config){if(config.skipAnimation){return{zeta:0,omega0:0,omega1:0};}if(config.useDuration){const{stiffness:k,dampingRatio:zeta}=config;const omega0=Math.sqrt(k/mass);const omega1=omega0*Math.sqrt(1-zeta**2);return{zeta:zeta,omega0:omega0,omega1:omega1};}else{const{damping:c,mass:m,stiffness:k}=config;const zeta=c/(2*Math.sqrt(k*m));const omega0=Math.sqrt(k/m);const omega1=omega0*Math.sqrt(1-zeta**2);return{zeta:zeta,omega0:omega0,omega1:omega1};}}\"\n  };\n  var initialCalculations = exports.initialCalculations = function () {\n    var initialCalculations = function () {\n      var mass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var config = arguments.length > 1 ? arguments[1] : undefined;\n      if (config.skipAnimation) {\n        return {\n          zeta: 0,\n          omega0: 0,\n          omega1: 0\n        };\n      }\n      if (config.useDuration) {\n        var k = config.stiffness,\n          zeta = config.dampingRatio;\n\n        /**\n         * Omega0 and omega1 denote angular frequency and natural angular frequency,\n         * see this link for formulas:\n         * https://courses.lumenlearning.com/suny-osuniversityphysics/chapter/15-5-damped-oscillations/\n         */\n        var omega0 = Math.sqrt(k / mass);\n        var omega1 = omega0 * Math.sqrt(1 - zeta ** 2);\n        return {\n          zeta,\n          omega0,\n          omega1\n        };\n      } else {\n        var c = config.damping,\n          m = config.mass,\n          _k = config.stiffness;\n        var _zeta = c / (2 * Math.sqrt(_k * m)); // damping ratio\n        var _omega = Math.sqrt(_k / m); // undamped angular frequency of the oscillator (rad/ms)\n        var _omega2 = _omega * Math.sqrt(1 - _zeta ** 2); // exponential decay\n\n        return {\n          zeta: _zeta,\n          omega0: _omega,\n          omega1: _omega2\n        };\n      }\n    };\n    initialCalculations.__closure = {};\n    initialCalculations.__workletHash = 4157634151051;\n    initialCalculations.__initData = _worklet_4157634151051_init_data;\n    return initialCalculations;\n  }();\n  /**\n   * We make an assumption that we can manipulate zeta without changing duration\n   * of movement. According to theory this change is small and tests shows that we\n   * can indeed ignore it.\n   */\n  var _worklet_13242486714136_init_data = {\n    code: \"function scaleZetaToMatchClamps_reactNativeReanimated_springUtilsTs4(animation,clamp){const{zeta:zeta,toValue:toValue,startValue:startValue}=animation;const toValueNum=Number(toValue);if(toValueNum===startValue){return zeta;}const[firstBound,secondBound]=toValueNum-startValue>0?[clamp.min,clamp.max]:[clamp.max,clamp.min];const relativeExtremum1=secondBound!==undefined?Math.abs((secondBound-toValueNum)/(toValueNum-startValue)):undefined;const relativeExtremum2=firstBound!==undefined?Math.abs((firstBound-toValueNum)/(toValueNum-startValue)):undefined;const newZeta1=relativeExtremum1!==undefined?Math.abs(Math.log(relativeExtremum1)/Math.PI):undefined;const newZeta2=relativeExtremum2!==undefined?Math.abs(Math.log(relativeExtremum2)/(2*Math.PI)):undefined;const zetaSatisfyingClamp=[newZeta1,newZeta2].filter(function(x){return x!==undefined;});return Math.max(...zetaSatisfyingClamp,zeta);}\"\n  };\n  var scaleZetaToMatchClamps = exports.scaleZetaToMatchClamps = function () {\n    var scaleZetaToMatchClamps = function (animation, clamp) {\n      var zeta = animation.zeta,\n        toValue = animation.toValue,\n        startValue = animation.startValue;\n      var toValueNum = Number(toValue);\n      if (toValueNum === startValue) {\n        return zeta;\n      }\n      var _ref2 = toValueNum - startValue > 0 ? [clamp.min, clamp.max] : [clamp.max, clamp.min],\n        _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n        firstBound = _ref3[0],\n        secondBound = _ref3[1];\n\n      /**\n       * The extrema we get from equation below are relative (we obtain a ratio), To\n       * get absolute extrema we convert it as follows:\n       *\n       * AbsoluteExtremum = startValue ± RelativeExtremum * (toValue - startValue)\n       * Where ± denotes:\n       *\n       * - If extremum is over the target\n       * - Otherwise\n       */\n\n      var relativeExtremum1 = secondBound !== undefined ? Math.abs((secondBound - toValueNum) / (toValueNum - startValue)) : undefined;\n      var relativeExtremum2 = firstBound !== undefined ? Math.abs((firstBound - toValueNum) / (toValueNum - startValue)) : undefined;\n\n      /**\n       * Use this formula http://hyperphysics.phy-astr.gsu.edu/hbase/oscda.html to\n       * calculate first two extrema. These extrema are located where cos = +- 1\n       *\n       * Therefore the first two extrema are:\n       *\n       *     Math.exp(-zeta * Math.PI);      (over the target)\n       *     Math.exp(-zeta * 2 * Math.PI);  (before the target)\n       */\n\n      var newZeta1 = relativeExtremum1 !== undefined ? Math.abs(Math.log(relativeExtremum1) / Math.PI) : undefined;\n      var newZeta2 = relativeExtremum2 !== undefined ? Math.abs(Math.log(relativeExtremum2) / (2 * Math.PI)) : undefined;\n      var zetaSatisfyingClamp = [newZeta1, newZeta2].filter(x => x !== undefined);\n      // The bigger is zeta the smaller are bounces, we return the biggest one\n      // because it should satisfy all conditions\n      return Math.max(...zetaSatisfyingClamp, zeta);\n    };\n    scaleZetaToMatchClamps.__closure = {};\n    scaleZetaToMatchClamps.__workletHash = 13242486714136;\n    scaleZetaToMatchClamps.__initData = _worklet_13242486714136_init_data;\n    return scaleZetaToMatchClamps;\n  }();\n  /** Runs before initial */\n  var _worklet_6359222544220_init_data = {\n    code: \"function calculateNewMassToMatchDuration_reactNativeReanimated_springUtilsTs5(x0,config,v0){const{bisectRoot}=this.__closure;if(config.skipAnimation){return 0;}const{stiffness:k,dampingRatio:zeta,restSpeedThreshold:threshold,duration:duration}=config;const durationForMass=function(mass){'worklet';const amplitude=(mass*v0*v0+k*x0*x0)/(Math.exp(1-0.5*zeta)*k);const c=zeta*2*Math.sqrt(k*mass);return 1000*(-2*mass/c)*Math.log(threshold*0.01/amplitude)-duration;};return bisectRoot({min:0,max:100,func:durationForMass});}\"\n  };\n  var _worklet_2588271284915_init_data = {\n    code: \"function reactNativeReanimated_springUtilsTs6(mass){const{v0,k,x0,zeta,threshold,duration}=this.__closure;const amplitude=(mass*v0*v0+k*x0*x0)/(Math.exp(1-0.5*zeta)*k);const c=zeta*2*Math.sqrt(k*mass);return 1000*(-2*mass/c)*Math.log(threshold*0.01/amplitude)-duration;}\"\n  };\n  var calculateNewMassToMatchDuration = exports.calculateNewMassToMatchDuration = function () {\n    var calculateNewMassToMatchDuration = function (x0, config, v0) {\n      if (config.skipAnimation) {\n        return 0;\n      }\n\n      /**\n       * Use this formula:\n       * https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_I_-_Mechanics_Sound_Oscillations_and_Waves_(OpenStax)/15%3A_Oscillations/15.06%3A_Damped_Oscillations\n       * to find the asymptote and estimate the damping that gives us the expected\n       * duration\n       *\n       *             ⎛ ⎛ c⎞           ⎞\n       *             ⎜-⎜──⎟ ⋅ duration⎟\n       *             ⎝ ⎝2m⎠           ⎠\n       *        A ⋅ e                   = threshold\n       *\n       *\n       *       Amplitude calculated using \"Conservation of energy\"\n       *                        _________________\n       *                       ╱      2         2\n       *                      ╱ m ⋅ v0  + k ⋅ x0\n       *       amplitude =   ╱  ─────────────────\n       *                   ╲╱           k\n       *\n       *       And replace mass with damping ratio which is provided: m = (c^2)/(4 * k * zeta^2)\n       */\n      var k = config.stiffness,\n        zeta = config.dampingRatio,\n        threshold = config.restSpeedThreshold,\n        duration = config.duration;\n      var durationForMass = function () {\n        var reactNativeReanimated_springUtilsTs6 = function (mass) {\n          var amplitude = (mass * v0 * v0 + k * x0 * x0) / (Math.exp(1 - 0.5 * zeta) * k);\n          var c = zeta * 2 * Math.sqrt(k * mass);\n          return 1000 * (-2 * mass / c) * Math.log(threshold * 0.01 / amplitude) - duration;\n        };\n        reactNativeReanimated_springUtilsTs6.__closure = {\n          v0,\n          k,\n          x0,\n          zeta,\n          threshold,\n          duration\n        };\n        reactNativeReanimated_springUtilsTs6.__workletHash = 2588271284915;\n        reactNativeReanimated_springUtilsTs6.__initData = _worklet_2588271284915_init_data;\n        return reactNativeReanimated_springUtilsTs6;\n      }();\n\n      // Bisection turns out to be much faster than Newton's method in our case\n      return bisectRoot({\n        min: 0,\n        max: 100,\n        func: durationForMass\n      });\n    };\n    calculateNewMassToMatchDuration.__closure = {\n      bisectRoot\n    };\n    calculateNewMassToMatchDuration.__workletHash = 6359222544220;\n    calculateNewMassToMatchDuration.__initData = _worklet_6359222544220_init_data;\n    return calculateNewMassToMatchDuration;\n  }();\n  var _worklet_3106110703769_init_data = {\n    code: \"function criticallyDampedSpringCalculations_reactNativeReanimated_springUtilsTs7(animation,precalculatedValues){const{toValue:toValue}=animation;const{v0:v0,x0:x0,omega0:omega0,t:t}=precalculatedValues;const criticallyDampedEnvelope=Math.exp(-omega0*t);const criticallyDampedPosition=toValue-criticallyDampedEnvelope*(x0+(v0+omega0*x0)*t);const criticallyDampedVelocity=criticallyDampedEnvelope*(v0*(t*omega0-1)+t*x0*omega0*omega0);return{position:criticallyDampedPosition,velocity:criticallyDampedVelocity};}\"\n  };\n  var criticallyDampedSpringCalculations = exports.criticallyDampedSpringCalculations = function () {\n    var criticallyDampedSpringCalculations = function (animation, precalculatedValues) {\n      var toValue = animation.toValue;\n      var v0 = precalculatedValues.v0,\n        x0 = precalculatedValues.x0,\n        omega0 = precalculatedValues.omega0,\n        t = precalculatedValues.t;\n      var criticallyDampedEnvelope = Math.exp(-omega0 * t);\n      var criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n      var criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n      return {\n        position: criticallyDampedPosition,\n        velocity: criticallyDampedVelocity\n      };\n    };\n    criticallyDampedSpringCalculations.__closure = {};\n    criticallyDampedSpringCalculations.__workletHash = 3106110703769;\n    criticallyDampedSpringCalculations.__initData = _worklet_3106110703769_init_data;\n    return criticallyDampedSpringCalculations;\n  }();\n  var _worklet_9270865231826_init_data = {\n    code: \"function underDampedSpringCalculations_reactNativeReanimated_springUtilsTs8(animation,precalculatedValues){const{toValue:toValue,current:current,velocity:velocity}=animation;const{zeta:zeta,t:t,omega0:omega0,omega1:omega1}=precalculatedValues;const v0=-velocity;const x0=toValue-current;const sin1=Math.sin(omega1*t);const cos1=Math.cos(omega1*t);const underDampedEnvelope=Math.exp(-zeta*omega0*t);const underDampedFrag1=underDampedEnvelope*(sin1*((v0+zeta*omega0*x0)/omega1)+x0*cos1);const underDampedPosition=toValue-underDampedFrag1;const underDampedVelocity=zeta*omega0*underDampedFrag1-underDampedEnvelope*(cos1*(v0+zeta*omega0*x0)-omega1*x0*sin1);return{position:underDampedPosition,velocity:underDampedVelocity};}\"\n  };\n  var underDampedSpringCalculations = exports.underDampedSpringCalculations = function () {\n    var underDampedSpringCalculations = function (animation, precalculatedValues) {\n      var toValue = animation.toValue,\n        current = animation.current,\n        velocity = animation.velocity;\n      var zeta = precalculatedValues.zeta,\n        t = precalculatedValues.t,\n        omega0 = precalculatedValues.omega0,\n        omega1 = precalculatedValues.omega1;\n      var v0 = -velocity;\n      var x0 = toValue - current;\n      var sin1 = Math.sin(omega1 * t);\n      var cos1 = Math.cos(omega1 * t);\n\n      // under damped\n      var underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n      var underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n      var underDampedPosition = toValue - underDampedFrag1;\n      // This looks crazy -- it's actually just the derivative of the oscillation function\n      var underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n      return {\n        position: underDampedPosition,\n        velocity: underDampedVelocity\n      };\n    };\n    underDampedSpringCalculations.__closure = {};\n    underDampedSpringCalculations.__workletHash = 9270865231826;\n    underDampedSpringCalculations.__initData = _worklet_9270865231826_init_data;\n    return underDampedSpringCalculations;\n  }();\n  var _worklet_16255925697932_init_data = {\n    code: \"function isAnimationTerminatingCalculation_reactNativeReanimated_springUtilsTs9(animation,config){const{toValue:toValue,velocity:velocity,startValue:startValue,current:current}=animation;const isOvershooting=config.overshootClamping?current>toValue&&startValue<toValue||current<toValue&&startValue>toValue:false;const isVelocity=Math.abs(velocity)<config.restSpeedThreshold;const isDisplacement=Math.abs(toValue-current)<config.restDisplacementThreshold;return{isOvershooting:isOvershooting,isVelocity:isVelocity,isDisplacement:isDisplacement};}\"\n  };\n  var isAnimationTerminatingCalculation = exports.isAnimationTerminatingCalculation = function () {\n    var isAnimationTerminatingCalculation = function (animation, config) {\n      var toValue = animation.toValue,\n        velocity = animation.velocity,\n        startValue = animation.startValue,\n        current = animation.current;\n      var isOvershooting = config.overshootClamping ? current > toValue && startValue < toValue || current < toValue && startValue > toValue : false;\n      var isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n      var isDisplacement = Math.abs(toValue - current) < config.restDisplacementThreshold;\n      return {\n        isOvershooting,\n        isVelocity,\n        isDisplacement\n      };\n    };\n    isAnimationTerminatingCalculation.__closure = {};\n    isAnimationTerminatingCalculation.__workletHash = 16255925697932;\n    isAnimationTerminatingCalculation.__initData = _worklet_16255925697932_init_data;\n    return isAnimationTerminatingCalculation;\n  }();\n});","lineCount":356,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"underDampedSpringCalculations"],[8,39,1,13],[8,42,1,13,"exports"],[8,49,1,13],[8,50,1,13,"scaleZetaToMatchClamps"],[8,72,1,13],[8,75,1,13,"exports"],[8,82,1,13],[8,83,1,13,"isAnimationTerminatingCalculation"],[8,116,1,13],[8,119,1,13,"exports"],[8,126,1,13],[8,127,1,13,"initialCalculations"],[8,146,1,13],[8,149,1,13,"exports"],[8,156,1,13],[8,157,1,13,"criticallyDampedSpringCalculations"],[8,191,1,13],[8,194,1,13,"exports"],[8,201,1,13],[8,202,1,13,"checkIfConfigIsValid"],[8,222,1,13],[8,225,1,13,"exports"],[8,232,1,13],[8,233,1,13,"calculateNewMassToMatchDuration"],[8,264,1,13],[8,267,1,13,"exports"],[8,274,1,13],[8,275,1,13,"bisectRoot"],[8,285,1,13],[8,288,1,13,"undefined"],[8,297,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,8,0],[10,6,8,0,"_logger"],[10,13,8,0],[10,16,8,0,"require"],[10,23,8,0],[10,24,8,0,"_dependencyMap"],[10,38,8,0],[11,2,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,2,60,0],[38,2,61,0],[39,2,61,0],[39,6,61,0,"_worklet_10144589963488_init_data"],[39,39,61,0],[40,4,61,0,"code"],[40,8,61,0],[41,2,61,0],[42,2,61,0],[42,6,61,0,"checkIfConfigIsValid"],[42,26,61,0],[42,29,61,0,"exports"],[42,36,61,0],[42,37,61,0,"checkIfConfigIsValid"],[42,57,61,0],[42,60,91,7],[43,4,91,7],[43,8,91,7,"checkIfConfigIsValid"],[43,28,91,7],[43,40,91,7,"checkIfConfigIsValid"],[43,41,91,37,"config"],[43,47,91,64],[43,49,91,75],[44,6,93,2],[44,10,93,6,"errorMessage"],[44,22,93,18],[44,25,93,21],[44,27,93,23],[45,6,95,4],[45,7,96,6],[45,18,96,17],[45,20,97,6],[45,29,97,15],[45,31,98,6],[45,45,98,20],[45,47,99,6],[45,74,99,33],[45,76,100,6],[45,96,100,26],[45,98,101,6],[45,104,101,12],[45,105,102,5],[45,106,103,4,"forEach"],[45,113,103,11],[45,114,103,13,"prop"],[45,118,103,17],[45,122,103,22],[46,8,104,4],[46,12,104,10,"value"],[46,17,104,15],[46,20,104,18,"config"],[46,26,104,24],[46,27,104,25,"prop"],[46,31,104,29],[46,32,104,30],[47,8,105,4],[47,12,105,8,"value"],[47,17,105,13],[47,21,105,17],[47,22,105,18],[47,24,105,20],[48,10,106,6,"errorMessage"],[48,22,106,18],[48,26,106,22],[48,31,106,27,"prop"],[48,35,106,31],[48,72,106,68,"value"],[48,77,106,73],[48,79,106,75],[49,8,107,4],[50,6,108,2],[50,7,108,3],[50,8,108,4],[51,6,110,2],[51,10,110,6,"config"],[51,16,110,12],[51,17,110,13,"duration"],[51,25,110,21],[51,28,110,24],[51,29,110,25],[51,31,110,27],[52,8,111,4,"errorMessage"],[52,20,111,16],[52,24,111,20],[52,61,111,57,"config"],[52,67,111,63],[52,68,111,64,"duration"],[52,76,111,72],[52,78,111,74],[53,6,112,2],[54,6,114,2],[54,10,115,4,"config"],[54,16,115,10],[54,17,115,11,"clamp"],[54,22,115,16],[54,24,115,18,"min"],[54,27,115,21],[54,31,116,4,"config"],[54,37,116,10],[54,38,116,11,"clamp"],[54,43,116,16],[54,45,116,18,"max"],[54,48,116,21],[54,52,117,4,"config"],[54,58,117,10],[54,59,117,11,"clamp"],[54,64,117,16],[54,65,117,17,"min"],[54,68,117,20],[54,71,117,23,"config"],[54,77,117,29],[54,78,117,30,"clamp"],[54,83,117,35],[54,84,117,36,"max"],[54,87,117,39],[54,89,118,4],[55,8,119,4,"errorMessage"],[55,20,119,16],[55,24,119,20],[55,88,119,84,"config"],[55,94,119,90],[55,95,119,91,"clamp"],[55,100,119,96],[55,101,119,97,"min"],[55,104,119,100],[55,114,119,110,"config"],[55,120,119,116],[55,121,119,117,"clamp"],[55,126,119,122],[55,127,119,123,"max"],[55,130,119,126],[55,134,119,130],[56,6,120,2],[57,6,122,2],[57,10,122,6,"errorMessage"],[57,22,122,18],[57,27,122,23],[57,29,122,25],[57,31,122,27],[58,8,123,4,"logger"],[58,22,123,10],[58,23,123,11,"warn"],[58,27,123,15],[58,28,123,16],[58,51,123,39],[58,54,123,42,"errorMessage"],[58,66,123,54],[58,67,123,55],[59,6,124,2],[60,6,126,2],[60,13,126,9,"errorMessage"],[60,25,126,21],[60,30,126,26],[60,32,126,28],[61,4,127,0],[61,5,127,1],[62,4,127,1,"checkIfConfigIsValid"],[62,24,127,1],[62,25,127,1,"__closure"],[62,34,127,1],[63,6,127,1,"logger"],[63,12,127,1],[63,14,123,4,"logger"],[64,4,123,10],[65,4,123,10,"checkIfConfigIsValid"],[65,24,123,10],[65,25,123,10,"__workletHash"],[65,38,123,10],[66,4,123,10,"checkIfConfigIsValid"],[66,24,123,10],[66,25,123,10,"__initData"],[66,35,123,10],[66,38,123,10,"_worklet_10144589963488_init_data"],[66,71,123,10],[67,4,123,10],[67,11,123,10,"checkIfConfigIsValid"],[67,31,123,10],[68,2,123,10],[68,3,91,7],[68,7,129,0],[69,2,129,0],[69,6,129,0,"_worklet_5648054256871_init_data"],[69,38,129,0],[70,4,129,0,"code"],[70,8,129,0],[71,2,129,0],[72,2,129,0],[72,6,129,0,"bisectRoot"],[72,16,129,0],[72,19,129,0,"exports"],[72,26,129,0],[72,27,129,0,"bisectRoot"],[72,37,129,0],[72,40,130,7],[73,4,130,7],[73,8,130,7,"bisectRoot"],[73,18,130,7],[73,30,130,7,"bisectRoot"],[73,31,130,7,"_ref"],[73,35,130,7],[73,37,140,3],[74,6,140,3],[74,10,131,2,"min"],[74,13,131,5],[74,16,131,5,"_ref"],[74,20,131,5],[74,21,131,2,"min"],[74,24,131,5],[75,8,132,2,"max"],[75,11,132,5],[75,14,132,5,"_ref"],[75,18,132,5],[75,19,132,2,"max"],[75,22,132,5],[76,8,133,2,"func"],[76,12,133,6],[76,15,133,6,"_ref"],[76,19,133,6],[76,20,133,2,"func"],[76,24,133,6],[77,8,133,6,"_ref$maxIterations"],[77,26,133,6],[77,29,133,6,"_ref"],[77,33,133,6],[77,34,134,2,"maxIterations"],[77,47,134,15],[78,8,134,2,"maxIterations"],[78,21,134,15],[78,24,134,15,"_ref$maxIterations"],[78,42,134,15],[78,47,134,15,"undefined"],[78,56,134,15],[78,59,134,18],[78,61,134,20],[78,64,134,20,"_ref$maxIterations"],[78,82,134,20],[79,6,142,2],[79,10,142,8,"ACCURACY"],[79,18,142,16],[79,21,142,19],[79,28,142,26],[80,6,143,2],[80,10,143,6,"idx"],[80,13,143,9],[80,16,143,12,"maxIterations"],[80,29,143,25],[81,6,144,2],[81,10,144,6,"current"],[81,17,144,13],[81,20,144,16],[81,21,144,17,"max"],[81,24,144,20],[81,27,144,23,"min"],[81,30,144,26],[81,34,144,30],[81,35,144,31],[82,6,145,2],[82,13,145,9,"Math"],[82,17,145,13],[82,18,145,14,"abs"],[82,21,145,17],[82,22,145,18,"func"],[82,26,145,22],[82,27,145,23,"current"],[82,34,145,30],[82,35,145,31],[82,36,145,32],[82,39,145,35,"ACCURACY"],[82,47,145,43],[82,51,145,47,"idx"],[82,54,145,50],[82,57,145,53],[82,58,145,54],[82,60,145,56],[83,8,146,4,"idx"],[83,11,146,7],[83,15,146,11],[83,16,146,12],[84,8,148,4],[84,12,148,8,"func"],[84,16,148,12],[84,17,148,13,"current"],[84,24,148,20],[84,25,148,21],[84,28,148,24],[84,29,148,25],[84,31,148,27],[85,10,149,6,"min"],[85,13,149,9],[85,16,149,12,"current"],[85,23,149,19],[86,8,150,4],[86,9,150,5],[86,15,150,11],[87,10,151,6,"max"],[87,13,151,9],[87,16,151,12,"current"],[87,23,151,19],[88,8,152,4],[89,8,153,4,"current"],[89,15,153,11],[89,18,153,14],[89,19,153,15,"min"],[89,22,153,18],[89,25,153,21,"max"],[89,28,153,24],[89,32,153,28],[89,33,153,29],[90,6,154,2],[91,6,155,2],[91,13,155,9,"current"],[91,20,155,16],[92,4,156,0],[92,5,156,1],[93,4,156,1,"bisectRoot"],[93,14,156,1],[93,15,156,1,"__closure"],[93,24,156,1],[94,4,156,1,"bisectRoot"],[94,14,156,1],[94,15,156,1,"__workletHash"],[94,28,156,1],[95,4,156,1,"bisectRoot"],[95,14,156,1],[95,15,156,1,"__initData"],[95,25,156,1],[95,28,156,1,"_worklet_5648054256871_init_data"],[95,60,156,1],[96,4,156,1],[96,11,156,1,"bisectRoot"],[96,21,156,1],[97,2,156,1],[97,3,130,7],[98,2,130,7],[98,6,130,7,"_worklet_4157634151051_init_data"],[98,38,130,7],[99,4,130,7,"code"],[99,8,130,7],[100,2,130,7],[101,2,130,7],[101,6,130,7,"initialCalculations"],[101,25,130,7],[101,28,130,7,"exports"],[101,35,130,7],[101,36,130,7,"initialCalculations"],[101,55,130,7],[101,58,158,7],[102,4,158,7],[102,8,158,7,"initialCalculations"],[102,27,158,7],[102,39,158,7,"initialCalculations"],[102,40,158,7],[102,42,165,2],[103,6,165,2],[103,10,159,2,"mass"],[103,14,159,6],[103,17,159,6,"arguments"],[103,26,159,6],[103,27,159,6,"length"],[103,33,159,6],[103,41,159,6,"arguments"],[103,50,159,6],[103,58,159,6,"undefined"],[103,67,159,6],[103,70,159,6,"arguments"],[103,79,159,6],[103,85,159,9],[103,86,159,10],[104,6,159,10],[104,10,160,2,"config"],[104,16,160,49],[104,19,160,49,"arguments"],[104,28,160,49],[104,29,160,49,"length"],[104,35,160,49],[104,42,160,49,"arguments"],[104,51,160,49],[104,57,160,49,"undefined"],[104,66,160,49],[105,6,168,2],[105,10,168,6,"config"],[105,16,168,12],[105,17,168,13,"skipAnimation"],[105,30,168,26],[105,32,168,28],[106,8,169,4],[106,15,169,11],[107,10,169,13,"zeta"],[107,14,169,17],[107,16,169,19],[107,17,169,20],[108,10,169,22,"omega0"],[108,16,169,28],[108,18,169,30],[108,19,169,31],[109,10,169,33,"omega1"],[109,16,169,39],[109,18,169,41],[110,8,169,43],[110,9,169,44],[111,6,170,2],[112,6,172,2],[112,10,172,6,"config"],[112,16,172,12],[112,17,172,13,"useDuration"],[112,28,172,24],[112,30,172,26],[113,8,173,4],[113,12,173,23,"k"],[113,13,173,24],[113,16,173,49,"config"],[113,22,173,55],[113,23,173,12,"stiffness"],[113,32,173,21],[114,10,173,40,"zeta"],[114,14,173,44],[114,17,173,49,"config"],[114,23,173,55],[114,24,173,26,"dampingRatio"],[114,36,173,38],[116,8,175,4],[117,0,176,0],[118,0,177,0],[119,0,178,0],[120,0,179,0],[121,8,180,4],[121,12,180,10,"omega0"],[121,18,180,16],[121,21,180,19,"Math"],[121,25,180,23],[121,26,180,24,"sqrt"],[121,30,180,28],[121,31,180,29,"k"],[121,32,180,30],[121,35,180,33,"mass"],[121,39,180,37],[121,40,180,38],[122,8,181,4],[122,12,181,10,"omega1"],[122,18,181,16],[122,21,181,19,"omega0"],[122,27,181,25],[122,30,181,28,"Math"],[122,34,181,32],[122,35,181,33,"sqrt"],[122,39,181,37],[122,40,181,38],[122,41,181,39],[122,44,181,42,"zeta"],[122,48,181,46],[122,52,181,50],[122,53,181,51],[122,54,181,52],[123,8,183,4],[123,15,183,11],[124,10,183,13,"zeta"],[124,14,183,17],[125,10,183,19,"omega0"],[125,16,183,25],[126,10,183,27,"omega1"],[127,8,183,34],[127,9,183,35],[128,6,184,2],[128,7,184,3],[128,13,184,9],[129,8,185,4],[129,12,185,21,"c"],[129,13,185,22],[129,16,185,50,"config"],[129,22,185,56],[129,23,185,12,"damping"],[129,30,185,19],[130,10,185,30,"m"],[130,11,185,31],[130,14,185,50,"config"],[130,20,185,56],[130,21,185,24,"mass"],[130,25,185,28],[131,10,185,44,"k"],[131,12,185,45],[131,15,185,50,"config"],[131,21,185,56],[131,22,185,33,"stiffness"],[131,31,185,42],[132,8,187,4],[132,12,187,10,"zeta"],[132,17,187,14],[132,20,187,17,"c"],[132,21,187,18],[132,25,187,22],[132,26,187,23],[132,29,187,26,"Math"],[132,33,187,30],[132,34,187,31,"sqrt"],[132,38,187,35],[132,39,187,36,"k"],[132,41,187,37],[132,44,187,40,"m"],[132,45,187,41],[132,46,187,42],[132,47,187,43],[132,48,187,44],[132,49,187,45],[133,8,188,4],[133,12,188,10,"omega0"],[133,18,188,16],[133,21,188,19,"Math"],[133,25,188,23],[133,26,188,24,"sqrt"],[133,30,188,28],[133,31,188,29,"k"],[133,33,188,30],[133,36,188,33,"m"],[133,37,188,34],[133,38,188,35],[133,39,188,36],[133,40,188,37],[134,8,189,4],[134,12,189,10,"omega1"],[134,19,189,16],[134,22,189,19,"omega0"],[134,28,189,25],[134,31,189,28,"Math"],[134,35,189,32],[134,36,189,33,"sqrt"],[134,40,189,37],[134,41,189,38],[134,42,189,39],[134,45,189,42,"zeta"],[134,50,189,46],[134,54,189,50],[134,55,189,51],[134,56,189,52],[134,57,189,53],[134,58,189,54],[136,8,191,4],[136,15,191,11],[137,10,191,13,"zeta"],[137,14,191,17],[137,16,191,13,"zeta"],[137,21,191,17],[138,10,191,19,"omega0"],[138,16,191,25],[138,18,191,19,"omega0"],[138,24,191,25],[139,10,191,27,"omega1"],[139,16,191,33],[139,18,191,27,"omega1"],[140,8,191,34],[140,9,191,35],[141,6,192,2],[142,4,193,0],[142,5,193,1],[143,4,193,1,"initialCalculations"],[143,23,193,1],[143,24,193,1,"__closure"],[143,33,193,1],[144,4,193,1,"initialCalculations"],[144,23,193,1],[144,24,193,1,"__workletHash"],[144,37,193,1],[145,4,193,1,"initialCalculations"],[145,23,193,1],[145,24,193,1,"__initData"],[145,34,193,1],[145,37,193,1,"_worklet_4157634151051_init_data"],[145,69,193,1],[146,4,193,1],[146,11,193,1,"initialCalculations"],[146,30,193,1],[147,2,193,1],[147,3,158,7],[148,2,195,0],[149,0,196,0],[150,0,197,0],[151,0,198,0],[152,0,199,0],[153,2,195,0],[153,6,195,0,"_worklet_13242486714136_init_data"],[153,39,195,0],[154,4,195,0,"code"],[154,8,195,0],[155,2,195,0],[156,2,195,0],[156,6,195,0,"scaleZetaToMatchClamps"],[156,28,195,0],[156,31,195,0,"exports"],[156,38,195,0],[156,39,195,0,"scaleZetaToMatchClamps"],[156,61,195,0],[156,64,200,7],[157,4,200,7],[157,8,200,7,"scaleZetaToMatchClamps"],[157,30,200,7],[157,42,200,7,"scaleZetaToMatchClamps"],[157,43,201,2,"animation"],[157,52,201,28],[157,54,202,2,"clamp"],[157,59,202,39],[157,61,203,10],[158,6,205,2],[158,10,205,10,"zeta"],[158,14,205,14],[158,17,205,40,"animation"],[158,26,205,49],[158,27,205,10,"zeta"],[158,31,205,14],[159,8,205,16,"toValue"],[159,15,205,23],[159,18,205,40,"animation"],[159,27,205,49],[159,28,205,16,"toValue"],[159,35,205,23],[160,8,205,25,"startValue"],[160,18,205,35],[160,21,205,40,"animation"],[160,30,205,49],[160,31,205,25,"startValue"],[160,41,205,35],[161,6,206,2],[161,10,206,8,"toValueNum"],[161,20,206,18],[161,23,206,21,"Number"],[161,29,206,27],[161,30,206,28,"toValue"],[161,37,206,35],[161,38,206,36],[162,6,208,2],[162,10,208,6,"toValueNum"],[162,20,208,16],[162,25,208,21,"startValue"],[162,35,208,31],[162,37,208,33],[163,8,209,4],[163,15,209,11,"zeta"],[163,19,209,15],[164,6,210,2],[165,6,212,2],[165,10,212,2,"_ref2"],[165,15,212,2],[165,18,213,4,"toValueNum"],[165,28,213,14],[165,31,213,17,"startValue"],[165,41,213,27],[165,44,213,30],[165,45,213,31],[165,48,214,8],[165,49,214,9,"clamp"],[165,54,214,14],[165,55,214,15,"min"],[165,58,214,18],[165,60,214,20,"clamp"],[165,65,214,25],[165,66,214,26,"max"],[165,69,214,29],[165,70,214,30],[165,73,215,8],[165,74,215,9,"clamp"],[165,79,215,14],[165,80,215,15,"max"],[165,83,215,18],[165,85,215,20,"clamp"],[165,90,215,25],[165,91,215,26,"min"],[165,94,215,29],[165,95,215,30],[166,8,215,30,"_ref3"],[166,13,215,30],[166,20,215,30,"_slicedToArray2"],[166,35,215,30],[166,36,215,30,"default"],[166,43,215,30],[166,45,215,30,"_ref2"],[166,50,215,30],[167,8,212,9,"firstBound"],[167,18,212,19],[167,21,212,19,"_ref3"],[167,26,212,19],[168,8,212,21,"secondBound"],[168,19,212,32],[168,22,212,32,"_ref3"],[168,27,212,32],[170,6,217,2],[171,0,218,0],[172,0,219,0],[173,0,220,0],[174,0,221,0],[175,0,222,0],[176,0,223,0],[177,0,224,0],[178,0,225,0],[179,0,226,0],[181,6,228,2],[181,10,228,8,"relativeExtremum1"],[181,27,228,25],[181,30,229,4,"secondBound"],[181,41,229,15],[181,46,229,20,"undefined"],[181,55,229,29],[181,58,230,8,"Math"],[181,62,230,12],[181,63,230,13,"abs"],[181,66,230,16],[181,67,230,17],[181,68,230,18,"secondBound"],[181,79,230,29],[181,82,230,32,"toValueNum"],[181,92,230,42],[181,97,230,47,"toValueNum"],[181,107,230,57],[181,110,230,60,"startValue"],[181,120,230,70],[181,121,230,71],[181,122,230,72],[181,125,231,8,"undefined"],[181,134,231,17],[182,6,233,2],[182,10,233,8,"relativeExtremum2"],[182,27,233,25],[182,30,234,4,"firstBound"],[182,40,234,14],[182,45,234,19,"undefined"],[182,54,234,28],[182,57,235,8,"Math"],[182,61,235,12],[182,62,235,13,"abs"],[182,65,235,16],[182,66,235,17],[182,67,235,18,"firstBound"],[182,77,235,28],[182,80,235,31,"toValueNum"],[182,90,235,41],[182,95,235,46,"toValueNum"],[182,105,235,56],[182,108,235,59,"startValue"],[182,118,235,69],[182,119,235,70],[182,120,235,71],[182,123,236,8,"undefined"],[182,132,236,17],[184,6,238,2],[185,0,239,0],[186,0,240,0],[187,0,241,0],[188,0,242,0],[189,0,243,0],[190,0,244,0],[191,0,245,0],[192,0,246,0],[194,6,248,2],[194,10,248,8,"newZeta1"],[194,18,248,16],[194,21,249,4,"relativeExtremum1"],[194,38,249,21],[194,43,249,26,"undefined"],[194,52,249,35],[194,55,250,8,"Math"],[194,59,250,12],[194,60,250,13,"abs"],[194,63,250,16],[194,64,250,17,"Math"],[194,68,250,21],[194,69,250,22,"log"],[194,72,250,25],[194,73,250,26,"relativeExtremum1"],[194,90,250,43],[194,91,250,44],[194,94,250,47,"Math"],[194,98,250,51],[194,99,250,52,"PI"],[194,101,250,54],[194,102,250,55],[194,105,251,8,"undefined"],[194,114,251,17],[195,6,253,2],[195,10,253,8,"newZeta2"],[195,18,253,16],[195,21,254,4,"relativeExtremum2"],[195,38,254,21],[195,43,254,26,"undefined"],[195,52,254,35],[195,55,255,8,"Math"],[195,59,255,12],[195,60,255,13,"abs"],[195,63,255,16],[195,64,255,17,"Math"],[195,68,255,21],[195,69,255,22,"log"],[195,72,255,25],[195,73,255,26,"relativeExtremum2"],[195,90,255,43],[195,91,255,44],[195,95,255,48],[195,96,255,49],[195,99,255,52,"Math"],[195,103,255,56],[195,104,255,57,"PI"],[195,106,255,59],[195,107,255,60],[195,108,255,61],[195,111,256,8,"undefined"],[195,120,256,17],[196,6,258,2],[196,10,258,8,"zetaSatisfyingClamp"],[196,29,258,27],[196,32,258,30],[196,33,258,31,"newZeta1"],[196,41,258,39],[196,43,258,41,"newZeta2"],[196,51,258,49],[196,52,258,50],[196,53,258,51,"filter"],[196,59,258,57],[196,60,259,5,"x"],[196,61,259,26],[196,65,259,44,"x"],[196,66,259,45],[196,71,259,50,"undefined"],[196,80,260,2],[196,81,260,3],[197,6,261,2],[198,6,262,2],[199,6,263,2],[199,13,263,9,"Math"],[199,17,263,13],[199,18,263,14,"max"],[199,21,263,17],[199,22,263,18],[199,25,263,21,"zetaSatisfyingClamp"],[199,44,263,40],[199,46,263,42,"zeta"],[199,50,263,46],[199,51,263,47],[200,4,264,0],[200,5,264,1],[201,4,264,1,"scaleZetaToMatchClamps"],[201,26,264,1],[201,27,264,1,"__closure"],[201,36,264,1],[202,4,264,1,"scaleZetaToMatchClamps"],[202,26,264,1],[202,27,264,1,"__workletHash"],[202,40,264,1],[203,4,264,1,"scaleZetaToMatchClamps"],[203,26,264,1],[203,27,264,1,"__initData"],[203,37,264,1],[203,40,264,1,"_worklet_13242486714136_init_data"],[203,73,264,1],[204,4,264,1],[204,11,264,1,"scaleZetaToMatchClamps"],[204,33,264,1],[205,2,264,1],[205,3,200,7],[206,2,266,0],[207,2,266,0],[207,6,266,0,"_worklet_6359222544220_init_data"],[207,38,266,0],[208,4,266,0,"code"],[208,8,266,0],[209,2,266,0],[210,2,266,0],[210,6,266,0,"_worklet_2588271284915_init_data"],[210,38,266,0],[211,4,266,0,"code"],[211,8,266,0],[212,2,266,0],[213,2,266,0],[213,6,266,0,"calculateNewMassToMatchDuration"],[213,37,266,0],[213,40,266,0,"exports"],[213,47,266,0],[213,48,266,0,"calculateNewMassToMatchDuration"],[213,79,266,0],[213,82,267,7],[214,4,267,7],[214,8,267,7,"calculateNewMassToMatchDuration"],[214,39,267,7],[214,51,267,7,"calculateNewMassToMatchDuration"],[214,52,268,2,"x0"],[214,54,268,12],[214,56,269,2,"config"],[214,62,269,49],[214,64,270,2,"v0"],[214,66,270,12],[214,68,271,2],[215,6,273,2],[215,10,273,6,"config"],[215,16,273,12],[215,17,273,13,"skipAnimation"],[215,30,273,26],[215,32,273,28],[216,8,274,4],[216,15,274,11],[216,16,274,12],[217,6,275,2],[219,6,277,2],[220,0,278,0],[221,0,279,0],[222,0,280,0],[223,0,281,0],[224,0,282,0],[225,0,283,0],[226,0,284,0],[227,0,285,0],[228,0,286,0],[229,0,287,0],[230,0,288,0],[231,0,289,0],[232,0,290,0],[233,0,291,0],[234,0,292,0],[235,0,293,0],[236,0,294,0],[237,0,295,0],[238,0,296,0],[239,0,297,0],[240,6,298,2],[240,10,299,15,"k"],[240,11,299,16],[240,14,303,6,"config"],[240,20,303,12],[240,21,299,4,"stiffness"],[240,30,299,13],[241,8,300,18,"zeta"],[241,12,300,22],[241,15,303,6,"config"],[241,21,303,12],[241,22,300,4,"dampingRatio"],[241,34,300,16],[242,8,301,24,"threshold"],[242,17,301,33],[242,20,303,6,"config"],[242,26,303,12],[242,27,301,4,"restSpeedThreshold"],[242,45,301,22],[243,8,302,4,"duration"],[243,16,302,12],[243,19,303,6,"config"],[243,25,303,12],[243,26,302,4,"duration"],[243,34,302,12],[244,6,305,2],[244,10,305,8,"durationForMass"],[244,25,305,23],[244,28,305,26],[245,8,305,26],[245,12,305,26,"reactNativeReanimated_springUtilsTs6"],[245,48,305,26],[245,60,305,26,"reactNativeReanimated_springUtilsTs6"],[245,61,305,27,"mass"],[245,65,305,39],[245,67,305,44],[246,10,307,4],[246,14,307,10,"amplitude"],[246,23,307,19],[246,26,308,6],[246,27,308,7,"mass"],[246,31,308,11],[246,34,308,14,"v0"],[246,36,308,16],[246,39,308,19,"v0"],[246,41,308,21],[246,44,308,24,"k"],[246,45,308,25],[246,48,308,28,"x0"],[246,50,308,30],[246,53,308,33,"x0"],[246,55,308,35],[246,60,308,40,"Math"],[246,64,308,44],[246,65,308,45,"exp"],[246,68,308,48],[246,69,308,49],[246,70,308,50],[246,73,308,53],[246,76,308,56],[246,79,308,59,"zeta"],[246,83,308,63],[246,84,308,64],[246,87,308,67,"k"],[246,88,308,68],[246,89,308,69],[247,10,309,4],[247,14,309,10,"c"],[247,15,309,11],[247,18,309,14,"zeta"],[247,22,309,18],[247,25,309,21],[247,26,309,22],[247,29,309,25,"Math"],[247,33,309,29],[247,34,309,30,"sqrt"],[247,38,309,34],[247,39,309,35,"k"],[247,40,309,36],[247,43,309,39,"mass"],[247,47,309,43],[247,48,309,44],[248,10,310,4],[248,17,311,6],[248,21,311,10],[248,25,311,15],[248,30,311,20,"mass"],[248,34,311,24],[248,37,311,28,"c"],[248,38,311,29],[248,39,311,30],[248,42,311,33,"Math"],[248,46,311,37],[248,47,311,38,"log"],[248,50,311,41],[248,51,311,43,"threshold"],[248,60,311,52],[248,63,311,55],[248,67,311,59],[248,70,311,63,"amplitude"],[248,79,311,72],[248,80,311,73],[248,83,312,6,"duration"],[248,91,312,14],[249,8,314,2],[249,9,314,3],[250,8,314,3,"reactNativeReanimated_springUtilsTs6"],[250,44,314,3],[250,45,314,3,"__closure"],[250,54,314,3],[251,10,314,3,"v0"],[251,12,314,3],[252,10,314,3,"k"],[252,11,314,3],[253,10,314,3,"x0"],[253,12,314,3],[254,10,314,3,"zeta"],[254,14,314,3],[255,10,314,3,"threshold"],[255,19,314,3],[256,10,314,3,"duration"],[257,8,314,3],[258,8,314,3,"reactNativeReanimated_springUtilsTs6"],[258,44,314,3],[258,45,314,3,"__workletHash"],[258,58,314,3],[259,8,314,3,"reactNativeReanimated_springUtilsTs6"],[259,44,314,3],[259,45,314,3,"__initData"],[259,55,314,3],[259,58,314,3,"_worklet_2588271284915_init_data"],[259,90,314,3],[260,8,314,3],[260,15,314,3,"reactNativeReanimated_springUtilsTs6"],[260,51,314,3],[261,6,314,3],[261,7,305,26],[261,9,314,3],[263,6,316,2],[264,6,317,2],[264,13,317,9,"bisectRoot"],[264,23,317,19],[264,24,317,20],[265,8,317,22,"min"],[265,11,317,25],[265,13,317,27],[265,14,317,28],[266,8,317,30,"max"],[266,11,317,33],[266,13,317,35],[266,16,317,38],[267,8,317,40,"func"],[267,12,317,44],[267,14,317,46,"durationForMass"],[268,6,317,62],[268,7,317,63],[268,8,317,64],[269,4,318,0],[269,5,318,1],[270,4,318,1,"calculateNewMassToMatchDuration"],[270,35,318,1],[270,36,318,1,"__closure"],[270,45,318,1],[271,6,318,1,"bisectRoot"],[272,4,318,1],[273,4,318,1,"calculateNewMassToMatchDuration"],[273,35,318,1],[273,36,318,1,"__workletHash"],[273,49,318,1],[274,4,318,1,"calculateNewMassToMatchDuration"],[274,35,318,1],[274,36,318,1,"__initData"],[274,46,318,1],[274,49,318,1,"_worklet_6359222544220_init_data"],[274,81,318,1],[275,4,318,1],[275,11,318,1,"calculateNewMassToMatchDuration"],[275,42,318,1],[276,2,318,1],[276,3,267,7],[277,2,267,7],[277,6,267,7,"_worklet_3106110703769_init_data"],[277,38,267,7],[278,4,267,7,"code"],[278,8,267,7],[279,2,267,7],[280,2,267,7],[280,6,267,7,"criticallyDampedSpringCalculations"],[280,40,267,7],[280,43,267,7,"exports"],[280,50,267,7],[280,51,267,7,"criticallyDampedSpringCalculations"],[280,85,267,7],[280,88,320,7],[281,4,320,7],[281,8,320,7,"criticallyDampedSpringCalculations"],[281,42,320,7],[281,54,320,7,"criticallyDampedSpringCalculations"],[281,55,321,2,"animation"],[281,64,321,33],[281,66,322,2,"precalculatedValues"],[281,85,327,3],[281,87,328,42],[282,6,330,2],[282,10,330,10,"toValue"],[282,17,330,17],[282,20,330,22,"animation"],[282,29,330,31],[282,30,330,10,"toValue"],[282,37,330,17],[283,6,332,2],[283,10,332,10,"v0"],[283,12,332,12],[283,15,332,32,"precalculatedValues"],[283,34,332,51],[283,35,332,10,"v0"],[283,37,332,12],[284,8,332,14,"x0"],[284,10,332,16],[284,13,332,32,"precalculatedValues"],[284,32,332,51],[284,33,332,14,"x0"],[284,35,332,16],[285,8,332,18,"omega0"],[285,14,332,24],[285,17,332,32,"precalculatedValues"],[285,36,332,51],[285,37,332,18,"omega0"],[285,43,332,24],[286,8,332,26,"t"],[286,9,332,27],[286,12,332,32,"precalculatedValues"],[286,31,332,51],[286,32,332,26,"t"],[286,33,332,27],[287,6,334,2],[287,10,334,8,"criticallyDampedEnvelope"],[287,34,334,32],[287,37,334,35,"Math"],[287,41,334,39],[287,42,334,40,"exp"],[287,45,334,43],[287,46,334,44],[287,47,334,45,"omega0"],[287,53,334,51],[287,56,334,54,"t"],[287,57,334,55],[287,58,334,56],[288,6,335,2],[288,10,335,8,"criticallyDampedPosition"],[288,34,335,32],[288,37,336,4,"toValue"],[288,44,336,11],[288,47,336,14,"criticallyDampedEnvelope"],[288,71,336,38],[288,75,336,42,"x0"],[288,77,336,44],[288,80,336,47],[288,81,336,48,"v0"],[288,83,336,50],[288,86,336,53,"omega0"],[288,92,336,59],[288,95,336,62,"x0"],[288,97,336,64],[288,101,336,68,"t"],[288,102,336,69],[288,103,336,70],[289,6,338,2],[289,10,338,8,"criticallyDampedVelocity"],[289,34,338,32],[289,37,339,4,"criticallyDampedEnvelope"],[289,61,339,28],[289,65,340,5,"v0"],[289,67,340,7],[289,71,340,11,"t"],[289,72,340,12],[289,75,340,15,"omega0"],[289,81,340,21],[289,84,340,24],[289,85,340,25],[289,86,340,26],[289,89,340,29,"t"],[289,90,340,30],[289,93,340,33,"x0"],[289,95,340,35],[289,98,340,38,"omega0"],[289,104,340,44],[289,107,340,47,"omega0"],[289,113,340,53],[289,114,340,54],[290,6,342,2],[290,13,342,9],[291,8,343,4,"position"],[291,16,343,12],[291,18,343,14,"criticallyDampedPosition"],[291,42,343,38],[292,8,344,4,"velocity"],[292,16,344,12],[292,18,344,14,"criticallyDampedVelocity"],[293,6,345,2],[293,7,345,3],[294,4,346,0],[294,5,346,1],[295,4,346,1,"criticallyDampedSpringCalculations"],[295,38,346,1],[295,39,346,1,"__closure"],[295,48,346,1],[296,4,346,1,"criticallyDampedSpringCalculations"],[296,38,346,1],[296,39,346,1,"__workletHash"],[296,52,346,1],[297,4,346,1,"criticallyDampedSpringCalculations"],[297,38,346,1],[297,39,346,1,"__initData"],[297,49,346,1],[297,52,346,1,"_worklet_3106110703769_init_data"],[297,84,346,1],[298,4,346,1],[298,11,346,1,"criticallyDampedSpringCalculations"],[298,45,346,1],[299,2,346,1],[299,3,320,7],[300,2,320,7],[300,6,320,7,"_worklet_9270865231826_init_data"],[300,38,320,7],[301,4,320,7,"code"],[301,8,320,7],[302,2,320,7],[303,2,320,7],[303,6,320,7,"underDampedSpringCalculations"],[303,35,320,7],[303,38,320,7,"exports"],[303,45,320,7],[303,46,320,7,"underDampedSpringCalculations"],[303,75,320,7],[303,78,348,7],[304,4,348,7],[304,8,348,7,"underDampedSpringCalculations"],[304,37,348,7],[304,49,348,7,"underDampedSpringCalculations"],[304,50,349,2,"animation"],[304,59,349,33],[304,61,350,2,"precalculatedValues"],[304,80,357,3],[304,82,358,42],[305,6,360,2],[305,10,360,10,"toValue"],[305,17,360,17],[305,20,360,41,"animation"],[305,29,360,50],[305,30,360,10,"toValue"],[305,37,360,17],[306,8,360,19,"current"],[306,15,360,26],[306,18,360,41,"animation"],[306,27,360,50],[306,28,360,19,"current"],[306,35,360,26],[307,8,360,28,"velocity"],[307,16,360,36],[307,19,360,41,"animation"],[307,28,360,50],[307,29,360,28,"velocity"],[307,37,360,36],[308,6,362,2],[308,10,362,10,"zeta"],[308,14,362,14],[308,17,362,38,"precalculatedValues"],[308,36,362,57],[308,37,362,10,"zeta"],[308,41,362,14],[309,8,362,16,"t"],[309,9,362,17],[309,12,362,38,"precalculatedValues"],[309,31,362,57],[309,32,362,16,"t"],[309,33,362,17],[310,8,362,19,"omega0"],[310,14,362,25],[310,17,362,38,"precalculatedValues"],[310,36,362,57],[310,37,362,19,"omega0"],[310,43,362,25],[311,8,362,27,"omega1"],[311,14,362,33],[311,17,362,38,"precalculatedValues"],[311,36,362,57],[311,37,362,27,"omega1"],[311,43,362,33],[312,6,364,2],[312,10,364,8,"v0"],[312,12,364,10],[312,15,364,13],[312,16,364,14,"velocity"],[312,24,364,22],[313,6,365,2],[313,10,365,8,"x0"],[313,12,365,10],[313,15,365,13,"toValue"],[313,22,365,20],[313,25,365,23,"current"],[313,32,365,30],[314,6,367,2],[314,10,367,8,"sin1"],[314,14,367,12],[314,17,367,15,"Math"],[314,21,367,19],[314,22,367,20,"sin"],[314,25,367,23],[314,26,367,24,"omega1"],[314,32,367,30],[314,35,367,33,"t"],[314,36,367,34],[314,37,367,35],[315,6,368,2],[315,10,368,8,"cos1"],[315,14,368,12],[315,17,368,15,"Math"],[315,21,368,19],[315,22,368,20,"cos"],[315,25,368,23],[315,26,368,24,"omega1"],[315,32,368,30],[315,35,368,33,"t"],[315,36,368,34],[315,37,368,35],[317,6,370,2],[318,6,371,2],[318,10,371,8,"underDampedEnvelope"],[318,29,371,27],[318,32,371,30,"Math"],[318,36,371,34],[318,37,371,35,"exp"],[318,40,371,38],[318,41,371,39],[318,42,371,40,"zeta"],[318,46,371,44],[318,49,371,47,"omega0"],[318,55,371,53],[318,58,371,56,"t"],[318,59,371,57],[318,60,371,58],[319,6,372,2],[319,10,372,8,"underDampedFrag1"],[319,26,372,24],[319,29,373,4,"underDampedEnvelope"],[319,48,373,23],[319,52,374,5,"sin1"],[319,56,374,9],[319,60,374,13],[319,61,374,14,"v0"],[319,63,374,16],[319,66,374,19,"zeta"],[319,70,374,23],[319,73,374,26,"omega0"],[319,79,374,32],[319,82,374,35,"x0"],[319,84,374,37],[319,88,374,41,"omega1"],[319,94,374,47],[319,95,374,48],[319,98,374,51,"x0"],[319,100,374,53],[319,103,374,56,"cos1"],[319,107,374,60],[319,108,374,61],[320,6,376,2],[320,10,376,8,"underDampedPosition"],[320,29,376,27],[320,32,376,30,"toValue"],[320,39,376,37],[320,42,376,40,"underDampedFrag1"],[320,58,376,56],[321,6,377,2],[322,6,378,2],[322,10,378,8,"underDampedVelocity"],[322,29,378,27],[322,32,379,4,"zeta"],[322,36,379,8],[322,39,379,11,"omega0"],[322,45,379,17],[322,48,379,20,"underDampedFrag1"],[322,64,379,36],[322,67,380,4,"underDampedEnvelope"],[322,86,380,23],[322,90,381,7,"cos1"],[322,94,381,11],[322,98,381,15,"v0"],[322,100,381,17],[322,103,381,20,"zeta"],[322,107,381,24],[322,110,381,27,"omega0"],[322,116,381,33],[322,119,381,36,"x0"],[322,121,381,38],[322,122,381,39],[322,125,381,42,"omega1"],[322,131,381,48],[322,134,381,51,"x0"],[322,136,381,53],[322,139,381,56,"sin1"],[322,143,381,60],[322,144,381,61],[323,6,383,2],[323,13,383,9],[324,8,383,11,"position"],[324,16,383,19],[324,18,383,21,"underDampedPosition"],[324,37,383,40],[325,8,383,42,"velocity"],[325,16,383,50],[325,18,383,52,"underDampedVelocity"],[326,6,383,72],[326,7,383,73],[327,4,384,0],[327,5,384,1],[328,4,384,1,"underDampedSpringCalculations"],[328,33,384,1],[328,34,384,1,"__closure"],[328,43,384,1],[329,4,384,1,"underDampedSpringCalculations"],[329,33,384,1],[329,34,384,1,"__workletHash"],[329,47,384,1],[330,4,384,1,"underDampedSpringCalculations"],[330,33,384,1],[330,34,384,1,"__initData"],[330,44,384,1],[330,47,384,1,"_worklet_9270865231826_init_data"],[330,79,384,1],[331,4,384,1],[331,11,384,1,"underDampedSpringCalculations"],[331,40,384,1],[332,2,384,1],[332,3,348,7],[333,2,348,7],[333,6,348,7,"_worklet_16255925697932_init_data"],[333,39,348,7],[334,4,348,7,"code"],[334,8,348,7],[335,2,348,7],[336,2,348,7],[336,6,348,7,"isAnimationTerminatingCalculation"],[336,39,348,7],[336,42,348,7,"exports"],[336,49,348,7],[336,50,348,7,"isAnimationTerminatingCalculation"],[336,83,348,7],[336,86,386,7],[337,4,386,7],[337,8,386,7,"isAnimationTerminatingCalculation"],[337,41,386,7],[337,53,386,7,"isAnimationTerminatingCalculation"],[337,54,387,2,"animation"],[337,63,387,33],[337,65,388,2,"config"],[337,71,388,29],[337,73,393,2],[338,6,395,2],[338,10,395,10,"toValue"],[338,17,395,17],[338,20,395,53,"animation"],[338,29,395,62],[338,30,395,10,"toValue"],[338,37,395,17],[339,8,395,19,"velocity"],[339,16,395,27],[339,19,395,53,"animation"],[339,28,395,62],[339,29,395,19,"velocity"],[339,37,395,27],[340,8,395,29,"startValue"],[340,18,395,39],[340,21,395,53,"animation"],[340,30,395,62],[340,31,395,29,"startValue"],[340,41,395,39],[341,8,395,41,"current"],[341,15,395,48],[341,18,395,53,"animation"],[341,27,395,62],[341,28,395,41,"current"],[341,35,395,48],[342,6,397,2],[342,10,397,8,"isOvershooting"],[342,24,397,22],[342,27,397,25,"config"],[342,33,397,31],[342,34,397,32,"overshootClamping"],[342,51,397,49],[342,54,398,7,"current"],[342,61,398,14],[342,64,398,17,"toValue"],[342,71,398,24],[342,75,398,28,"startValue"],[342,85,398,38],[342,88,398,41,"toValue"],[342,95,398,48],[342,99,399,7,"current"],[342,106,399,14],[342,109,399,17,"toValue"],[342,116,399,24],[342,120,399,28,"startValue"],[342,130,399,38],[342,133,399,41,"toValue"],[342,140,399,49],[342,143,400,6],[342,148,400,11],[343,6,402,2],[343,10,402,8,"isVelocity"],[343,20,402,18],[343,23,402,21,"Math"],[343,27,402,25],[343,28,402,26,"abs"],[343,31,402,29],[343,32,402,30,"velocity"],[343,40,402,38],[343,41,402,39],[343,44,402,42,"config"],[343,50,402,48],[343,51,402,49,"restSpeedThreshold"],[343,69,402,67],[344,6,403,2],[344,10,403,8,"isDisplacement"],[344,24,403,22],[344,27,404,4,"Math"],[344,31,404,8],[344,32,404,9,"abs"],[344,35,404,12],[344,36,404,13,"toValue"],[344,43,404,20],[344,46,404,23,"current"],[344,53,404,30],[344,54,404,31],[344,57,404,34,"config"],[344,63,404,40],[344,64,404,41,"restDisplacementThreshold"],[344,89,404,66],[345,6,406,2],[345,13,406,9],[346,8,406,11,"isOvershooting"],[346,22,406,25],[347,8,406,27,"isVelocity"],[347,18,406,37],[348,8,406,39,"isDisplacement"],[349,6,406,54],[349,7,406,55],[350,4,407,0],[350,5,407,1],[351,4,407,1,"isAnimationTerminatingCalculation"],[351,37,407,1],[351,38,407,1,"__closure"],[351,47,407,1],[352,4,407,1,"isAnimationTerminatingCalculation"],[352,37,407,1],[352,38,407,1,"__workletHash"],[352,51,407,1],[353,4,407,1,"isAnimationTerminatingCalculation"],[353,37,407,1],[353,38,407,1,"__initData"],[353,48,407,1],[353,51,407,1,"_worklet_16255925697932_init_data"],[353,84,407,1],[354,4,407,1],[354,11,407,1,"isAnimationTerminatingCalculation"],[354,44,407,1],[355,2,407,1],[355,3,386,7],[356,0,386,7],[356,3]],"functionMap":{"names":["<global>","checkIfConfigIsValid","forEach$argument_0","bisectRoot","initialCalculations","scaleZetaToMatchClamps","filter$argument_0","calculateNewMassToMatchDuration","durationForMass","criticallyDampedSpringCalculations","underDampedSpringCalculations","isAnimationTerminatingCalculation"],"mappings":"AAA;OC0F;YCY;GDK;CDmB;OGG;CH0B;OIE;CJmC;OKO;IC2D,uDD;CLK;OOG;0BCsC;GDS;CPI;OSE;CT0B;OUE;CVoC;OWE;CXqB"}},"type":"js/module"}]}