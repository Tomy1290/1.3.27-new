{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"]}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DEFAULT_ACTION_IDENTIFIER = void 0;\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.removeNotificationSubscription = removeNotificationSubscription;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _NotificationsEmitterModule = _interopRequireDefault(require(_dependencyMap[2], \"./NotificationsEmitterModule\"));\n  var _mapNotificationResponse = require(_dependencyMap[3], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  const emitter = new _expoModulesCore.LegacyEventEmitter(_NotificationsEmitterModule.default);\n  const didReceiveNotificationEventName = 'onDidReceiveNotification';\n  const didDropNotificationsEventName = 'onNotificationsDeleted';\n  const didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  const didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  const DEFAULT_ACTION_IDENTIFIER = exports.DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      const mappedNotification = (0, _mapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      const mappedResponse = (0, _mapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   * @deprecated call `remove()` on the subscription object instead.\n   *\n   * Removes a notification subscription returned by an `addNotificationListener` call.\n   * @param subscription A subscription returned by `addNotificationListener` method.\n   * @header listen\n   */\n  function removeNotificationSubscription(subscription) {\n    console.warn('`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.');\n    if (typeof subscription?.remove === 'function') {\n      subscription.remove();\n    } else {\n      throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n    }\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  async function getLastNotificationResponseAsync() {\n    return getLastNotificationResponse();\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    const response = _NotificationsEmitterModule.default.getLastNotificationResponse();\n    const mappedResponse = response ? (0, _mapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @return A promise that resolves if the native call was successful.\n   */\n  async function clearLastNotificationResponseAsync() {\n    clearLastNotificationResponse();\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function clearLastNotificationResponse() {\n    if (!_NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    _NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":176,"map":[[16,2,1,0],[16,6,1,0,"_expoModulesCore"],[16,22,1,0],[16,25,1,0,"require"],[16,32,1,0],[16,33,1,0,"_dependencyMap"],[16,47,1,0],[17,2,2,0],[17,6,2,0,"_NotificationsEmitterModule"],[17,33,2,0],[17,36,2,0,"_interopRequireDefault"],[17,58,2,0],[17,59,2,0,"require"],[17,66,2,0],[17,67,2,0,"_dependencyMap"],[17,81,2,0],[18,2,3,0],[18,6,3,0,"_mapNotificationResponse"],[18,30,3,0],[18,33,3,0,"require"],[18,40,3,0],[18,41,3,0,"_dependencyMap"],[18,55,3,0],[19,2,4,0],[20,2,5,0],[20,8,5,6,"emitter"],[20,15,5,13],[20,18,5,16],[20,22,5,20,"LegacyEventEmitter"],[20,57,5,38],[20,58,5,39,"NotificationsEmitterModule"],[20,93,5,65],[20,94,5,66],[21,2,6,0],[21,8,6,6,"didReceiveNotificationEventName"],[21,39,6,37],[21,42,6,40],[21,68,6,66],[22,2,7,0],[22,8,7,6,"didDropNotificationsEventName"],[22,37,7,35],[22,40,7,38],[22,64,7,62],[23,2,8,0],[23,8,8,6,"didReceiveNotificationResponseEventName"],[23,47,8,45],[23,50,8,48],[23,84,8,82],[24,2,9,0],[24,8,9,6,"didClearNotificationResponseEventName"],[24,45,9,43],[24,48,9,46],[24,80,9,78],[25,2,10,0],[26,2,11,7],[26,8,11,13,"DEFAULT_ACTION_IDENTIFIER"],[26,33,11,38],[26,36,11,38,"exports"],[26,43,11,38],[26,44,11,38,"DEFAULT_ACTION_IDENTIFIER"],[26,69,11,38],[26,72,11,41],[26,116,11,85],[27,2,12,0],[28,0,13,0],[29,0,14,0],[30,0,15,0],[31,0,16,0],[32,0,17,0],[33,0,18,0],[34,0,19,0],[35,0,20,0],[36,0,21,0],[37,0,22,0],[38,0,23,0],[39,0,24,0],[40,0,25,0],[41,0,26,0],[42,0,27,0],[43,0,28,0],[44,0,29,0],[45,0,30,0],[46,0,31,0],[47,0,32,0],[48,0,33,0],[49,0,34,0],[50,0,35,0],[51,2,36,7],[51,11,36,16,"addNotificationReceivedListener"],[51,42,36,47,"addNotificationReceivedListener"],[51,43,36,48,"listener"],[51,51,36,56],[51,53,36,58],[52,4,37,4],[52,11,37,11,"emitter"],[52,18,37,18],[52,19,37,19,"addListener"],[52,30,37,30],[52,31,37,31,"didReceiveNotificationEventName"],[52,62,37,62],[52,64,37,65,"notification"],[52,76,37,77],[52,80,37,82],[53,6,38,8],[53,12,38,14,"mappedNotification"],[53,30,38,32],[53,33,38,35],[53,37,38,35,"mapNotification"],[53,77,38,50],[53,79,38,51,"notification"],[53,91,38,63],[53,92,38,64],[54,6,39,8,"listener"],[54,14,39,16],[54,15,39,17,"mappedNotification"],[54,33,39,35],[54,34,39,36],[55,4,40,4],[55,5,40,5],[55,6,40,6],[56,2,41,0],[57,2,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,0,48,0],[64,0,49,0],[65,2,50,7],[65,11,50,16,"addNotificationsDroppedListener"],[65,42,50,47,"addNotificationsDroppedListener"],[65,43,50,48,"listener"],[65,51,50,56],[65,53,50,58],[66,4,51,4],[66,11,51,11,"emitter"],[66,18,51,18],[66,19,51,19,"addListener"],[66,30,51,30],[66,31,51,31,"didDropNotificationsEventName"],[66,60,51,60],[66,62,51,62,"listener"],[66,70,51,70],[66,71,51,71],[67,2,52,0],[68,2,53,0],[69,0,54,0],[70,0,55,0],[71,0,56,0],[72,0,57,0],[73,0,58,0],[74,0,59,0],[75,0,60,0],[76,0,61,0],[77,0,62,0],[78,0,63,0],[79,0,64,0],[80,0,65,0],[81,0,66,0],[82,0,67,0],[83,0,68,0],[84,0,69,0],[85,0,70,0],[86,0,71,0],[87,0,72,0],[88,0,73,0],[89,0,74,0],[90,0,75,0],[91,0,76,0],[92,0,77,0],[93,0,78,0],[94,2,79,7],[94,11,79,16,"addNotificationResponseReceivedListener"],[94,50,79,55,"addNotificationResponseReceivedListener"],[94,51,79,56,"listener"],[94,59,79,64],[94,61,79,66],[95,4,80,4],[95,11,80,11,"emitter"],[95,18,80,18],[95,19,80,19,"addListener"],[95,30,80,30],[95,31,80,31,"didReceiveNotificationResponseEventName"],[95,70,80,70],[95,72,80,73,"response"],[95,80,80,81],[95,84,80,86],[96,6,81,8],[96,12,81,14,"mappedResponse"],[96,26,81,28],[96,29,81,31],[96,33,81,31,"mapNotificationResponse"],[96,81,81,54],[96,83,81,55,"response"],[96,91,81,63],[96,92,81,64],[97,6,82,8,"listener"],[97,14,82,16],[97,15,82,17,"mappedResponse"],[97,29,82,31],[97,30,82,32],[98,4,83,4],[98,5,83,5],[98,6,83,6],[99,2,84,0],[100,2,85,0],[101,0,86,0],[102,0,87,0],[103,0,88,0],[104,0,89,0],[105,0,90,0],[106,0,91,0],[107,2,92,7],[107,11,92,16,"removeNotificationSubscription"],[107,41,92,46,"removeNotificationSubscription"],[107,42,92,47,"subscription"],[107,54,92,59],[107,56,92,61],[108,4,93,4,"console"],[108,11,93,11],[108,12,93,12,"warn"],[108,16,93,16],[108,17,93,17],[108,104,93,104],[108,105,93,105],[109,4,94,4],[109,8,94,8],[109,15,94,15,"subscription"],[109,27,94,27],[109,29,94,29,"remove"],[109,35,94,35],[109,40,94,40],[109,50,94,50],[109,52,94,52],[110,6,95,8,"subscription"],[110,18,95,20],[110,19,95,21,"remove"],[110,25,95,27],[110,26,95,28],[110,27,95,29],[111,4,96,4],[111,5,96,5],[111,11,97,9],[112,6,98,8],[112,12,98,14],[112,16,98,18,"Error"],[112,21,98,23],[112,22,98,24],[112,95,98,97,"subscription"],[112,107,98,109],[112,109,98,111],[112,110,98,112],[113,4,99,4],[114,2,100,0],[115,2,101,0],[116,0,102,0],[117,0,103,0],[118,0,104,0],[119,0,105,0],[120,0,106,0],[121,0,107,0],[122,2,108,7],[122,17,108,22,"getLastNotificationResponseAsync"],[122,49,108,54,"getLastNotificationResponseAsync"],[122,50,108,54],[122,52,108,57],[123,4,109,4],[123,11,109,11,"getLastNotificationResponse"],[123,38,109,38],[123,39,109,39],[123,40,109,40],[124,2,110,0],[125,2,111,0],[126,0,112,0],[127,0,113,0],[128,0,114,0],[129,0,115,0],[130,0,116,0],[131,0,117,0],[132,2,118,7],[132,11,118,16,"getLastNotificationResponse"],[132,38,118,43,"getLastNotificationResponse"],[132,39,118,43],[132,41,118,46],[133,4,119,4],[133,8,119,8],[133,9,119,9,"NotificationsEmitterModule"],[133,44,119,35],[133,45,119,36,"getLastNotificationResponse"],[133,72,119,63],[133,74,119,65],[134,6,120,8],[134,12,120,14],[134,16,120,18,"UnavailabilityError"],[134,52,120,37],[134,53,120,38],[134,72,120,57],[134,74,120,59],[134,103,120,88],[134,104,120,89],[135,4,121,4],[136,4,122,4],[136,10,122,10,"response"],[136,18,122,18],[136,21,122,21,"NotificationsEmitterModule"],[136,56,122,47],[136,57,122,48,"getLastNotificationResponse"],[136,84,122,75],[136,85,122,76],[136,86,122,77],[137,4,123,4],[137,10,123,10,"mappedResponse"],[137,24,123,24],[137,27,123,27,"response"],[137,35,123,35],[137,38,123,38],[137,42,123,38,"mapNotificationResponse"],[137,90,123,61],[137,92,123,62,"response"],[137,100,123,70],[137,101,123,71],[137,104,123,74,"response"],[137,112,123,82],[138,4,124,4],[138,11,124,11,"mappedResponse"],[138,25,124,25],[139,2,125,0],[140,2,126,0],[141,0,127,0],[142,0,128,0],[143,0,129,0],[144,0,130,0],[145,0,131,0],[146,0,132,0],[147,0,133,0],[148,0,134,0],[149,0,135,0],[150,2,136,7],[150,17,136,22,"clearLastNotificationResponseAsync"],[150,51,136,56,"clearLastNotificationResponseAsync"],[150,52,136,56],[150,54,136,59],[151,4,137,4,"clearLastNotificationResponse"],[151,33,137,33],[151,34,137,34],[151,35,137,35],[152,2,138,0],[153,2,139,0],[154,0,140,0],[155,0,141,0],[156,0,142,0],[157,0,143,0],[158,0,144,0],[159,0,145,0],[160,0,146,0],[161,0,147,0],[162,2,148,7],[162,11,148,16,"clearLastNotificationResponse"],[162,40,148,45,"clearLastNotificationResponse"],[162,41,148,45],[162,43,148,48],[163,4,149,4],[163,8,149,8],[163,9,149,9,"NotificationsEmitterModule"],[163,44,149,35],[163,45,149,36,"clearLastNotificationResponse"],[163,74,149,65],[163,76,149,67],[164,6,150,8],[164,12,150,14],[164,16,150,18,"UnavailabilityError"],[164,52,150,37],[164,53,150,38],[164,72,150,57],[164,74,150,59],[164,105,150,90],[164,106,150,91],[165,4,151,4],[166,4,152,4,"NotificationsEmitterModule"],[166,39,152,30],[166,40,152,31,"clearLastNotificationResponse"],[166,69,152,60],[166,70,152,61],[166,71,152,62],[167,4,153,4],[168,4,154,4,"emitter"],[168,11,154,11],[168,12,154,12,"emit"],[168,16,154,16],[168,17,154,17,"didClearNotificationResponseEventName"],[168,54,154,54],[168,56,154,56],[168,58,154,58],[168,59,154,59],[169,2,155,0],[170,2,156,0],[171,0,157,0],[172,0,158,0],[173,2,159,7],[173,11,159,16,"addNotificationResponseClearedListener"],[173,49,159,54,"addNotificationResponseClearedListener"],[173,50,159,55,"listener"],[173,58,159,63],[173,60,159,65],[174,4,160,4],[174,11,160,11,"emitter"],[174,18,160,18],[174,19,160,19,"addListener"],[174,30,160,30],[174,31,160,31,"didClearNotificationResponseEventName"],[174,68,160,68],[174,70,160,70,"listener"],[174,78,160,78],[174,79,160,79],[175,2,161,0],[176,0,161,1],[176,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKQ;CLQ;OMQ;CNE;OOQ;CPO;OQW;CRE;OSU;CTO;OUI;CVE"}},"type":"js/module"}]}