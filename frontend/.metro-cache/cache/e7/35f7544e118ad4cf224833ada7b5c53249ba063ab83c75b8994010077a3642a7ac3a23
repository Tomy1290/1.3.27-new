{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./NotificationsEmitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":156,"index":207}}],"key":"Qab5cB8LewiAQY57MV0vxh0VKT8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useLastNotificationResponse;\n  exports.determineNextResponse = void 0;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _NotificationsEmitter = require(_dependencyMap[1], \"./NotificationsEmitter\");\n  /**\n   * A React hook which returns the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n   *\n   * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n   *\n   * @return The hook may return one of these three types/values:\n   * - `undefined` - until we're sure of what to return,\n   * - `null` - if no notification response has been received yet,\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n   *\n   * @example\n   * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n   * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n   * ```jsx\n   * import * as Notifications from 'expo-notifications';\n   * import { Linking } from 'react-native';\n   *\n   * export default function App() {\n   *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n   *   React.useEffect(() => {\n   *     if (\n   *       lastNotificationResponse &&\n   *       lastNotificationResponse.notification.request.content.data.url &&\n   *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n   *     ) {\n   *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n   *     }\n   *   }, [lastNotificationResponse]);\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function useLastNotificationResponse() {\n    const [lastNotificationResponse, setLastNotificationResponse] = (0, _react.useState)(undefined);\n    // useLayoutEffect ensures the listener is registered as soon as possible\n    (0, _react.useLayoutEffect)(() => {\n      let isMounted = true;\n      // Get the last response first, in case it was set earlier (even in native code on startup)\n      (0, _NotificationsEmitter.getLastNotificationResponseAsync)().then(response => {\n        if (isMounted) {\n          setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response));\n        }\n      });\n      // Set up listener for responses that come in, and set the last response if needed\n      const subscription = (0, _NotificationsEmitter.addNotificationResponseReceivedListener)(response => setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response)));\n      const clearResponseSubscription = (0, _NotificationsEmitter.addNotificationResponseClearedListener)(() => {\n        setLastNotificationResponse(null);\n      });\n      return () => {\n        isMounted = false;\n        subscription.remove();\n        clearResponseSubscription.remove();\n      };\n    }, []);\n    return lastNotificationResponse;\n  }\n  // returns the new response if it is different from the previous,\n  // also has to return undefined until we're sure of what to return (null or a response)\n  // the transition from response to null is invalid\n  const determineNextResponse = (prevResponse, newResponse) => {\n    if (!newResponse) {\n      return null;\n    }\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n  };\n  exports.determineNextResponse = determineNextResponse;\n});","lineCount":84,"map":[[7,2,1,0],[7,6,1,0,"_react"],[7,12,1,0],[7,15,1,0,"require"],[7,22,1,0],[7,23,1,0,"_dependencyMap"],[7,37,1,0],[8,2,2,0],[8,6,2,0,"_NotificationsEmitter"],[8,27,2,0],[8,30,2,0,"require"],[8,37,2,0],[8,38,2,0,"_dependencyMap"],[8,52,2,0],[9,2,3,0],[10,0,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,0,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,2,41,15],[47,11,41,24,"useLastNotificationResponse"],[47,38,41,51,"useLastNotificationResponse"],[47,39,41,51],[47,41,41,54],[48,4,42,4],[48,10,42,10],[48,11,42,11,"lastNotificationResponse"],[48,35,42,35],[48,37,42,37,"setLastNotificationResponse"],[48,64,42,64],[48,65,42,65],[48,68,42,68],[48,72,42,68,"useState"],[48,87,42,76],[48,89,42,77,"undefined"],[48,98,42,86],[48,99,42,87],[49,4,43,4],[50,4,44,4],[50,8,44,4,"useLayoutEffect"],[50,30,44,19],[50,32,44,20],[50,38,44,26],[51,6,45,8],[51,10,45,12,"isMounted"],[51,19,45,21],[51,22,45,24],[51,26,45,28],[52,6,46,8],[53,6,47,8],[53,10,47,8,"getLastNotificationResponseAsync"],[53,64,47,40],[53,66,47,41],[53,67,47,42],[53,68,47,43,"then"],[53,72,47,47],[53,73,47,49,"response"],[53,81,47,57],[53,85,47,62],[54,8,48,12],[54,12,48,16,"isMounted"],[54,21,48,25],[54,23,48,27],[55,10,49,16,"setLastNotificationResponse"],[55,37,49,43],[55,38,49,45,"prevResponse"],[55,50,49,57],[55,54,49,62,"determineNextResponse"],[55,75,49,83],[55,76,49,84,"prevResponse"],[55,88,49,96],[55,90,49,98,"response"],[55,98,49,106],[55,99,49,107],[55,100,49,108],[56,8,50,12],[57,6,51,8],[57,7,51,9],[57,8,51,10],[58,6,52,8],[59,6,53,8],[59,12,53,14,"subscription"],[59,24,53,26],[59,27,53,29],[59,31,53,29,"addNotificationResponseReceivedListener"],[59,92,53,68],[59,94,53,70,"response"],[59,102,53,78],[59,106,53,83,"setLastNotificationResponse"],[59,133,53,110],[59,134,53,112,"prevResponse"],[59,146,53,124],[59,150,53,129,"determineNextResponse"],[59,171,53,150],[59,172,53,151,"prevResponse"],[59,184,53,163],[59,186,53,165,"response"],[59,194,53,173],[59,195,53,174],[59,196,53,175],[59,197,53,176],[60,6,54,8],[60,12,54,14,"clearResponseSubscription"],[60,37,54,39],[60,40,54,42],[60,44,54,42,"addNotificationResponseClearedListener"],[60,104,54,80],[60,106,54,81],[60,112,54,87],[61,8,55,12,"setLastNotificationResponse"],[61,35,55,39],[61,36,55,40],[61,40,55,44],[61,41,55,45],[62,6,56,8],[62,7,56,9],[62,8,56,10],[63,6,57,8],[63,13,57,15],[63,19,57,21],[64,8,58,12,"isMounted"],[64,17,58,21],[64,20,58,24],[64,25,58,29],[65,8,59,12,"subscription"],[65,20,59,24],[65,21,59,25,"remove"],[65,27,59,31],[65,28,59,32],[65,29,59,33],[66,8,60,12,"clearResponseSubscription"],[66,33,60,37],[66,34,60,38,"remove"],[66,40,60,44],[66,41,60,45],[66,42,60,46],[67,6,61,8],[67,7,61,9],[68,4,62,4],[68,5,62,5],[68,7,62,7],[68,9,62,9],[68,10,62,10],[69,4,63,4],[69,11,63,11,"lastNotificationResponse"],[69,35,63,35],[70,2,64,0],[71,2,65,0],[72,2,66,0],[73,2,67,0],[74,2,68,7],[74,8,68,13,"determineNextResponse"],[74,29,68,34],[74,32,68,37,"determineNextResponse"],[74,33,68,38,"prevResponse"],[74,45,68,50],[74,47,68,52,"newResponse"],[74,58,68,63],[74,63,68,68],[75,4,69,4],[75,8,69,8],[75,9,69,9,"newResponse"],[75,20,69,20],[75,22,69,22],[76,6,70,8],[76,13,70,15],[76,17,70,19],[77,4,71,4],[78,4,72,4],[78,8,72,8],[78,9,72,9,"prevResponse"],[78,21,72,21],[78,23,72,23],[79,6,73,8],[79,13,73,15,"newResponse"],[79,24,73,26],[80,4,74,4],[81,4,75,4],[81,11,75,11,"prevResponse"],[81,23,75,23],[81,24,75,24,"notification"],[81,36,75,36],[81,37,75,37,"request"],[81,44,75,44],[81,45,75,45,"identifier"],[81,55,75,55],[81,60,76,8,"newResponse"],[81,71,76,19],[81,72,76,20,"notification"],[81,84,76,32],[81,85,76,33,"request"],[81,92,76,40],[81,93,76,41,"identifier"],[81,103,76,51],[81,106,77,10,"newResponse"],[81,117,77,21],[81,120,78,10,"prevResponse"],[81,132,78,22],[82,2,79,0],[82,3,79,1],[83,2,79,2,"exports"],[83,9,79,2],[83,10,79,2,"determineNextResponse"],[83,31,79,2],[83,34,79,2,"determineNextResponse"],[83,55,79,2],[84,0,79,2],[84,3]],"functionMap":{"names":["<global>","useLastNotificationResponse","useLayoutEffect$argument_0","getLastNotificationResponseAsync.then$argument_0","setLastNotificationResponse$argument_0","addNotificationResponseReceivedListener$argument_0","addNotificationResponseClearedListener$argument_0","<anonymous>","determineNextResponse"],"mappings":"AAA;eCwC;oBCG;gDCG;4CCE,+DD;SDE;qEGE,0CD,+DC,CH;iFIC;SJE;eKC;SLI;KDC;CDE;qCQI;CRW"}},"type":"js/module"}]}