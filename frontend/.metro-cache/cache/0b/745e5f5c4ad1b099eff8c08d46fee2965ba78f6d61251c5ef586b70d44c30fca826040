{"dependencies":[{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Bezier = undefined;\n  var _errors = require(_dependencyMap[0]);\n  /**\n   * https://github.com/gre/bezier-easing BezierEasing - use bezier curve for\n   * transition easing function by Gaëtan Renaudeau 2014 - 2015 – MIT License\n   */\n\n  // These values are established by empiricism with tests (tradeoff: performance VS precision)\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 0.1;\n  var _worklet_4367271601962_init_data = {\n    code: \"function A_reactNativeReanimated_BezierTs1(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\"\n  };\n  var A = function () {\n    var A = function (aA1, aA2) {\n      return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n    };\n    A.__closure = {};\n    A.__workletHash = 4367271601962;\n    A.__initData = _worklet_4367271601962_init_data;\n    return A;\n  }();\n  var _worklet_9454990785451_init_data = {\n    code: \"function B_reactNativeReanimated_BezierTs2(aA1,aA2){return 3.0*aA2-6.0*aA1;}\"\n  };\n  var B = function () {\n    var B = function (aA1, aA2) {\n      return 3.0 * aA2 - 6.0 * aA1;\n    };\n    B.__closure = {};\n    B.__workletHash = 9454990785451;\n    B.__initData = _worklet_9454990785451_init_data;\n    return B;\n  }();\n  var _worklet_16782186749480_init_data = {\n    code: \"function C_reactNativeReanimated_BezierTs3(aA1){return 3.0*aA1;}\"\n  };\n  var C = function () {\n    var C = function (aA1) {\n      return 3.0 * aA1;\n    };\n    C.__closure = {};\n    C.__workletHash = 16782186749480;\n    C.__initData = _worklet_16782186749480_init_data;\n    return C;\n  }(); // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  var _worklet_10875691901728_init_data = {\n    code: \"function calcBezier_reactNativeReanimated_BezierTs4(aT,aA1,aA2){const{A,B,C}=this.__closure;return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\"\n  };\n  var calcBezier = function () {\n    var calcBezier = function (aT, aA1, aA2) {\n      return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n    };\n    calcBezier.__closure = {\n      A,\n      B,\n      C\n    };\n    calcBezier.__workletHash = 10875691901728;\n    calcBezier.__initData = _worklet_10875691901728_init_data;\n    return calcBezier;\n  }(); // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  var _worklet_268514889981_init_data = {\n    code: \"function getSlope_reactNativeReanimated_BezierTs5(aT,aA1,aA2){const{A,B,C}=this.__closure;return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\"\n  };\n  var getSlope = function () {\n    var getSlope = function (aT, aA1, aA2) {\n      return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n    };\n    getSlope.__closure = {\n      A,\n      B,\n      C\n    };\n    getSlope.__workletHash = 268514889981;\n    getSlope.__initData = _worklet_268514889981_init_data;\n    return getSlope;\n  }();\n  var _worklet_521490805193_init_data = {\n    code: \"function binarySubdivide_reactNativeReanimated_BezierTs6(aX,aA,aB,mX1,mX2){const{calcBezier,SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS}=this.__closure;let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}\"\n  };\n  var binarySubdivide = function () {\n    var binarySubdivide = function (aX, aA, aB, mX1, mX2) {\n      var currentX;\n      var currentT;\n      var i = 0;\n      do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n          aB = currentT;\n        } else {\n          aA = currentT;\n        }\n      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n      return currentT;\n    };\n    binarySubdivide.__closure = {\n      calcBezier,\n      SUBDIVISION_PRECISION,\n      SUBDIVISION_MAX_ITERATIONS\n    };\n    binarySubdivide.__workletHash = 521490805193;\n    binarySubdivide.__initData = _worklet_521490805193_init_data;\n    return binarySubdivide;\n  }();\n  var _worklet_2303289060743_init_data = {\n    code: \"function newtonRaphsonIterate_reactNativeReanimated_BezierTs7(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=this.__closure;for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}\"\n  };\n  var newtonRaphsonIterate = function () {\n    var newtonRaphsonIterate = function (aX, aGuessT, mX1, mX2) {\n      for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n        var currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n          return aGuessT;\n        }\n        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n      }\n      return aGuessT;\n    };\n    newtonRaphsonIterate.__closure = {\n      NEWTON_ITERATIONS,\n      getSlope,\n      calcBezier\n    };\n    newtonRaphsonIterate.__workletHash = 2303289060743;\n    newtonRaphsonIterate.__initData = _worklet_2303289060743_init_data;\n    return newtonRaphsonIterate;\n  }();\n  var _worklet_4651979895956_init_data = {\n    code: \"function Bezier_reactNativeReanimated_BezierTs8(mX1,mY1,mX2,mY2){const{kSplineTableSize,calcBezier,kSampleStepSize,getSlope,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new ReanimatedError('Bezier x values must be in [0, 1] range.');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function Bezier_reactNativeReanimated_BezierTs8(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\"\n  };\n  var _worklet_9002002139084_init_data = {\n    code: \"function LinearEasing_reactNativeReanimated_BezierTs9(x){return x;}\"\n  };\n  var _worklet_582111972461_init_data = {\n    code: \"function getTForX_reactNativeReanimated_BezierTs10(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this.__closure;let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}\"\n  };\n  var _worklet_5253683607097_init_data = {\n    code: \"function BezierEasing_reactNativeReanimated_BezierTs11(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=this.__closure;if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}\"\n  };\n  var Bezier = exports.Bezier = function () {\n    var Bezier = function (mX1, mY1, mX2, mY2) {\n      var LinearEasing = function () {\n        var LinearEasing = function (x) {\n          return x;\n        };\n        LinearEasing.__closure = {};\n        LinearEasing.__workletHash = 9002002139084;\n        LinearEasing.__initData = _worklet_9002002139084_init_data;\n        return LinearEasing;\n      }();\n      if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new _errors.ReanimatedError('Bezier x values must be in [0, 1] range.');\n      }\n      if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n      }\n      var sampleValues = new Array(kSplineTableSize);\n\n      // Precompute samples table\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n      var getTForX = function () {\n        var getTForX = function (aX) {\n          var intervalStart = 0.0;\n          var currentSample = 1;\n          var lastSample = 10;\n          for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n          }\n          --currentSample;\n\n          // Interpolate to provide an initial guess for t\n          var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n          var guessForT = intervalStart + dist * kSampleStepSize;\n          var initialSlope = getSlope(guessForT, mX1, mX2);\n          if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n          } else if (initialSlope === 0.0) {\n            return guessForT;\n          } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n          }\n        };\n        getTForX.__closure = {\n          kSplineTableSize,\n          sampleValues,\n          kSampleStepSize,\n          getSlope,\n          mX1,\n          mX2,\n          NEWTON_MIN_SLOPE,\n          newtonRaphsonIterate,\n          binarySubdivide\n        };\n        getTForX.__workletHash = 582111972461;\n        getTForX.__initData = _worklet_582111972461_init_data;\n        return getTForX;\n      }();\n      return function () {\n        var BezierEasing = function (x) {\n          if (mX1 === mY1 && mX2 === mY2) {\n            return x; // linear\n          }\n          // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n          if (x === 0) {\n            return 0;\n          }\n          if (x === 1) {\n            return 1;\n          }\n          return calcBezier(getTForX(x), mY1, mY2);\n        };\n        BezierEasing.__closure = {\n          mX1,\n          mY1,\n          mX2,\n          mY2,\n          calcBezier,\n          getTForX\n        };\n        BezierEasing.__workletHash = 5253683607097;\n        BezierEasing.__initData = _worklet_5253683607097_init_data;\n        return BezierEasing;\n      }();\n    };\n    Bezier.__closure = {\n      kSplineTableSize,\n      calcBezier,\n      kSampleStepSize,\n      getSlope,\n      NEWTON_MIN_SLOPE,\n      newtonRaphsonIterate,\n      binarySubdivide\n    };\n    Bezier.__workletHash = 4651979895956;\n    Bezier.__initData = _worklet_4651979895956_init_data;\n    return Bezier;\n  }();\n});","lineCount":254,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"Bezier"],[7,16,1,13],[7,19,1,13,"undefined"],[7,28,1,13],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[14,2,10,0],[16,2,12,0],[16,6,12,6,"NEWTON_ITERATIONS"],[16,23,12,23],[16,26,12,26],[16,27,12,27],[17,2,13,0],[17,6,13,6,"NEWTON_MIN_SLOPE"],[17,22,13,22],[17,25,13,25],[17,30,13,30],[18,2,14,0],[18,6,14,6,"SUBDIVISION_PRECISION"],[18,27,14,27],[18,30,14,30],[18,39,14,39],[19,2,15,0],[19,6,15,6,"SUBDIVISION_MAX_ITERATIONS"],[19,32,15,32],[19,35,15,35],[19,37,15,37],[20,2,17,0],[20,6,17,6,"kSplineTableSize"],[20,22,17,22],[20,25,17,25],[20,27,17,27],[21,2,18,0],[21,6,18,6,"kSampleStepSize"],[21,21,18,21],[21,27,18,54],[22,2,18,55],[22,6,18,55,"_worklet_4367271601962_init_data"],[22,38,18,55],[23,4,18,55,"code"],[23,8,18,55],[24,2,18,55],[25,2,18,55],[25,6,18,55,"A"],[25,7,18,55],[25,10,20,0],[26,4,20,0],[26,8,20,0,"A"],[26,9,20,0],[26,21,20,0,"A"],[26,22,20,11,"aA1"],[26,25,20,22],[26,27,20,24,"aA2"],[26,30,20,35],[26,32,20,45],[27,6,22,2],[27,13,22,9],[27,16,22,12],[27,19,22,15],[27,22,22,18],[27,25,22,21,"aA2"],[27,28,22,24],[27,31,22,27],[27,34,22,30],[27,37,22,33,"aA1"],[27,40,22,36],[28,4,23,0],[28,5,23,1],[29,4,23,1,"A"],[29,5,23,1],[29,6,23,1,"__closure"],[29,15,23,1],[30,4,23,1,"A"],[30,5,23,1],[30,6,23,1,"__workletHash"],[30,19,23,1],[31,4,23,1,"A"],[31,5,23,1],[31,6,23,1,"__initData"],[31,16,23,1],[31,19,23,1,"_worklet_4367271601962_init_data"],[31,51,23,1],[32,4,23,1],[32,11,23,1,"A"],[32,12,23,1],[33,2,23,1],[33,3,20,0],[34,2,20,0],[34,6,20,0,"_worklet_9454990785451_init_data"],[34,38,20,0],[35,4,20,0,"code"],[35,8,20,0],[36,2,20,0],[37,2,20,0],[37,6,20,0,"B"],[37,7,20,0],[37,10,24,0],[38,4,24,0],[38,8,24,0,"B"],[38,9,24,0],[38,21,24,0,"B"],[38,22,24,11,"aA1"],[38,25,24,22],[38,27,24,24,"aA2"],[38,30,24,35],[38,32,24,45],[39,6,26,2],[39,13,26,9],[39,16,26,12],[39,19,26,15,"aA2"],[39,22,26,18],[39,25,26,21],[39,28,26,24],[39,31,26,27,"aA1"],[39,34,26,30],[40,4,27,0],[40,5,27,1],[41,4,27,1,"B"],[41,5,27,1],[41,6,27,1,"__closure"],[41,15,27,1],[42,4,27,1,"B"],[42,5,27,1],[42,6,27,1,"__workletHash"],[42,19,27,1],[43,4,27,1,"B"],[43,5,27,1],[43,6,27,1,"__initData"],[43,16,27,1],[43,19,27,1,"_worklet_9454990785451_init_data"],[43,51,27,1],[44,4,27,1],[44,11,27,1,"B"],[44,12,27,1],[45,2,27,1],[45,3,24,0],[46,2,24,0],[46,6,24,0,"_worklet_16782186749480_init_data"],[46,39,24,0],[47,4,24,0,"code"],[47,8,24,0],[48,2,24,0],[49,2,24,0],[49,6,24,0,"C"],[49,7,24,0],[49,10,28,0],[50,4,28,0],[50,8,28,0,"C"],[50,9,28,0],[50,21,28,0,"C"],[50,22,28,11,"aA1"],[50,25,28,22],[50,27,28,24],[51,6,30,2],[51,13,30,9],[51,16,30,12],[51,19,30,15,"aA1"],[51,22,30,18],[52,4,31,0],[52,5,31,1],[53,4,31,1,"C"],[53,5,31,1],[53,6,31,1,"__closure"],[53,15,31,1],[54,4,31,1,"C"],[54,5,31,1],[54,6,31,1,"__workletHash"],[54,19,31,1],[55,4,31,1,"C"],[55,5,31,1],[55,6,31,1,"__initData"],[55,16,31,1],[55,19,31,1,"_worklet_16782186749480_init_data"],[55,52,31,1],[56,4,31,1],[56,11,31,1,"C"],[56,12,31,1],[57,2,31,1],[57,3,28,0],[57,7,33,0],[58,2,33,0],[58,6,33,0,"_worklet_10875691901728_init_data"],[58,39,33,0],[59,4,33,0,"code"],[59,8,33,0],[60,2,33,0],[61,2,33,0],[61,6,33,0,"calcBezier"],[61,16,33,0],[61,19,34,0],[62,4,34,0],[62,8,34,0,"calcBezier"],[62,18,34,0],[62,30,34,0,"calcBezier"],[62,31,34,20,"aT"],[62,33,34,30],[62,35,34,32,"aA1"],[62,38,34,43],[62,40,34,45,"aA2"],[62,43,34,56],[62,45,34,66],[63,6,36,2],[63,13,36,9],[63,14,36,10],[63,15,36,11,"A"],[63,16,36,12],[63,17,36,13,"aA1"],[63,20,36,16],[63,22,36,18,"aA2"],[63,25,36,21],[63,26,36,22],[63,29,36,25,"aT"],[63,31,36,27],[63,34,36,30,"B"],[63,35,36,31],[63,36,36,32,"aA1"],[63,39,36,35],[63,41,36,37,"aA2"],[63,44,36,40],[63,45,36,41],[63,49,36,45,"aT"],[63,51,36,47],[63,54,36,50,"C"],[63,55,36,51],[63,56,36,52,"aA1"],[63,59,36,55],[63,60,36,56],[63,64,36,60,"aT"],[63,66,36,62],[64,4,37,0],[64,5,37,1],[65,4,37,1,"calcBezier"],[65,14,37,1],[65,15,37,1,"__closure"],[65,24,37,1],[66,6,37,1,"A"],[66,7,37,1],[67,6,37,1,"B"],[67,7,37,1],[68,6,37,1,"C"],[69,4,37,1],[70,4,37,1,"calcBezier"],[70,14,37,1],[70,15,37,1,"__workletHash"],[70,28,37,1],[71,4,37,1,"calcBezier"],[71,14,37,1],[71,15,37,1,"__initData"],[71,25,37,1],[71,28,37,1,"_worklet_10875691901728_init_data"],[71,61,37,1],[72,4,37,1],[72,11,37,1,"calcBezier"],[72,21,37,1],[73,2,37,1],[73,3,34,0],[73,7,39,0],[74,2,39,0],[74,6,39,0,"_worklet_268514889981_init_data"],[74,37,39,0],[75,4,39,0,"code"],[75,8,39,0],[76,2,39,0],[77,2,39,0],[77,6,39,0,"getSlope"],[77,14,39,0],[77,17,40,0],[78,4,40,0],[78,8,40,0,"getSlope"],[78,16,40,0],[78,28,40,0,"getSlope"],[78,29,40,18,"aT"],[78,31,40,28],[78,33,40,30,"aA1"],[78,36,40,41],[78,38,40,43,"aA2"],[78,41,40,54],[78,43,40,64],[79,6,42,2],[79,13,42,9],[79,16,42,12],[79,19,42,15,"A"],[79,20,42,16],[79,21,42,17,"aA1"],[79,24,42,20],[79,26,42,22,"aA2"],[79,29,42,25],[79,30,42,26],[79,33,42,29,"aT"],[79,35,42,31],[79,38,42,34,"aT"],[79,40,42,36],[79,43,42,39],[79,46,42,42],[79,49,42,45,"B"],[79,50,42,46],[79,51,42,47,"aA1"],[79,54,42,50],[79,56,42,52,"aA2"],[79,59,42,55],[79,60,42,56],[79,63,42,59,"aT"],[79,65,42,61],[79,68,42,64,"C"],[79,69,42,65],[79,70,42,66,"aA1"],[79,73,42,69],[79,74,42,70],[80,4,43,0],[80,5,43,1],[81,4,43,1,"getSlope"],[81,12,43,1],[81,13,43,1,"__closure"],[81,22,43,1],[82,6,43,1,"A"],[82,7,43,1],[83,6,43,1,"B"],[83,7,43,1],[84,6,43,1,"C"],[85,4,43,1],[86,4,43,1,"getSlope"],[86,12,43,1],[86,13,43,1,"__workletHash"],[86,26,43,1],[87,4,43,1,"getSlope"],[87,12,43,1],[87,13,43,1,"__initData"],[87,23,43,1],[87,26,43,1,"_worklet_268514889981_init_data"],[87,57,43,1],[88,4,43,1],[88,11,43,1,"getSlope"],[88,19,43,1],[89,2,43,1],[89,3,40,0],[90,2,40,0],[90,6,40,0,"_worklet_521490805193_init_data"],[90,37,40,0],[91,4,40,0,"code"],[91,8,40,0],[92,2,40,0],[93,2,40,0],[93,6,40,0,"binarySubdivide"],[93,21,40,0],[93,24,45,0],[94,4,45,0],[94,8,45,0,"binarySubdivide"],[94,23,45,0],[94,35,45,0,"binarySubdivide"],[94,36,46,2,"aX"],[94,38,46,12],[94,40,47,2,"aA"],[94,42,47,12],[94,44,48,2,"aB"],[94,46,48,12],[94,48,49,2,"mX1"],[94,51,49,13],[94,53,50,2,"mX2"],[94,56,50,13],[94,58,51,10],[95,6,53,2],[95,10,53,6,"currentX"],[95,18,53,14],[96,6,54,2],[96,10,54,6,"currentT"],[96,18,54,14],[97,6,55,2],[97,10,55,6,"i"],[97,11,55,7],[97,14,55,10],[97,15,55,11],[98,6,56,2],[98,9,56,5],[99,8,57,4,"currentT"],[99,16,57,12],[99,19,57,15,"aA"],[99,21,57,17],[99,24,57,20],[99,25,57,21,"aB"],[99,27,57,23],[99,30,57,26,"aA"],[99,32,57,28],[99,36,57,32],[99,39,57,35],[100,8,58,4,"currentX"],[100,16,58,12],[100,19,58,15,"calcBezier"],[100,29,58,25],[100,30,58,26,"currentT"],[100,38,58,34],[100,40,58,36,"mX1"],[100,43,58,39],[100,45,58,41,"mX2"],[100,48,58,44],[100,49,58,45],[100,52,58,48,"aX"],[100,54,58,50],[101,8,59,4],[101,12,59,8,"currentX"],[101,20,59,16],[101,23,59,19],[101,26,59,22],[101,28,59,24],[102,10,60,6,"aB"],[102,12,60,8],[102,15,60,11,"currentT"],[102,23,60,19],[103,8,61,4],[103,9,61,5],[103,15,61,11],[104,10,62,6,"aA"],[104,12,62,8],[104,15,62,11,"currentT"],[104,23,62,19],[105,8,63,4],[106,6,64,2],[106,7,64,3],[106,15,65,4,"Math"],[106,19,65,8],[106,20,65,9,"abs"],[106,23,65,12],[106,24,65,13,"currentX"],[106,32,65,21],[106,33,65,22],[106,36,65,25,"SUBDIVISION_PRECISION"],[106,57,65,46],[106,61,66,4],[106,63,66,6,"i"],[106,64,66,7],[106,67,66,10,"SUBDIVISION_MAX_ITERATIONS"],[106,93,66,36],[107,6,68,2],[107,13,68,9,"currentT"],[107,21,68,17],[108,4,69,0],[108,5,69,1],[109,4,69,1,"binarySubdivide"],[109,19,69,1],[109,20,69,1,"__closure"],[109,29,69,1],[110,6,69,1,"calcBezier"],[110,16,69,1],[111,6,69,1,"SUBDIVISION_PRECISION"],[111,27,69,1],[112,6,69,1,"SUBDIVISION_MAX_ITERATIONS"],[113,4,69,1],[114,4,69,1,"binarySubdivide"],[114,19,69,1],[114,20,69,1,"__workletHash"],[114,33,69,1],[115,4,69,1,"binarySubdivide"],[115,19,69,1],[115,20,69,1,"__initData"],[115,30,69,1],[115,33,69,1,"_worklet_521490805193_init_data"],[115,64,69,1],[116,4,69,1],[116,11,69,1,"binarySubdivide"],[116,26,69,1],[117,2,69,1],[117,3,45,0],[118,2,45,0],[118,6,45,0,"_worklet_2303289060743_init_data"],[118,38,45,0],[119,4,45,0,"code"],[119,8,45,0],[120,2,45,0],[121,2,45,0],[121,6,45,0,"newtonRaphsonIterate"],[121,26,45,0],[121,29,71,0],[122,4,71,0],[122,8,71,0,"newtonRaphsonIterate"],[122,28,71,0],[122,40,71,0,"newtonRaphsonIterate"],[122,41,72,2,"aX"],[122,43,72,12],[122,45,73,2,"aGuessT"],[122,52,73,17],[122,54,74,2,"mX1"],[122,57,74,13],[122,59,75,2,"mX2"],[122,62,75,13],[122,64,76,10],[123,6,78,2],[123,11,78,7],[123,15,78,11,"i"],[123,16,78,12],[123,19,78,15],[123,20,78,16],[123,22,78,18,"i"],[123,23,78,19],[123,26,78,22,"NEWTON_ITERATIONS"],[123,43,78,39],[123,45,78,41],[123,47,78,43,"i"],[123,48,78,44],[123,50,78,46],[124,8,79,4],[124,12,79,10,"currentSlope"],[124,24,79,22],[124,27,79,25,"getSlope"],[124,35,79,33],[124,36,79,34,"aGuessT"],[124,43,79,41],[124,45,79,43,"mX1"],[124,48,79,46],[124,50,79,48,"mX2"],[124,53,79,51],[124,54,79,52],[125,8,80,4],[125,12,80,8,"currentSlope"],[125,24,80,20],[125,29,80,25],[125,32,80,28],[125,34,80,30],[126,10,81,6],[126,17,81,13,"aGuessT"],[126,24,81,20],[127,8,82,4],[128,8,83,4],[128,12,83,10,"currentX"],[128,20,83,18],[128,23,83,21,"calcBezier"],[128,33,83,31],[128,34,83,32,"aGuessT"],[128,41,83,39],[128,43,83,41,"mX1"],[128,46,83,44],[128,48,83,46,"mX2"],[128,51,83,49],[128,52,83,50],[128,55,83,53,"aX"],[128,57,83,55],[129,8,84,4,"aGuessT"],[129,15,84,11],[129,19,84,15,"currentX"],[129,27,84,23],[129,30,84,26,"currentSlope"],[129,42,84,38],[130,6,85,2],[131,6,86,2],[131,13,86,9,"aGuessT"],[131,20,86,16],[132,4,87,0],[132,5,87,1],[133,4,87,1,"newtonRaphsonIterate"],[133,24,87,1],[133,25,87,1,"__closure"],[133,34,87,1],[134,6,87,1,"NEWTON_ITERATIONS"],[134,23,87,1],[135,6,87,1,"getSlope"],[135,14,87,1],[136,6,87,1,"calcBezier"],[137,4,87,1],[138,4,87,1,"newtonRaphsonIterate"],[138,24,87,1],[138,25,87,1,"__workletHash"],[138,38,87,1],[139,4,87,1,"newtonRaphsonIterate"],[139,24,87,1],[139,25,87,1,"__initData"],[139,35,87,1],[139,38,87,1,"_worklet_2303289060743_init_data"],[139,70,87,1],[140,4,87,1],[140,11,87,1,"newtonRaphsonIterate"],[140,31,87,1],[141,2,87,1],[141,3,71,0],[142,2,71,0],[142,6,71,0,"_worklet_4651979895956_init_data"],[142,38,71,0],[143,4,71,0,"code"],[143,8,71,0],[144,2,71,0],[145,2,71,0],[145,6,71,0,"_worklet_9002002139084_init_data"],[145,38,71,0],[146,4,71,0,"code"],[146,8,71,0],[147,2,71,0],[148,2,71,0],[148,6,71,0,"_worklet_582111972461_init_data"],[148,37,71,0],[149,4,71,0,"code"],[149,8,71,0],[150,2,71,0],[151,2,71,0],[151,6,71,0,"_worklet_5253683607097_init_data"],[151,38,71,0],[152,4,71,0,"code"],[152,8,71,0],[153,2,71,0],[154,2,71,0],[154,6,71,0,"Bezier"],[154,12,71,0],[154,15,71,0,"exports"],[154,22,71,0],[154,23,71,0,"Bezier"],[154,29,71,0],[154,32,89,7],[155,4,89,7],[155,8,89,7,"Bezier"],[155,14,89,7],[155,26,89,7,"Bezier"],[155,27,90,2,"mX1"],[155,30,90,13],[155,32,91,2,"mY1"],[155,35,91,13],[155,37,92,2,"mX2"],[155,40,92,13],[155,42,93,2,"mY2"],[155,45,93,13],[155,47,94,25],[156,6,94,25],[156,10,94,25,"LinearEasing"],[156,22,94,25],[156,25,97,2],[157,8,97,2],[157,12,97,2,"LinearEasing"],[157,24,97,2],[157,36,97,2,"LinearEasing"],[157,37,97,24,"x"],[157,38,97,33],[157,40,97,43],[158,10,99,4],[158,17,99,11,"x"],[158,18,99,12],[159,8,100,2],[159,9,100,3],[160,8,100,3,"LinearEasing"],[160,20,100,3],[160,21,100,3,"__closure"],[160,30,100,3],[161,8,100,3,"LinearEasing"],[161,20,100,3],[161,21,100,3,"__workletHash"],[161,34,100,3],[162,8,100,3,"LinearEasing"],[162,20,100,3],[162,21,100,3,"__initData"],[162,31,100,3],[162,34,100,3,"_worklet_9002002139084_init_data"],[162,66,100,3],[163,8,100,3],[163,15,100,3,"LinearEasing"],[163,27,100,3],[164,6,100,3],[164,7,97,2],[165,6,102,2],[165,10,102,6],[165,12,102,8,"mX1"],[165,15,102,11],[165,19,102,15],[165,20,102,16],[165,24,102,20,"mX1"],[165,27,102,23],[165,31,102,27],[165,32,102,28],[165,36,102,32,"mX2"],[165,39,102,35],[165,43,102,39],[165,44,102,40],[165,48,102,44,"mX2"],[165,51,102,47],[165,55,102,51],[165,56,102,52],[165,57,102,53],[165,59,102,55],[166,8,103,4],[166,14,103,10],[166,18,103,14,"ReanimatedError"],[166,41,103,29],[166,42,103,30],[166,84,103,72],[166,85,103,73],[167,6,104,2],[168,6,106,2],[168,10,106,6,"mX1"],[168,13,106,9],[168,18,106,14,"mY1"],[168,21,106,17],[168,25,106,21,"mX2"],[168,28,106,24],[168,33,106,29,"mY2"],[168,36,106,32],[168,38,106,34],[169,8,107,4],[169,15,107,11,"LinearEasing"],[169,27,107,23],[170,6,108,2],[171,6,110,2],[171,10,110,8,"sampleValues"],[171,22,110,20],[171,25,110,23],[171,29,110,27,"Array"],[171,34,110,32],[171,35,110,33,"kSplineTableSize"],[171,51,110,49],[171,52,110,50],[173,6,112,2],[174,6,113,2],[174,11,113,7],[174,15,113,11,"i"],[174,16,113,12],[174,19,113,15],[174,20,113,16],[174,22,113,18,"i"],[174,23,113,19],[174,26,113,22,"kSplineTableSize"],[174,42,113,38],[174,44,113,40],[174,46,113,42,"i"],[174,47,113,43],[174,49,113,45],[175,8,114,4,"sampleValues"],[175,20,114,16],[175,21,114,17,"i"],[175,22,114,18],[175,23,114,19],[175,26,114,22,"calcBezier"],[175,36,114,32],[175,37,114,33,"i"],[175,38,114,34],[175,41,114,37,"kSampleStepSize"],[175,56,114,52],[175,58,114,54,"mX1"],[175,61,114,57],[175,63,114,59,"mX2"],[175,66,114,62],[175,67,114,63],[176,6,115,2],[177,6,115,3],[177,10,115,3,"getTForX"],[177,18,115,3],[177,21,117,2],[178,8,117,2],[178,12,117,2,"getTForX"],[178,20,117,2],[178,32,117,2,"getTForX"],[178,33,117,20,"aX"],[178,35,117,30],[178,37,117,40],[179,10,119,4],[179,14,119,8,"intervalStart"],[179,27,119,21],[179,30,119,24],[179,33,119,27],[180,10,120,4],[180,14,120,8,"currentSample"],[180,27,120,21],[180,30,120,24],[180,31,120,25],[181,10,121,4],[181,14,121,10,"lastSample"],[181,24,121,20],[181,29,121,43],[182,10,123,4],[182,17,125,6,"currentSample"],[182,30,125,19],[182,35,125,24,"lastSample"],[182,45,125,34],[182,49,125,38,"sampleValues"],[182,61,125,50],[182,62,125,51,"currentSample"],[182,75,125,64],[182,76,125,65],[182,80,125,69,"aX"],[182,82,125,71],[182,84,126,6],[182,86,126,8,"currentSample"],[182,99,126,21],[182,101,127,6],[183,12,128,6,"intervalStart"],[183,25,128,19],[183,29,128,23,"kSampleStepSize"],[183,44,128,38],[184,10,129,4],[185,10,130,4],[185,12,130,6,"currentSample"],[185,25,130,19],[187,10,132,4],[188,10,133,4],[188,14,133,10,"dist"],[188,18,133,14],[188,21,134,6],[188,22,134,7,"aX"],[188,24,134,9],[188,27,134,12,"sampleValues"],[188,39,134,24],[188,40,134,25,"currentSample"],[188,53,134,38],[188,54,134,39],[188,59,135,7,"sampleValues"],[188,71,135,19],[188,72,135,20,"currentSample"],[188,85,135,33],[188,88,135,36],[188,89,135,37],[188,90,135,38],[188,93,135,41,"sampleValues"],[188,105,135,53],[188,106,135,54,"currentSample"],[188,119,135,67],[188,120,135,68],[188,121,135,69],[189,10,136,4],[189,14,136,10,"guessForT"],[189,23,136,19],[189,26,136,22,"intervalStart"],[189,39,136,35],[189,42,136,38,"dist"],[189,46,136,42],[189,49,136,45,"kSampleStepSize"],[189,64,136,60],[190,10,138,4],[190,14,138,10,"initialSlope"],[190,26,138,22],[190,29,138,25,"getSlope"],[190,37,138,33],[190,38,138,34,"guessForT"],[190,47,138,43],[190,49,138,45,"mX1"],[190,52,138,48],[190,54,138,50,"mX2"],[190,57,138,53],[190,58,138,54],[191,10,139,4],[191,14,139,8,"initialSlope"],[191,26,139,20],[191,30,139,24,"NEWTON_MIN_SLOPE"],[191,46,139,40],[191,48,139,42],[192,12,140,6],[192,19,140,13,"newtonRaphsonIterate"],[192,39,140,33],[192,40,140,34,"aX"],[192,42,140,36],[192,44,140,38,"guessForT"],[192,53,140,47],[192,55,140,49,"mX1"],[192,58,140,52],[192,60,140,54,"mX2"],[192,63,140,57],[192,64,140,58],[193,10,141,4],[193,11,141,5],[193,17,141,11],[193,21,141,15,"initialSlope"],[193,33,141,27],[193,38,141,32],[193,41,141,35],[193,43,141,37],[194,12,142,6],[194,19,142,13,"guessForT"],[194,28,142,22],[195,10,143,4],[195,11,143,5],[195,17,143,11],[196,12,144,6],[196,19,144,13,"binarySubdivide"],[196,34,144,28],[196,35,145,8,"aX"],[196,37,145,10],[196,39,146,8,"intervalStart"],[196,52,146,21],[196,54,147,8,"intervalStart"],[196,67,147,21],[196,70,147,24,"kSampleStepSize"],[196,85,147,39],[196,87,148,8,"mX1"],[196,90,148,11],[196,92,149,8,"mX2"],[196,95,150,6],[196,96,150,7],[197,10,151,4],[198,8,152,2],[198,9,152,3],[199,8,152,3,"getTForX"],[199,16,152,3],[199,17,152,3,"__closure"],[199,26,152,3],[200,10,152,3,"kSplineTableSize"],[200,26,152,3],[201,10,152,3,"sampleValues"],[201,22,152,3],[202,10,152,3,"kSampleStepSize"],[202,25,152,3],[203,10,152,3,"getSlope"],[203,18,152,3],[204,10,152,3,"mX1"],[204,13,152,3],[205,10,152,3,"mX2"],[205,13,152,3],[206,10,152,3,"NEWTON_MIN_SLOPE"],[206,26,152,3],[207,10,152,3,"newtonRaphsonIterate"],[207,30,152,3],[208,10,152,3,"binarySubdivide"],[209,8,152,3],[210,8,152,3,"getTForX"],[210,16,152,3],[210,17,152,3,"__workletHash"],[210,30,152,3],[211,8,152,3,"getTForX"],[211,16,152,3],[211,17,152,3,"__initData"],[211,27,152,3],[211,30,152,3,"_worklet_582111972461_init_data"],[211,61,152,3],[212,8,152,3],[212,15,152,3,"getTForX"],[212,23,152,3],[213,6,152,3],[213,7,117,2],[214,6,154,2],[214,13,154,9],[215,8,154,9],[215,12,154,9,"BezierEasing"],[215,24,154,9],[215,36,154,9,"BezierEasing"],[215,37,154,31,"x"],[215,38,154,32],[215,40,154,34],[216,10,156,4],[216,14,156,8,"mX1"],[216,17,156,11],[216,22,156,16,"mY1"],[216,25,156,19],[216,29,156,23,"mX2"],[216,32,156,26],[216,37,156,31,"mY2"],[216,40,156,34],[216,42,156,36],[217,12,157,6],[217,19,157,13,"x"],[217,20,157,14],[217,21,157,15],[217,22,157,16],[218,10,158,4],[219,10,159,4],[220,10,160,4],[220,14,160,8,"x"],[220,15,160,9],[220,20,160,14],[220,21,160,15],[220,23,160,17],[221,12,161,6],[221,19,161,13],[221,20,161,14],[222,10,162,4],[223,10,163,4],[223,14,163,8,"x"],[223,15,163,9],[223,20,163,14],[223,21,163,15],[223,23,163,17],[224,12,164,6],[224,19,164,13],[224,20,164,14],[225,10,165,4],[226,10,166,4],[226,17,166,11,"calcBezier"],[226,27,166,21],[226,28,166,22,"getTForX"],[226,36,166,30],[226,37,166,31,"x"],[226,38,166,32],[226,39,166,33],[226,41,166,35,"mY1"],[226,44,166,38],[226,46,166,40,"mY2"],[226,49,166,43],[226,50,166,44],[227,8,167,2],[227,9,167,3],[228,8,167,3,"BezierEasing"],[228,20,167,3],[228,21,167,3,"__closure"],[228,30,167,3],[229,10,167,3,"mX1"],[229,13,167,3],[230,10,167,3,"mY1"],[230,13,167,3],[231,10,167,3,"mX2"],[231,13,167,3],[232,10,167,3,"mY2"],[232,13,167,3],[233,10,167,3,"calcBezier"],[233,20,167,3],[234,10,167,3,"getTForX"],[235,8,167,3],[236,8,167,3,"BezierEasing"],[236,20,167,3],[236,21,167,3,"__workletHash"],[236,34,167,3],[237,8,167,3,"BezierEasing"],[237,20,167,3],[237,21,167,3,"__initData"],[237,31,167,3],[237,34,167,3,"_worklet_5253683607097_init_data"],[237,66,167,3],[238,8,167,3],[238,15,167,3,"BezierEasing"],[238,27,167,3],[239,6,167,3],[239,7,154,9],[240,4,168,0],[240,5,168,1],[241,4,168,1,"Bezier"],[241,10,168,1],[241,11,168,1,"__closure"],[241,20,168,1],[242,6,168,1,"kSplineTableSize"],[242,22,168,1],[243,6,168,1,"calcBezier"],[243,16,168,1],[244,6,168,1,"kSampleStepSize"],[244,21,168,1],[245,6,168,1,"getSlope"],[245,14,168,1],[246,6,168,1,"NEWTON_MIN_SLOPE"],[246,22,168,1],[247,6,168,1,"newtonRaphsonIterate"],[247,26,168,1],[248,6,168,1,"binarySubdivide"],[249,4,168,1],[250,4,168,1,"Bezier"],[250,10,168,1],[250,11,168,1,"__workletHash"],[250,24,168,1],[251,4,168,1,"Bezier"],[251,10,168,1],[251,11,168,1,"__initData"],[251,21,168,1],[251,24,168,1,"_worklet_4651979895956_init_data"],[251,56,168,1],[252,4,168,1],[252,11,168,1,"Bezier"],[252,17,168,1],[253,2,168,1],[253,3,89,7],[254,0,89,7],[254,3]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","Bezier","LinearEasing","getTForX","BezierEasing"],"mappings":"AAA;ACmB;CDG;AEC;CFG;AGC;CHG;AIG;CJG;AKG;CLG;AME;CNwB;AOE;CPgB;OQE;ECQ;GDG;EEiB;GFmC;SGE;GHa;CRC"}},"type":"js/module"}]}